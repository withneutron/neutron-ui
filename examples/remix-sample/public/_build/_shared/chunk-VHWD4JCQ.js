import {
  require_object_assign,
  require_react
} from "/build/_shared/chunk-522M2S2U.js";
import {
  __commonJS,
  __toESM,
  init_react
} from "/build/_shared/chunk-766VYCIP.js";

// ../../ui/node_modules/locale-enum/index.js
var require_locale_enum = __commonJS({
  "../../ui/node_modules/locale-enum/index.js"(exports) {
    "use strict";
    init_react();
    exports.__esModule = true;
    exports.Locale = void 0;
    var Locale3;
    (function(Locale4) {
      Locale4["af"] = "af";
      Locale4["af_NA"] = "af-NA";
      Locale4["af_ZA"] = "af-ZA";
      Locale4["agq"] = "agq";
      Locale4["agq_CM"] = "agq-CM";
      Locale4["ak"] = "ak";
      Locale4["ak_GH"] = "ak-GH";
      Locale4["am"] = "am";
      Locale4["am_ET"] = "am-ET";
      Locale4["ar"] = "ar";
      Locale4["ar_001"] = "ar-001";
      Locale4["ar_AE"] = "ar-AE";
      Locale4["ar_BH"] = "ar-BH";
      Locale4["ar_DZ"] = "ar-DZ";
      Locale4["ar_EG"] = "ar-EG";
      Locale4["ar_IQ"] = "ar-IQ";
      Locale4["ar_JO"] = "ar-JO";
      Locale4["ar_KW"] = "ar-KW";
      Locale4["ar_LB"] = "ar-LB";
      Locale4["ar_LY"] = "ar-LY";
      Locale4["ar_MA"] = "ar-MA";
      Locale4["ar_OM"] = "ar-OM";
      Locale4["ar_QA"] = "ar-QA";
      Locale4["ar_SA"] = "ar-SA";
      Locale4["ar_SD"] = "ar-SD";
      Locale4["ar_SY"] = "ar-SY";
      Locale4["ar_TN"] = "ar-TN";
      Locale4["ar_YE"] = "ar-YE";
      Locale4["as"] = "as";
      Locale4["as_IN"] = "as-IN";
      Locale4["asa"] = "asa";
      Locale4["asa_TZ"] = "asa-TZ";
      Locale4["az"] = "az";
      Locale4["az_Cyrl"] = "az-Cyrl";
      Locale4["az_Cyrl_AZ"] = "az-Cyrl-AZ";
      Locale4["az_Latn"] = "az-Latn";
      Locale4["az_Latn_AZ"] = "az-Latn-AZ";
      Locale4["bas"] = "bas";
      Locale4["bas_CM"] = "bas-CM";
      Locale4["be"] = "be";
      Locale4["be_BY"] = "be-BY";
      Locale4["bem"] = "bem";
      Locale4["bem_ZM"] = "bem-ZM";
      Locale4["bez"] = "bez";
      Locale4["bez_TZ"] = "bez-TZ";
      Locale4["bg"] = "bg";
      Locale4["bg_BG"] = "bg-BG";
      Locale4["bm"] = "bm";
      Locale4["bm_ML"] = "bm-ML";
      Locale4["bn"] = "bn";
      Locale4["bn_BD"] = "bn-BD";
      Locale4["bn_IN"] = "bn-IN";
      Locale4["bo"] = "bo";
      Locale4["bo_CN"] = "bo-CN";
      Locale4["bo_IN"] = "bo-IN";
      Locale4["br"] = "br";
      Locale4["br_FR"] = "br-FR";
      Locale4["brx"] = "brx";
      Locale4["brx_IN"] = "brx-IN";
      Locale4["bs"] = "bs";
      Locale4["bs_BA"] = "bs-BA";
      Locale4["ca"] = "ca";
      Locale4["ca_ES"] = "ca-ES";
      Locale4["cgg"] = "cgg";
      Locale4["cgg_UG"] = "cgg-UG";
      Locale4["chr"] = "chr";
      Locale4["chr_US"] = "chr-US";
      Locale4["cs"] = "cs";
      Locale4["cs_CZ"] = "cs-CZ";
      Locale4["cy"] = "cy";
      Locale4["cy_GB"] = "cy-GB";
      Locale4["da"] = "da";
      Locale4["da_DK"] = "da-DK";
      Locale4["dav"] = "dav";
      Locale4["dav_KE"] = "dav-KE";
      Locale4["de"] = "de";
      Locale4["de_AT"] = "de-AT";
      Locale4["de_BE"] = "de-BE";
      Locale4["de_CH"] = "de-CH";
      Locale4["de_DE"] = "de-DE";
      Locale4["de_LI"] = "de-LI";
      Locale4["de_LU"] = "de-LU";
      Locale4["dje"] = "dje";
      Locale4["dje_NE"] = "dje-NE";
      Locale4["dua"] = "dua";
      Locale4["dua_CM"] = "dua-CM";
      Locale4["dyo"] = "dyo";
      Locale4["dyo_SN"] = "dyo-SN";
      Locale4["ebu"] = "ebu";
      Locale4["ebu_KE"] = "ebu-KE";
      Locale4["ee"] = "ee";
      Locale4["ee_GH"] = "ee-GH";
      Locale4["ee_TG"] = "ee-TG";
      Locale4["el"] = "el";
      Locale4["el_CY"] = "el-CY";
      Locale4["el_GR"] = "el-GR";
      Locale4["en"] = "en";
      Locale4["en_AE"] = "en-AE";
      Locale4["en_AR"] = "en-AR";
      Locale4["en_AS"] = "en-AS";
      Locale4["en_AT"] = "en-AT";
      Locale4["en_AU"] = "en-AU";
      Locale4["en_BB"] = "en-BB";
      Locale4["en_BE"] = "en-BE";
      Locale4["en_BG"] = "en-BG";
      Locale4["en_BH"] = "en-BH";
      Locale4["en_BM"] = "en-BM";
      Locale4["en_BR"] = "en-BR";
      Locale4["en_BW"] = "en-BW";
      Locale4["en_BZ"] = "en-BZ";
      Locale4["en_CA"] = "en-CA";
      Locale4["en_CH"] = "en-CH";
      Locale4["en_CL"] = "en-CL";
      Locale4["en_CN"] = "en-CN";
      Locale4["en_CO"] = "en-CO";
      Locale4["en_CR"] = "en-CR";
      Locale4["en_CY"] = "en-CY";
      Locale4["en_CZ"] = "en-CZ";
      Locale4["en_DE"] = "en-DE";
      Locale4["en_DK"] = "en-DK";
      Locale4["en_DO"] = "en-DO";
      Locale4["en_EE"] = "en-EE";
      Locale4["en_EG"] = "en-EG";
      Locale4["en_ES"] = "en-ES";
      Locale4["en_FI"] = "en-FI";
      Locale4["en_GB"] = "en-GB";
      Locale4["en_GE"] = "en-GE";
      Locale4["en_GF"] = "en-GF";
      Locale4["en_GH"] = "en-GH";
      Locale4["en_GI"] = "en-GI";
      Locale4["en_GR"] = "en-GR";
      Locale4["en_GU"] = "en-GU";
      Locale4["en_GY"] = "en-GY";
      Locale4["en_HK"] = "en-HK";
      Locale4["en_HR"] = "en-HR";
      Locale4["en_HU"] = "en-HU";
      Locale4["en_ID"] = "en-ID";
      Locale4["en_IE"] = "en-IE";
      Locale4["en_IL"] = "en-IL";
      Locale4["en_IN"] = "en-IN";
      Locale4["en_IS"] = "en-IS";
      Locale4["en_IT"] = "en-IT";
      Locale4["en_JM"] = "en-JM";
      Locale4["en_JO"] = "en-JO";
      Locale4["en_JP"] = "en-JP";
      Locale4["en_KR"] = "en-KR";
      Locale4["en_KW"] = "en-KW";
      Locale4["en_KY"] = "en-KY";
      Locale4["en_LB"] = "en-LB";
      Locale4["en_LI"] = "en-LI";
      Locale4["en_LT"] = "en-LT";
      Locale4["en_LU"] = "en-LU";
      Locale4["en_LV"] = "en-LV";
      Locale4["en_MA"] = "en-MA";
      Locale4["en_MC"] = "en-MC";
      Locale4["en_MG"] = "en-MG";
      Locale4["en_MH"] = "en-MH";
      Locale4["en_MK"] = "en-MK";
      Locale4["en_MO"] = "en-MO";
      Locale4["en_MP"] = "en-MP";
      Locale4["en_MT"] = "en-MT";
      Locale4["en_MU"] = "en-MU";
      Locale4["en_MX"] = "en-MX";
      Locale4["en_MY"] = "en-MY";
      Locale4["en_NA"] = "en-NA";
      Locale4["en_NL"] = "en-NL";
      Locale4["en_NO"] = "en-NO";
      Locale4["en_NZ"] = "en-NZ";
      Locale4["en_OM"] = "en-OM";
      Locale4["en_PE"] = "en-PE";
      Locale4["en_PH"] = "en-PH";
      Locale4["en_PK"] = "en-PK";
      Locale4["en_PL"] = "en-PL";
      Locale4["en_PR"] = "en-PR";
      Locale4["en_PT"] = "en-PT";
      Locale4["en_PY"] = "en-PY";
      Locale4["en_QA"] = "en-QA";
      Locale4["en_RO"] = "en-RO";
      Locale4["en_RU"] = "en-RU";
      Locale4["en_SA"] = "en-SA";
      Locale4["en_SE"] = "en-SE";
      Locale4["en_SG"] = "en-SG";
      Locale4["en_SK"] = "en-SK";
      Locale4["en_SI"] = "en-SI";
      Locale4["en_TH"] = "en-TH";
      Locale4["en_TR"] = "en-TR";
      Locale4["en_TT"] = "en-TT";
      Locale4["en_TW"] = "en-TW";
      Locale4["en_UA"] = "en-UA";
      Locale4["en_UM"] = "en-UM";
      Locale4["en_US"] = "en-US";
      Locale4["en_US_POSIX"] = "en-US-POSIX";
      Locale4["en_UY"] = "en-UY";
      Locale4["en_VE"] = "en-VE";
      Locale4["en_VI"] = "en-VI";
      Locale4["en_VN"] = "en-VN";
      Locale4["en_ZA"] = "en-ZA";
      Locale4["en_ZW"] = "en-ZW";
      Locale4["eo"] = "eo";
      Locale4["es"] = "es";
      Locale4["es_419"] = "es-419";
      Locale4["es_AR"] = "es-AR";
      Locale4["es_BO"] = "es-BO";
      Locale4["es_CL"] = "es-CL";
      Locale4["es_CO"] = "es-CO";
      Locale4["es_CR"] = "es-CR";
      Locale4["es_DO"] = "es-DO";
      Locale4["es_EC"] = "es-EC";
      Locale4["es_ES"] = "es-ES";
      Locale4["es_GQ"] = "es-GQ";
      Locale4["es_GT"] = "es-GT";
      Locale4["es_HN"] = "es-HN";
      Locale4["es_MX"] = "es-MX";
      Locale4["es_NI"] = "es-NI";
      Locale4["es_PA"] = "es-PA";
      Locale4["es_PE"] = "es-PE";
      Locale4["es_PR"] = "es-PR";
      Locale4["es_PY"] = "es-PY";
      Locale4["es_SV"] = "es-SV";
      Locale4["es_US"] = "es-US";
      Locale4["es_UY"] = "es-UY";
      Locale4["es_VE"] = "es-VE";
      Locale4["et"] = "et";
      Locale4["et_EE"] = "et-EE";
      Locale4["eu"] = "eu";
      Locale4["eu_ES"] = "eu-ES";
      Locale4["ewo"] = "ewo";
      Locale4["ewo_CM"] = "ewo-CM";
      Locale4["fa"] = "fa";
      Locale4["fa_AF"] = "fa-AF";
      Locale4["fa_IR"] = "fa-IR";
      Locale4["ff"] = "ff";
      Locale4["ff_SN"] = "ff-SN";
      Locale4["fi"] = "fi";
      Locale4["fi_FI"] = "fi-FI";
      Locale4["fil"] = "fil";
      Locale4["fil_PH"] = "fil-PH";
      Locale4["fo"] = "fo";
      Locale4["fo_FO"] = "fo-FO";
      Locale4["fr"] = "fr";
      Locale4["fr_BE"] = "fr-BE";
      Locale4["fr_BF"] = "fr-BF";
      Locale4["fr_BI"] = "fr-BI";
      Locale4["fr_BJ"] = "fr-BJ";
      Locale4["fr_BL"] = "fr-BL";
      Locale4["fr_CA"] = "fr-CA";
      Locale4["fr_CD"] = "fr-CD";
      Locale4["fr_CF"] = "fr-CF";
      Locale4["fr_CG"] = "fr-CG";
      Locale4["fr_CH"] = "fr-CH";
      Locale4["fr_CI"] = "fr-CI";
      Locale4["fr_CM"] = "fr-CM";
      Locale4["fr_DJ"] = "fr-DJ";
      Locale4["fr_FR"] = "fr-FR";
      Locale4["fr_GA"] = "fr-GA";
      Locale4["fr_GF"] = "fr-GF";
      Locale4["fr_GN"] = "fr-GN";
      Locale4["fr_GP"] = "fr-GP";
      Locale4["fr_GQ"] = "fr-GQ";
      Locale4["fr_KM"] = "fr-KM";
      Locale4["fr_LU"] = "fr-LU";
      Locale4["fr_MC"] = "fr-MC";
      Locale4["fr_MF"] = "fr-MF";
      Locale4["fr_MG"] = "fr-MG";
      Locale4["fr_ML"] = "fr-ML";
      Locale4["fr_MQ"] = "fr-MQ";
      Locale4["fr_NE"] = "fr-NE";
      Locale4["fr_RE"] = "fr-RE";
      Locale4["fr_RW"] = "fr-RW";
      Locale4["fr_SN"] = "fr-SN";
      Locale4["fr_TD"] = "fr-TD";
      Locale4["fr_TG"] = "fr-TG";
      Locale4["fr_YT"] = "fr-YT";
      Locale4["ga"] = "ga";
      Locale4["ga_IE"] = "ga-IE";
      Locale4["gl"] = "gl";
      Locale4["gl_ES"] = "gl-ES";
      Locale4["gsw"] = "gsw";
      Locale4["gsw_CH"] = "gsw-CH";
      Locale4["gu"] = "gu";
      Locale4["gu_IN"] = "gu-IN";
      Locale4["guz"] = "guz";
      Locale4["guz_KE"] = "guz-KE";
      Locale4["gv"] = "gv";
      Locale4["gv_GB"] = "gv-GB";
      Locale4["ha"] = "ha";
      Locale4["ha_Latn"] = "ha-Latn";
      Locale4["ha_Latn_GH"] = "ha-Latn-GH";
      Locale4["ha_Latn_NE"] = "ha-Latn-NE";
      Locale4["ha_Latn_NG"] = "ha-Latn-NG";
      Locale4["haw"] = "haw";
      Locale4["haw_US"] = "haw-US";
      Locale4["he"] = "he";
      Locale4["he_IL"] = "he-IL";
      Locale4["hi"] = "hi";
      Locale4["hi_IN"] = "hi-IN";
      Locale4["hr"] = "hr";
      Locale4["hr_HR"] = "hr-HR";
      Locale4["hu"] = "hu";
      Locale4["hu_HU"] = "hu-HU";
      Locale4["hy"] = "hy";
      Locale4["hy_AM"] = "hy-AM";
      Locale4["id"] = "id";
      Locale4["id_ID"] = "id-ID";
      Locale4["ig"] = "ig";
      Locale4["ig_NG"] = "ig-NG";
      Locale4["ii"] = "ii";
      Locale4["ii_CN"] = "ii-CN";
      Locale4["is"] = "is";
      Locale4["is_IS"] = "is-IS";
      Locale4["it"] = "it";
      Locale4["it_CH"] = "it-CH";
      Locale4["it_IT"] = "it-IT";
      Locale4["ja"] = "ja";
      Locale4["ja_JP"] = "ja-JP";
      Locale4["jmc"] = "jmc";
      Locale4["jmc_TZ"] = "jmc-TZ";
      Locale4["ka"] = "ka";
      Locale4["ka_GE"] = "ka-GE";
      Locale4["kab"] = "kab";
      Locale4["kab_DZ"] = "kab-DZ";
      Locale4["kam"] = "kam";
      Locale4["kam_KE"] = "kam-KE";
      Locale4["kde"] = "kde";
      Locale4["kde_TZ"] = "kde-TZ";
      Locale4["kea"] = "kea";
      Locale4["kea_CV"] = "kea-CV";
      Locale4["khq"] = "khq";
      Locale4["khq_ML"] = "khq-ML";
      Locale4["ki"] = "ki";
      Locale4["ki_KE"] = "ki-KE";
      Locale4["kk"] = "kk";
      Locale4["kk_Cyrl"] = "kk-Cyrl";
      Locale4["kk_Cyrl_KZ"] = "kk-Cyrl-KZ";
      Locale4["kl"] = "kl";
      Locale4["kl_GL"] = "kl-GL";
      Locale4["kln"] = "kln";
      Locale4["kln_KE"] = "kln-KE";
      Locale4["km"] = "km";
      Locale4["km_KH"] = "km-KH";
      Locale4["kn"] = "kn";
      Locale4["kn_IN"] = "kn-IN";
      Locale4["ko"] = "ko";
      Locale4["ko_KR"] = "ko-KR";
      Locale4["kok"] = "kok";
      Locale4["kok_IN"] = "kok-IN";
      Locale4["ksb"] = "ksb";
      Locale4["ksb_TZ"] = "ksb-TZ";
      Locale4["ksf"] = "ksf";
      Locale4["ksf_CM"] = "ksf-CM";
      Locale4["kw"] = "kw";
      Locale4["kw_GB"] = "kw-GB";
      Locale4["lag"] = "lag";
      Locale4["lag_TZ"] = "lag-TZ";
      Locale4["lg"] = "lg";
      Locale4["lg_UG"] = "lg-UG";
      Locale4["ln"] = "ln";
      Locale4["ln_CD"] = "ln-CD";
      Locale4["ln_CG"] = "ln-CG";
      Locale4["lt"] = "lt";
      Locale4["lt_LT"] = "lt-LT";
      Locale4["lu"] = "lu";
      Locale4["lu_CD"] = "lu-CD";
      Locale4["luo"] = "luo";
      Locale4["luo_KE"] = "luo-KE";
      Locale4["luy"] = "luy";
      Locale4["luy_KE"] = "luy-KE";
      Locale4["lv"] = "lv";
      Locale4["lv_LV"] = "lv-LV";
      Locale4["mas"] = "mas";
      Locale4["mas_KE"] = "mas-KE";
      Locale4["mas_TZ"] = "mas-TZ";
      Locale4["mer"] = "mer";
      Locale4["mer_KE"] = "mer-KE";
      Locale4["mfe"] = "mfe";
      Locale4["mfe_MU"] = "mfe-MU";
      Locale4["mg"] = "mg";
      Locale4["mg_MG"] = "mg-MG";
      Locale4["mgh"] = "mgh";
      Locale4["mgh_MZ"] = "mgh-MZ";
      Locale4["mk"] = "mk";
      Locale4["mk_MK"] = "mk-MK";
      Locale4["ml"] = "ml";
      Locale4["ml_IN"] = "ml-IN";
      Locale4["mr"] = "mr";
      Locale4["mr_IN"] = "mr-IN";
      Locale4["ms"] = "ms";
      Locale4["ms_BN"] = "ms-BN";
      Locale4["ms_MY"] = "ms-MY";
      Locale4["mt"] = "mt";
      Locale4["mt_MT"] = "mt-MT";
      Locale4["mua"] = "mua";
      Locale4["mua_CM"] = "mua-CM";
      Locale4["my"] = "my";
      Locale4["my_MM"] = "my-MM";
      Locale4["naq"] = "naq";
      Locale4["naq_NA"] = "naq-NA";
      Locale4["nb"] = "nb";
      Locale4["nb_NO"] = "nb-NO";
      Locale4["nd"] = "nd";
      Locale4["nd_ZW"] = "nd-ZW";
      Locale4["ne"] = "ne";
      Locale4["ne_IN"] = "ne-IN";
      Locale4["ne_NP"] = "ne-NP";
      Locale4["nl"] = "nl";
      Locale4["nl_AW"] = "nl-AW";
      Locale4["nl_BE"] = "nl-BE";
      Locale4["nl_CW"] = "nl-CW";
      Locale4["nl_NL"] = "nl-NL";
      Locale4["nl_SX"] = "nl-SX";
      Locale4["nmg"] = "nmg";
      Locale4["nmg_CM"] = "nmg-CM";
      Locale4["nn"] = "nn";
      Locale4["nn_NO"] = "nn-NO";
      Locale4["nus"] = "nus";
      Locale4["nus_SD"] = "nus-SD";
      Locale4["nyn"] = "nyn";
      Locale4["nyn_UG"] = "nyn-UG";
      Locale4["om"] = "om";
      Locale4["om_ET"] = "om-ET";
      Locale4["om_KE"] = "om-KE";
      Locale4["or"] = "or";
      Locale4["or_IN"] = "or-IN";
      Locale4["pa"] = "pa";
      Locale4["pa_Arab"] = "pa-Arab";
      Locale4["pa_Arab_PK"] = "pa-Arab-PK";
      Locale4["pa_Guru"] = "pa-Guru";
      Locale4["pa_Guru_IN"] = "pa-Guru-IN";
      Locale4["pl"] = "pl";
      Locale4["pl_PL"] = "pl-PL";
      Locale4["ps"] = "ps";
      Locale4["ps_AF"] = "ps-AF";
      Locale4["pt"] = "pt";
      Locale4["pt_AO"] = "pt-AO";
      Locale4["pt_BR"] = "pt-BR";
      Locale4["pt_GW"] = "pt-GW";
      Locale4["pt_MZ"] = "pt-MZ";
      Locale4["pt_PT"] = "pt-PT";
      Locale4["pt_ST"] = "pt-ST";
      Locale4["rm"] = "rm";
      Locale4["rm_CH"] = "rm-CH";
      Locale4["rn"] = "rn";
      Locale4["rn_BI"] = "rn-BI";
      Locale4["ro"] = "ro";
      Locale4["ro_MD"] = "ro-MD";
      Locale4["ro_RO"] = "ro-RO";
      Locale4["rof"] = "rof";
      Locale4["rof_TZ"] = "rof-TZ";
      Locale4["ru"] = "ru";
      Locale4["ru_MD"] = "ru-MD";
      Locale4["ru_RU"] = "ru-RU";
      Locale4["ru_UA"] = "ru-UA";
      Locale4["rw"] = "rw";
      Locale4["rw_RW"] = "rw-RW";
      Locale4["rwk"] = "rwk";
      Locale4["rwk_TZ"] = "rwk-TZ";
      Locale4["saq"] = "saq";
      Locale4["saq_KE"] = "saq-KE";
      Locale4["sbp"] = "sbp";
      Locale4["sbp_TZ"] = "sbp-TZ";
      Locale4["seh"] = "seh";
      Locale4["seh_MZ"] = "seh-MZ";
      Locale4["ses"] = "ses";
      Locale4["ses_ML"] = "ses-ML";
      Locale4["sg"] = "sg";
      Locale4["sg_CF"] = "sg-CF";
      Locale4["shi"] = "shi";
      Locale4["shi_Latn"] = "shi-Latn";
      Locale4["shi_Latn_MA"] = "shi-Latn-MA";
      Locale4["shi_Tfng"] = "shi-Tfng";
      Locale4["shi_Tfng_MA"] = "shi-Tfng-MA";
      Locale4["si"] = "si";
      Locale4["si_LK"] = "si-LK";
      Locale4["sk"] = "sk";
      Locale4["sk_SK"] = "sk-SK";
      Locale4["sl"] = "sl";
      Locale4["sl_SI"] = "sl-SI";
      Locale4["sn"] = "sn";
      Locale4["sn_ZW"] = "sn-ZW";
      Locale4["so"] = "so";
      Locale4["so_DJ"] = "so-DJ";
      Locale4["so_ET"] = "so-ET";
      Locale4["so_KE"] = "so-KE";
      Locale4["so_SO"] = "so-SO";
      Locale4["sq"] = "sq";
      Locale4["sq_AL"] = "sq-AL";
      Locale4["sr"] = "sr";
      Locale4["sr_Cyrl"] = "sr-Cyrl";
      Locale4["sr_Cyrl_BA"] = "sr-Cyrl-BA";
      Locale4["sr_Cyrl_ME"] = "sr-Cyrl-ME";
      Locale4["sr_Cyrl_RS"] = "sr-Cyrl-RS";
      Locale4["sr_Latn"] = "sr-Latn";
      Locale4["sr_Latn_BA"] = "sr-Latn-BA";
      Locale4["sr_Latn_ME"] = "sr-Latn-ME";
      Locale4["sr_Latn_RS"] = "sr-Latn-RS";
      Locale4["sv"] = "sv";
      Locale4["sv_FI"] = "sv-FI";
      Locale4["sv_SE"] = "sv-SE";
      Locale4["sw"] = "sw";
      Locale4["sw_KE"] = "sw-KE";
      Locale4["sw_TZ"] = "sw-TZ";
      Locale4["swc"] = "swc";
      Locale4["swc_CD"] = "swc-CD";
      Locale4["ta"] = "ta";
      Locale4["ta_IN"] = "ta-IN";
      Locale4["ta_LK"] = "ta-LK";
      Locale4["te"] = "te";
      Locale4["te_IN"] = "te-IN";
      Locale4["teo"] = "teo";
      Locale4["teo_KE"] = "teo-KE";
      Locale4["teo_UG"] = "teo-UG";
      Locale4["th"] = "th";
      Locale4["th_TH"] = "th-TH";
      Locale4["ti"] = "ti";
      Locale4["ti_ER"] = "ti-ER";
      Locale4["ti_ET"] = "ti-ET";
      Locale4["to"] = "to";
      Locale4["to_TO"] = "to-TO";
      Locale4["tr"] = "tr";
      Locale4["tr_TR"] = "tr-TR";
      Locale4["twq"] = "twq";
      Locale4["twq_NE"] = "twq-NE";
      Locale4["tzm"] = "tzm";
      Locale4["tzm_Latn"] = "tzm-Latn";
      Locale4["tzm_Latn_MA"] = "tzm-Latn-MA";
      Locale4["uk"] = "uk";
      Locale4["uk_UA"] = "uk-UA";
      Locale4["ur"] = "ur";
      Locale4["ur_IN"] = "ur-IN";
      Locale4["ur_PK"] = "ur-PK";
      Locale4["uz"] = "uz";
      Locale4["uz_Arab"] = "uz-Arab";
      Locale4["uz_Arab_AF"] = "uz-Arab-AF";
      Locale4["uz_Cyrl"] = "uz-Cyrl";
      Locale4["uz_Cyrl_UZ"] = "uz-Cyrl-UZ";
      Locale4["uz_Latn"] = "uz-Latn";
      Locale4["uz_Latn_UZ"] = "uz-Latn-UZ";
      Locale4["vai"] = "vai";
      Locale4["vai_Latn"] = "vai-Latn";
      Locale4["vai_Latn_LR"] = "vai-Latn-LR";
      Locale4["vai_Vaii"] = "vai-Vaii";
      Locale4["vai_Vaii_LR"] = "vai-Vaii-LR";
      Locale4["vi"] = "vi";
      Locale4["vi_VN"] = "vi-VN";
      Locale4["vun"] = "vun";
      Locale4["vun_TZ"] = "vun-TZ";
      Locale4["xog"] = "xog";
      Locale4["xog_UG"] = "xog-UG";
      Locale4["yav"] = "yav";
      Locale4["yav_CM"] = "yav-CM";
      Locale4["yo"] = "yo";
      Locale4["yo_NG"] = "yo-NG";
      Locale4["zh"] = "zh";
      Locale4["zh_Hans"] = "zh-Hans";
      Locale4["zh_Hans_AE"] = "zh-Hans-AE";
      Locale4["zh_Hans_AR"] = "zh-Hans-AR";
      Locale4["zh_Hans_AT"] = "zh-Hans-AT";
      Locale4["zh_Hans_AU"] = "zh-Hans-AU";
      Locale4["zh_Hans_BE"] = "zh-Hans-BE";
      Locale4["zh_Hans_BG"] = "zh-Hans-BG";
      Locale4["zh_Hans_BH"] = "zh-Hans-BH";
      Locale4["zh_Hans_BR"] = "zh-Hans-BR";
      Locale4["zh_Hans_BW"] = "zh-Hans-BW";
      Locale4["zh_Hans_CA"] = "zh-Hans-CA";
      Locale4["zh_Hans_CH"] = "zh-Hans-CH";
      Locale4["zh_Hans_CL"] = "zh-Hans-CL";
      Locale4["zh_Hans_CN"] = "zh-Hans-CN";
      Locale4["zh_Hans_CO"] = "zh-Hans-CO";
      Locale4["zh_Hans_CR"] = "zh-Hans-CR";
      Locale4["zh_Hans_CY"] = "zh-Hans-CY";
      Locale4["zh_Hans_CZ"] = "zh-Hans-CZ";
      Locale4["zh_Hans_DE"] = "zh-Hans-DE";
      Locale4["zh_Hans_DK"] = "zh-Hans-DK";
      Locale4["zh_Hans_DO"] = "zh-Hans-DO";
      Locale4["zh_Hans_EE"] = "zh-Hans-EE";
      Locale4["zh_Hans_EG"] = "zh-Hans-EG";
      Locale4["zh_Hans_ES"] = "zh-Hans-ES";
      Locale4["zh_Hans_FI"] = "zh-Hans-FI";
      Locale4["zh_Hans_GB"] = "zh-Hans-GB";
      Locale4["zh_Hans_GE"] = "zh-Hans-GE";
      Locale4["zh_Hans_GF"] = "zh-Hans-GF";
      Locale4["zh_Hans_GH"] = "zh-Hans-GH";
      Locale4["zh_Hans_GI"] = "zh-Hans-GI";
      Locale4["zh_Hans_GR"] = "zh-Hans-GR";
      Locale4["zh_Hans_HK"] = "zh-Hans-HK";
      Locale4["zh_Hans_HR"] = "zh-Hans-HR";
      Locale4["zh_Hans_HU"] = "zh-Hans-HU";
      Locale4["zh_Hans_ID"] = "zh-Hans-ID";
      Locale4["zh_Hans_IE"] = "zh-Hans-IE";
      Locale4["zh_Hans_IL"] = "zh-Hans-IL";
      Locale4["zh_Hans_IN"] = "zh-Hans-IN";
      Locale4["zh_Hans_IS"] = "zh-Hans-IS";
      Locale4["zh_Hans_IT"] = "zh-Hans-IT";
      Locale4["zh_Hans_JO"] = "zh-Hans-JO";
      Locale4["zh_Hans_JP"] = "zh-Hans-JP";
      Locale4["zh_Hans_KR"] = "zh-Hans-KR";
      Locale4["zh_Hans_KW"] = "zh-Hans-KW";
      Locale4["zh_Hans_KY"] = "zh-Hans-KY";
      Locale4["zh_Hans_LB"] = "zh-Hans-LB";
      Locale4["zh_Hans_LI"] = "zh-Hans-LI";
      Locale4["zh_Hans_LT"] = "zh-Hans-LT";
      Locale4["zh_Hans_LU"] = "zh-Hans-LU";
      Locale4["zh_Hans_LV"] = "zh-Hans-LV";
      Locale4["zh_Hans_MA"] = "zh-Hans-MA";
      Locale4["zh_Hans_MC"] = "zh-Hans-MC";
      Locale4["zh_Hans_MG"] = "zh-Hans-MG";
      Locale4["zh_Hans_MK"] = "zh-Hans-MK";
      Locale4["zh_Hans_MO"] = "zh-Hans-MO";
      Locale4["zh_Hans_MT"] = "zh-Hans-MT";
      Locale4["zh_Hans_MU"] = "zh-Hans-MU";
      Locale4["zh_Hans_MX"] = "zh-Hans-MX";
      Locale4["zh_Hans_MY"] = "zh-Hans-MY";
      Locale4["zh_Hans_NA"] = "zh-Hans-NA";
      Locale4["zh_Hans_NL"] = "zh-Hans-NL";
      Locale4["zh_Hans_NO"] = "zh-Hans-NO";
      Locale4["zh_Hans_NZ"] = "zh-Hans-NZ";
      Locale4["zh_Hans_OM"] = "zh-Hans-OM";
      Locale4["zh_Hans_PE"] = "zh-Hans-PE";
      Locale4["zh_Hans_PH"] = "zh-Hans-PH";
      Locale4["zh_Hans_PK"] = "zh-Hans-PK";
      Locale4["zh_Hans_PL"] = "zh-Hans-PL";
      Locale4["zh_Hans_PR"] = "zh-Hans-PR";
      Locale4["zh_Hans_PT"] = "zh-Hans-PT";
      Locale4["zh_Hans_PY"] = "zh-Hans-PY";
      Locale4["zh_Hans_QA"] = "zh-Hans-QA";
      Locale4["zh_Hans_RO"] = "zh-Hans-RO";
      Locale4["zh_Hans_RU"] = "zh-Hans-RU";
      Locale4["zh_Hans_SA"] = "zh-Hans-SA";
      Locale4["zh_Hans_SE"] = "zh-Hans-SE";
      Locale4["zh_Hans_SG"] = "zh-Hans-SG";
      Locale4["zh_Hans_SK"] = "zh-Hans-SK";
      Locale4["zh_Hans_SI"] = "zh-Hans-SI";
      Locale4["zh_Hans_TH"] = "zh-Hans-TH";
      Locale4["zh_Hans_TR"] = "zh-Hans-TR";
      Locale4["zh_Hans_TW"] = "zh-Hans-TW";
      Locale4["zh_Hans_UA"] = "zh-Hans-UA";
      Locale4["zh_Hans_US"] = "zh-Hans-US";
      Locale4["zh_Hans_UY"] = "zh-Hans-UY";
      Locale4["zh_Hans_VE"] = "zh-Hans-VE";
      Locale4["zh_Hans_VN"] = "zh-Hans-VN";
      Locale4["zh_Hans_ZA"] = "zh-Hans-ZA";
      Locale4["zh_Hant"] = "zh-Hant";
      Locale4["zh_Hant_AE"] = "zh-Hant-AE";
      Locale4["zh_Hant_AR"] = "zh-Hant-AR";
      Locale4["zh_Hant_AT"] = "zh-Hant-AT";
      Locale4["zh_Hant_AU"] = "zh-Hant-AU";
      Locale4["zh_Hant_BE"] = "zh-Hant-BE";
      Locale4["zh_Hant_BG"] = "zh-Hant-BG";
      Locale4["zh_Hant_BH"] = "zh-Hant-BH";
      Locale4["zh_Hant_BR"] = "zh-Hant-BR";
      Locale4["zh_Hant_BW"] = "zh-Hant-BW";
      Locale4["zh_Hant_CA"] = "zh-Hant-CA";
      Locale4["zh_Hant_CH"] = "zh-Hant-CH";
      Locale4["zh_Hant_CL"] = "zh-Hant-CL";
      Locale4["zh_Hant_CN"] = "zh-Hant-CN";
      Locale4["zh_Hant_CO"] = "zh-Hant-CO";
      Locale4["zh_Hant_CR"] = "zh-Hant-CR";
      Locale4["zh_Hant_CY"] = "zh-Hant-CY";
      Locale4["zh_Hant_CZ"] = "zh-Hant-CZ";
      Locale4["zh_Hant_DE"] = "zh-Hant-DE";
      Locale4["zh_Hant_DK"] = "zh-Hant-DK";
      Locale4["zh_Hant_DO"] = "zh-Hant-DO";
      Locale4["zh_Hant_EE"] = "zh-Hant-EE";
      Locale4["zh_Hant_EG"] = "zh-Hant-EG";
      Locale4["zh_Hant_ES"] = "zh-Hant-ES";
      Locale4["zh_Hant_FI"] = "zh-Hant-FI";
      Locale4["zh_Hant_GB"] = "zh-Hant-GB";
      Locale4["zh_Hant_GE"] = "zh-Hant-GE";
      Locale4["zh_Hant_GF"] = "zh-Hant-GF";
      Locale4["zh_Hant_GH"] = "zh-Hant-GH";
      Locale4["zh_Hant_GI"] = "zh-Hant-GI";
      Locale4["zh_Hant_GR"] = "zh-Hant-GR";
      Locale4["zh_Hant_HK"] = "zh-Hant-HK";
      Locale4["zh_Hant_HR"] = "zh-Hant-HR";
      Locale4["zh_Hant_HU"] = "zh-Hant-HU";
      Locale4["zh_Hant_ID"] = "zh-Hant-ID";
      Locale4["zh_Hant_IE"] = "zh-Hant-IE";
      Locale4["zh_Hant_IL"] = "zh-Hant-IL";
      Locale4["zh_Hant_IN"] = "zh-Hant-IN";
      Locale4["zh_Hant_IS"] = "zh-Hant-IS";
      Locale4["zh_Hant_IT"] = "zh-Hant-IT";
      Locale4["zh_Hant_JO"] = "zh-Hant-JO";
      Locale4["zh_Hant_JP"] = "zh-Hant-JP";
      Locale4["zh_Hant_KR"] = "zh-Hant-KR";
      Locale4["zh_Hant_KW"] = "zh-Hant-KW";
      Locale4["zh_Hant_KY"] = "zh-Hant-KY";
      Locale4["zh_Hant_LB"] = "zh-Hant-LB";
      Locale4["zh_Hant_LI"] = "zh-Hant-LI";
      Locale4["zh_Hant_LT"] = "zh-Hant-LT";
      Locale4["zh_Hant_LU"] = "zh-Hant-LU";
      Locale4["zh_Hant_LV"] = "zh-Hant-LV";
      Locale4["zh_Hant_MA"] = "zh-Hant-MA";
      Locale4["zh_Hant_MC"] = "zh-Hant-MC";
      Locale4["zh_Hant_MG"] = "zh-Hant-MG";
      Locale4["zh_Hant_MK"] = "zh-Hant-MK";
      Locale4["zh_Hant_MO"] = "zh-Hant-MO";
      Locale4["zh_Hant_MT"] = "zh-Hant-MT";
      Locale4["zh_Hant_MU"] = "zh-Hant-MU";
      Locale4["zh_Hant_MX"] = "zh-Hant-MX";
      Locale4["zh_Hant_MY"] = "zh-Hant-MY";
      Locale4["zh_Hant_NA"] = "zh-Hant-NA";
      Locale4["zh_Hant_NL"] = "zh-Hant-NL";
      Locale4["zh_Hant_NO"] = "zh-Hant-NO";
      Locale4["zh_Hant_NZ"] = "zh-Hant-NZ";
      Locale4["zh_Hant_OM"] = "zh-Hant-OM";
      Locale4["zh_Hant_PE"] = "zh-Hant-PE";
      Locale4["zh_Hant_PH"] = "zh-Hant-PH";
      Locale4["zh_Hant_PK"] = "zh-Hant-PK";
      Locale4["zh_Hant_PL"] = "zh-Hant-PL";
      Locale4["zh_Hant_PR"] = "zh-Hant-PR";
      Locale4["zh_Hant_PT"] = "zh-Hant-PT";
      Locale4["zh_Hant_PY"] = "zh-Hant-PY";
      Locale4["zh_Hant_QA"] = "zh-Hant-QA";
      Locale4["zh_Hant_RO"] = "zh-Hant-RO";
      Locale4["zh_Hant_RU"] = "zh-Hant-RU";
      Locale4["zh_Hant_SA"] = "zh-Hant-SA";
      Locale4["zh_Hant_SE"] = "zh-Hant-SE";
      Locale4["zh_Hant_SG"] = "zh-Hant-SG";
      Locale4["zh_Hant_SK"] = "zh-Hant-SK";
      Locale4["zh_Hant_SI"] = "zh-Hant-SI";
      Locale4["zh_Hant_TH"] = "zh-Hant-TH";
      Locale4["zh_Hant_TR"] = "zh-Hant-TR";
      Locale4["zh_Hant_TW"] = "zh-Hant-TW";
      Locale4["zh_Hant_UA"] = "zh-Hant-UA";
      Locale4["zh_Hant_US"] = "zh-Hant-US";
      Locale4["zh_Hant_UY"] = "zh-Hant-UY";
      Locale4["zh_Hant_VE"] = "zh-Hant-VE";
      Locale4["zh_Hant_VN"] = "zh-Hant-VN";
      Locale4["zh_Hant_ZA"] = "zh-Hant-ZA";
      Locale4["zu"] = "zu";
      Locale4["zu_ZA"] = "zu-ZA";
    })(Locale3 = exports.Locale || (exports.Locale = {}));
  }
});

// ../../ui/node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "../../ui/node_modules/tslib/tslib.js"(exports, module) {
    init_react();
    var __extends2;
    var __assign2;
    var __rest2;
    var __decorate2;
    var __param2;
    var __metadata2;
    var __awaiter2;
    var __generator2;
    var __exportStar2;
    var __values2;
    var __read2;
    var __spread2;
    var __spreadArrays2;
    var __spreadArray2;
    var __await2;
    var __asyncGenerator2;
    var __asyncDelegator2;
    var __asyncValues2;
    var __makeTemplateObject2;
    var __importStar2;
    var __importDefault2;
    var __classPrivateFieldGet2;
    var __classPrivateFieldSet2;
    var __createBinding2;
    (function(factory) {
      var root = typeof globalThis === "object" ? globalThis : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory(createExporter(root, createExporter(exports2)));
        });
      } else if (typeof module === "object" && typeof module.exports === "object") {
        factory(createExporter(root, createExporter(module.exports)));
      } else {
        factory(createExporter(root));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v2) {
          return exports2[id] = previous ? previous(id, v2) : v2;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p2 in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p2))
            d2[p2] = b2[p2];
      };
      __extends2 = function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
      __assign2 = Object.assign || function(t2) {
        for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2))
              t2[p2] = s2[p2];
        }
        return t2;
      };
      __rest2 = function(s2, e2) {
        var t2 = {};
        for (var p2 in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
            t2[p2] = s2[p2];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
            if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
              t2[p2[i2]] = s2[p2[i2]];
          }
        return t2;
      };
      __decorate2 = function(decorators, target, key, desc) {
        var c2 = arguments.length, r2 = c2 < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d2;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r2 = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i2 = decorators.length - 1; i2 >= 0; i2--)
            if (d2 = decorators[i2])
              r2 = (c2 < 3 ? d2(r2) : c2 > 3 ? d2(target, key, r2) : d2(target, key)) || r2;
        return c2 > 3 && r2 && Object.defineProperty(target, key, r2), r2;
      };
      __param2 = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata2 = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P2, generator) {
        function adopt(value) {
          return value instanceof P2 ? value : new P2(function(resolve) {
            resolve(value);
          });
        }
        return new (P2 || (P2 = Promise))(function(resolve, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e2) {
              reject(e2);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e2) {
              reject(e2);
            }
          }
          function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _2 = { label: 0, sent: function() {
          if (t2[0] & 1)
            throw t2[1];
          return t2[1];
        }, trys: [], ops: [] }, f2, y2, t2, g2;
        return g2 = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g2[Symbol.iterator] = function() {
          return this;
        }), g2;
        function verb(n2) {
          return function(v2) {
            return step([n2, v2]);
          };
        }
        function step(op) {
          if (f2)
            throw new TypeError("Generator is already executing.");
          while (_2)
            try {
              if (f2 = 1, y2 && (t2 = op[0] & 2 ? y2["return"] : op[0] ? y2["throw"] || ((t2 = y2["return"]) && t2.call(y2), 0) : y2.next) && !(t2 = t2.call(y2, op[1])).done)
                return t2;
              if (y2 = 0, t2)
                op = [op[0] & 2, t2.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t2 = op;
                  break;
                case 4:
                  _2.label++;
                  return { value: op[1], done: false };
                case 5:
                  _2.label++;
                  y2 = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _2.ops.pop();
                  _2.trys.pop();
                  continue;
                default:
                  if (!(t2 = _2.trys, t2 = t2.length > 0 && t2[t2.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _2 = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t2 || op[1] > t2[0] && op[1] < t2[3])) {
                    _2.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _2.label < t2[1]) {
                    _2.label = t2[1];
                    t2 = op;
                    break;
                  }
                  if (t2 && _2.label < t2[2]) {
                    _2.label = t2[2];
                    _2.ops.push(op);
                    break;
                  }
                  if (t2[2])
                    _2.ops.pop();
                  _2.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _2);
            } catch (e2) {
              op = [6, e2];
              y2 = 0;
            } finally {
              f2 = t2 = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar2 = function(m2, o2) {
        for (var p2 in m2)
          if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(o2, p2))
            __createBinding2(o2, m2, p2);
      };
      __createBinding2 = Object.create ? function(o2, m2, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        Object.defineProperty(o2, k22, { enumerable: true, get: function() {
          return m2[k2];
        } });
      } : function(o2, m2, k2, k22) {
        if (k22 === void 0)
          k22 = k2;
        o2[k22] = m2[k2];
      };
      __values2 = function(o2) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m2 = s2 && o2[s2], i2 = 0;
        if (m2)
          return m2.call(o2);
        if (o2 && typeof o2.length === "number")
          return {
            next: function() {
              if (o2 && i2 >= o2.length)
                o2 = void 0;
              return { value: o2 && o2[i2++], done: !o2 };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o2, n2) {
        var m2 = typeof Symbol === "function" && o2[Symbol.iterator];
        if (!m2)
          return o2;
        var i2 = m2.call(o2), r2, ar = [], e2;
        try {
          while ((n2 === void 0 || n2-- > 0) && !(r2 = i2.next()).done)
            ar.push(r2.value);
        } catch (error) {
          e2 = { error };
        } finally {
          try {
            if (r2 && !r2.done && (m2 = i2["return"]))
              m2.call(i2);
          } finally {
            if (e2)
              throw e2.error;
          }
        }
        return ar;
      };
      __spread2 = function() {
        for (var ar = [], i2 = 0; i2 < arguments.length; i2++)
          ar = ar.concat(__read2(arguments[i2]));
        return ar;
      };
      __spreadArrays2 = function() {
        for (var s2 = 0, i2 = 0, il = arguments.length; i2 < il; i2++)
          s2 += arguments[i2].length;
        for (var r2 = Array(s2), k2 = 0, i2 = 0; i2 < il; i2++)
          for (var a2 = arguments[i2], j2 = 0, jl = a2.length; j2 < jl; j2++, k2++)
            r2[k2] = a2[j2];
        return r2;
      };
      __spreadArray2 = function(to, from, pack) {
        if (pack || arguments.length === 2)
          for (var i2 = 0, l2 = from.length, ar; i2 < l2; i2++) {
            if (ar || !(i2 in from)) {
              if (!ar)
                ar = Array.prototype.slice.call(from, 0, i2);
              ar[i2] = from[i2];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from));
      };
      __await2 = function(v2) {
        return this instanceof __await2 ? (this.v = v2, this) : new __await2(v2);
      };
      __asyncGenerator2 = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g2 = generator.apply(thisArg, _arguments || []), i2, q2 = [];
        return i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2;
        function verb(n2) {
          if (g2[n2])
            i2[n2] = function(v2) {
              return new Promise(function(a2, b2) {
                q2.push([n2, v2, a2, b2]) > 1 || resume(n2, v2);
              });
            };
        }
        function resume(n2, v2) {
          try {
            step(g2[n2](v2));
          } catch (e2) {
            settle(q2[0][3], e2);
          }
        }
        function step(r2) {
          r2.value instanceof __await2 ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q2[0][2], r2);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f2, v2) {
          if (f2(v2), q2.shift(), q2.length)
            resume(q2[0][0], q2[0][1]);
        }
      };
      __asyncDelegator2 = function(o2) {
        var i2, p2;
        return i2 = {}, verb("next"), verb("throw", function(e2) {
          throw e2;
        }), verb("return"), i2[Symbol.iterator] = function() {
          return this;
        }, i2;
        function verb(n2, f2) {
          i2[n2] = o2[n2] ? function(v2) {
            return (p2 = !p2) ? { value: __await2(o2[n2](v2)), done: n2 === "return" } : f2 ? f2(v2) : v2;
          } : f2;
        }
      };
      __asyncValues2 = function(o2) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m2 = o2[Symbol.asyncIterator], i2;
        return m2 ? m2.call(o2) : (o2 = typeof __values2 === "function" ? __values2(o2) : o2[Symbol.iterator](), i2 = {}, verb("next"), verb("throw"), verb("return"), i2[Symbol.asyncIterator] = function() {
          return this;
        }, i2);
        function verb(n2) {
          i2[n2] = o2[n2] && function(v2) {
            return new Promise(function(resolve, reject) {
              v2 = o2[n2](v2), settle(resolve, reject, v2.done, v2.value);
            });
          };
        }
        function settle(resolve, reject, d2, v2) {
          Promise.resolve(v2).then(function(v3) {
            resolve({ value: v3, done: d2 });
          }, reject);
        }
      };
      __makeTemplateObject2 = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o2, v2) {
        Object.defineProperty(o2, "default", { enumerable: true, value: v2 });
      } : function(o2, v2) {
        o2["default"] = v2;
      };
      __importStar2 = function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k2 in mod)
            if (k2 !== "default" && Object.prototype.hasOwnProperty.call(mod, k2))
              __createBinding2(result, mod, k2);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      __importDefault2 = function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      __classPrivateFieldGet2 = function(receiver, state, kind, f2) {
        if (kind === "a" && !f2)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
      };
      __classPrivateFieldSet2 = function(receiver, state, value, kind, f2) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f2)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
      };
      exporter("__extends", __extends2);
      exporter("__assign", __assign2);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate2);
      exporter("__param", __param2);
      exporter("__metadata", __metadata2);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar2);
      exporter("__createBinding", __createBinding2);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread2);
      exporter("__spreadArrays", __spreadArrays2);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await2);
      exporter("__asyncGenerator", __asyncGenerator2);
      exporter("__asyncDelegator", __asyncDelegator2);
      exporter("__asyncValues", __asyncValues2);
      exporter("__makeTemplateObject", __makeTemplateObject2);
      exporter("__importStar", __importStar2);
      exporter("__importDefault", __importDefault2);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
    });
  }
});

// ../../ui/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "../../ui/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    init_react();
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// ../../ui/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "../../ui/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    init_react();
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// ../../ui/node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "../../ui/node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    init_react();
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// ../../ui/node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "../../ui/node_modules/prop-types/lib/has.js"(exports, module) {
    init_react();
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// ../../ui/node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "../../ui/node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    init_react();
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location2, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning((componentName || "React class") + ": type specification of " + location2 + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).");
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning("Failed " + location2 + " type: " + error.message + (stack != null ? stack : ""));
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// ../../ui/node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "../../ui/node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    init_react();
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement2, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location2, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types");
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
                printWarning("You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.");
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location2 + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location2, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location2, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."), { expectedType });
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location2, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!isValidElement2(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning("Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).");
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location2, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning("Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + ".");
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location2, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location2, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location2, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location2, propFullName, key, type) {
        return new PropTypeError((componentName || "React class") + ": " + location2 + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`.");
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location2, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location2, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError("Invalid " + location2 + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  "));
            }
            var error = checker(propValue, key, componentName, location2, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement2(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// ../../ui/node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "../../ui/node_modules/prop-types/index.js"(exports, module) {
    init_react();
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// ../../ui/node_modules/react-side-effect/lib/index.js
var require_lib = __commonJS({
  "../../ui/node_modules/react-side-effect/lib/index.js"(exports, module) {
    "use strict";
    init_react();
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React5 = require_react();
    var React__default = _interopDefault(React5);
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _inheritsLoose3(subClass, superClass) {
      subClass.prototype = Object.create(superClass.prototype);
      subClass.prototype.constructor = subClass;
      subClass.__proto__ = superClass;
    }
    var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
    function withSideEffect2(reducePropsToState3, handleStateChangeOnClient, mapStateOnServer3) {
      if (typeof reducePropsToState3 !== "function") {
        throw new Error("Expected reducePropsToState to be a function.");
      }
      if (typeof handleStateChangeOnClient !== "function") {
        throw new Error("Expected handleStateChangeOnClient to be a function.");
      }
      if (typeof mapStateOnServer3 !== "undefined" && typeof mapStateOnServer3 !== "function") {
        throw new Error("Expected mapStateOnServer to either be undefined or a function.");
      }
      function getDisplayName(WrappedComponent) {
        return WrappedComponent.displayName || WrappedComponent.name || "Component";
      }
      return function wrap(WrappedComponent) {
        if (typeof WrappedComponent !== "function") {
          throw new Error("Expected WrappedComponent to be a React component.");
        }
        var mountedInstances = [];
        var state;
        function emitChange() {
          state = reducePropsToState3(mountedInstances.map(function(instance) {
            return instance.props;
          }));
          if (SideEffect.canUseDOM) {
            handleStateChangeOnClient(state);
          } else if (mapStateOnServer3) {
            state = mapStateOnServer3(state);
          }
        }
        var SideEffect = /* @__PURE__ */ function(_PureComponent) {
          _inheritsLoose3(SideEffect2, _PureComponent);
          function SideEffect2() {
            return _PureComponent.apply(this, arguments) || this;
          }
          SideEffect2.peek = function peek() {
            return state;
          };
          SideEffect2.rewind = function rewind() {
            if (SideEffect2.canUseDOM) {
              throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");
            }
            var recordedState = state;
            state = void 0;
            mountedInstances = [];
            return recordedState;
          };
          var _proto = SideEffect2.prototype;
          _proto.UNSAFE_componentWillMount = function UNSAFE_componentWillMount() {
            mountedInstances.push(this);
            emitChange();
          };
          _proto.componentDidUpdate = function componentDidUpdate() {
            emitChange();
          };
          _proto.componentWillUnmount = function componentWillUnmount() {
            var index = mountedInstances.indexOf(this);
            mountedInstances.splice(index, 1);
            emitChange();
          };
          _proto.render = function render3() {
            return /* @__PURE__ */ React__default.createElement(WrappedComponent, this.props);
          };
          return SideEffect2;
        }(React5.PureComponent);
        _defineProperty(SideEffect, "displayName", "SideEffect(" + getDisplayName(WrappedComponent) + ")");
        _defineProperty(SideEffect, "canUseDOM", canUseDOM);
        return SideEffect;
      };
    }
    module.exports = withSideEffect2;
  }
});

// ../../ui/node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "../../ui/node_modules/react-fast-compare/index.js"(exports, module) {
    init_react();
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a2, b2) {
      if (a2 === b2)
        return true;
      if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
        if (a2.constructor !== b2.constructor)
          return false;
        var length, i2, keys;
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length != b2.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal(a2[i2], b2[i2]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a2 instanceof Map && b2 instanceof Map) {
          if (a2.size !== b2.size)
            return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!b2.has(i2.value[0]))
              return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!equal(i2.value[1], b2.get(i2.value[0])))
              return false;
          return true;
        }
        if (hasSet && a2 instanceof Set && b2 instanceof Set) {
          if (a2.size !== b2.size)
            return false;
          it = a2.entries();
          while (!(i2 = it.next()).done)
            if (!b2.has(i2.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a2) && ArrayBuffer.isView(b2)) {
          length = a2.length;
          if (length != b2.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (a2[i2] !== b2[i2])
              return false;
          return true;
        }
        if (a2.constructor === RegExp)
          return a2.source === b2.source && a2.flags === b2.flags;
        if (a2.valueOf !== Object.prototype.valueOf)
          return a2.valueOf() === b2.valueOf();
        if (a2.toString !== Object.prototype.toString)
          return a2.toString() === b2.toString();
        keys = Object.keys(a2);
        length = keys.length;
        if (length !== Object.keys(b2).length)
          return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b2, keys[i2]))
            return false;
        if (hasElementType && a2 instanceof Element)
          return false;
        for (i2 = length; i2-- !== 0; ) {
          if ((keys[i2] === "_owner" || keys[i2] === "__v" || keys[i2] === "__o") && a2.$$typeof) {
            continue;
          }
          if (!equal(a2[keys[i2]], b2[keys[i2]]))
            return false;
        }
        return true;
      }
      return a2 !== a2 && b2 !== b2;
    }
    module.exports = function isEqual2(a2, b2) {
      try {
        return equal(a2, b2);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// ../../ui/node_modules/chroma-js/chroma.js
var require_chroma = __commonJS({
  "../../ui/node_modules/chroma-js/chroma.js"(exports, module) {
    init_react();
    (function(global2, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2.chroma = factory());
    })(exports, function() {
      "use strict";
      var limit$2 = function(x2, min2, max2) {
        if (min2 === void 0)
          min2 = 0;
        if (max2 === void 0)
          max2 = 1;
        return x2 < min2 ? min2 : x2 > max2 ? max2 : x2;
      };
      var limit$1 = limit$2;
      var clip_rgb$3 = function(rgb2) {
        rgb2._clipped = false;
        rgb2._unclipped = rgb2.slice(0);
        for (var i3 = 0; i3 <= 3; i3++) {
          if (i3 < 3) {
            if (rgb2[i3] < 0 || rgb2[i3] > 255) {
              rgb2._clipped = true;
            }
            rgb2[i3] = limit$1(rgb2[i3], 0, 255);
          } else if (i3 === 3) {
            rgb2[i3] = limit$1(rgb2[i3], 0, 1);
          }
        }
        return rgb2;
      };
      var classToType = {};
      for (var i$1 = 0, list$1 = ["Boolean", "Number", "String", "Function", "Array", "Date", "RegExp", "Undefined", "Null"]; i$1 < list$1.length; i$1 += 1) {
        var name = list$1[i$1];
        classToType["[object " + name + "]"] = name.toLowerCase();
      }
      var type$p = function(obj) {
        return classToType[Object.prototype.toString.call(obj)] || "object";
      };
      var type$o = type$p;
      var unpack$B = function(args, keyOrder) {
        if (keyOrder === void 0)
          keyOrder = null;
        if (args.length >= 3) {
          return Array.prototype.slice.call(args);
        }
        if (type$o(args[0]) == "object" && keyOrder) {
          return keyOrder.split("").filter(function(k2) {
            return args[0][k2] !== void 0;
          }).map(function(k2) {
            return args[0][k2];
          });
        }
        return args[0];
      };
      var type$n = type$p;
      var last$4 = function(args) {
        if (args.length < 2) {
          return null;
        }
        var l2 = args.length - 1;
        if (type$n(args[l2]) == "string") {
          return args[l2].toLowerCase();
        }
        return null;
      };
      var PI$2 = Math.PI;
      var utils = {
        clip_rgb: clip_rgb$3,
        limit: limit$2,
        type: type$p,
        unpack: unpack$B,
        last: last$4,
        PI: PI$2,
        TWOPI: PI$2 * 2,
        PITHIRD: PI$2 / 3,
        DEG2RAD: PI$2 / 180,
        RAD2DEG: 180 / PI$2
      };
      var input$h = {
        format: {},
        autodetect: []
      };
      var last$3 = utils.last;
      var clip_rgb$2 = utils.clip_rgb;
      var type$m = utils.type;
      var _input = input$h;
      var Color$D = function Color2() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var me = this;
        if (type$m(args[0]) === "object" && args[0].constructor && args[0].constructor === this.constructor) {
          return args[0];
        }
        var mode = last$3(args);
        var autodetect = false;
        if (!mode) {
          autodetect = true;
          if (!_input.sorted) {
            _input.autodetect = _input.autodetect.sort(function(a2, b2) {
              return b2.p - a2.p;
            });
            _input.sorted = true;
          }
          for (var i3 = 0, list2 = _input.autodetect; i3 < list2.length; i3 += 1) {
            var chk = list2[i3];
            mode = chk.test.apply(chk, args);
            if (mode) {
              break;
            }
          }
        }
        if (_input.format[mode]) {
          var rgb2 = _input.format[mode].apply(null, autodetect ? args : args.slice(0, -1));
          me._rgb = clip_rgb$2(rgb2);
        } else {
          throw new Error("unknown format: " + args);
        }
        if (me._rgb.length === 3) {
          me._rgb.push(1);
        }
      };
      Color$D.prototype.toString = function toString() {
        if (type$m(this.hex) == "function") {
          return this.hex();
        }
        return "[" + this._rgb.join(",") + "]";
      };
      var Color_1 = Color$D;
      var chroma$k = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(chroma$k.Color, [null].concat(args)))();
      };
      chroma$k.Color = Color_1;
      chroma$k.version = "2.4.2";
      var chroma_1 = chroma$k;
      var unpack$A = utils.unpack;
      var max$2 = Math.max;
      var rgb2cmyk$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$A(args, "rgb");
        var r2 = ref[0];
        var g2 = ref[1];
        var b2 = ref[2];
        r2 = r2 / 255;
        g2 = g2 / 255;
        b2 = b2 / 255;
        var k2 = 1 - max$2(r2, max$2(g2, b2));
        var f2 = k2 < 1 ? 1 / (1 - k2) : 0;
        var c2 = (1 - r2 - k2) * f2;
        var m2 = (1 - g2 - k2) * f2;
        var y2 = (1 - b2 - k2) * f2;
        return [c2, m2, y2, k2];
      };
      var rgb2cmyk_1 = rgb2cmyk$1;
      var unpack$z = utils.unpack;
      var cmyk2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$z(args, "cmyk");
        var c2 = args[0];
        var m2 = args[1];
        var y2 = args[2];
        var k2 = args[3];
        var alpha = args.length > 4 ? args[4] : 1;
        if (k2 === 1) {
          return [0, 0, 0, alpha];
        }
        return [
          c2 >= 1 ? 0 : 255 * (1 - c2) * (1 - k2),
          m2 >= 1 ? 0 : 255 * (1 - m2) * (1 - k2),
          y2 >= 1 ? 0 : 255 * (1 - y2) * (1 - k2),
          alpha
        ];
      };
      var cmyk2rgb_1 = cmyk2rgb;
      var chroma$j = chroma_1;
      var Color$C = Color_1;
      var input$g = input$h;
      var unpack$y = utils.unpack;
      var type$l = utils.type;
      var rgb2cmyk = rgb2cmyk_1;
      Color$C.prototype.cmyk = function() {
        return rgb2cmyk(this._rgb);
      };
      chroma$j.cmyk = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$C, [null].concat(args, ["cmyk"])))();
      };
      input$g.format.cmyk = cmyk2rgb_1;
      input$g.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$y(args, "cmyk");
          if (type$l(args) === "array" && args.length === 4) {
            return "cmyk";
          }
        }
      });
      var unpack$x = utils.unpack;
      var last$2 = utils.last;
      var rnd = function(a2) {
        return Math.round(a2 * 100) / 100;
      };
      var hsl2css$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var hsla = unpack$x(args, "hsla");
        var mode = last$2(args) || "lsa";
        hsla[0] = rnd(hsla[0] || 0);
        hsla[1] = rnd(hsla[1] * 100) + "%";
        hsla[2] = rnd(hsla[2] * 100) + "%";
        if (mode === "hsla" || hsla.length > 3 && hsla[3] < 1) {
          hsla[3] = hsla.length > 3 ? hsla[3] : 1;
          mode = "hsla";
        } else {
          hsla.length = 3;
        }
        return mode + "(" + hsla.join(",") + ")";
      };
      var hsl2css_1 = hsl2css$1;
      var unpack$w = utils.unpack;
      var rgb2hsl$3 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$w(args, "rgba");
        var r2 = args[0];
        var g2 = args[1];
        var b2 = args[2];
        r2 /= 255;
        g2 /= 255;
        b2 /= 255;
        var min2 = Math.min(r2, g2, b2);
        var max2 = Math.max(r2, g2, b2);
        var l2 = (max2 + min2) / 2;
        var s2, h2;
        if (max2 === min2) {
          s2 = 0;
          h2 = Number.NaN;
        } else {
          s2 = l2 < 0.5 ? (max2 - min2) / (max2 + min2) : (max2 - min2) / (2 - max2 - min2);
        }
        if (r2 == max2) {
          h2 = (g2 - b2) / (max2 - min2);
        } else if (g2 == max2) {
          h2 = 2 + (b2 - r2) / (max2 - min2);
        } else if (b2 == max2) {
          h2 = 4 + (r2 - g2) / (max2 - min2);
        }
        h2 *= 60;
        if (h2 < 0) {
          h2 += 360;
        }
        if (args.length > 3 && args[3] !== void 0) {
          return [h2, s2, l2, args[3]];
        }
        return [h2, s2, l2];
      };
      var rgb2hsl_1 = rgb2hsl$3;
      var unpack$v = utils.unpack;
      var last$1 = utils.last;
      var hsl2css = hsl2css_1;
      var rgb2hsl$2 = rgb2hsl_1;
      var round$6 = Math.round;
      var rgb2css$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgba = unpack$v(args, "rgba");
        var mode = last$1(args) || "rgb";
        if (mode.substr(0, 3) == "hsl") {
          return hsl2css(rgb2hsl$2(rgba), mode);
        }
        rgba[0] = round$6(rgba[0]);
        rgba[1] = round$6(rgba[1]);
        rgba[2] = round$6(rgba[2]);
        if (mode === "rgba" || rgba.length > 3 && rgba[3] < 1) {
          rgba[3] = rgba.length > 3 ? rgba[3] : 1;
          mode = "rgba";
        }
        return mode + "(" + rgba.slice(0, mode === "rgb" ? 3 : 4).join(",") + ")";
      };
      var rgb2css_1 = rgb2css$1;
      var unpack$u = utils.unpack;
      var round$5 = Math.round;
      var hsl2rgb$1 = function() {
        var assign;
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$u(args, "hsl");
        var h2 = args[0];
        var s2 = args[1];
        var l2 = args[2];
        var r2, g2, b2;
        if (s2 === 0) {
          r2 = g2 = b2 = l2 * 255;
        } else {
          var t3 = [0, 0, 0];
          var c2 = [0, 0, 0];
          var t2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
          var t1 = 2 * l2 - t2;
          var h_ = h2 / 360;
          t3[0] = h_ + 1 / 3;
          t3[1] = h_;
          t3[2] = h_ - 1 / 3;
          for (var i3 = 0; i3 < 3; i3++) {
            if (t3[i3] < 0) {
              t3[i3] += 1;
            }
            if (t3[i3] > 1) {
              t3[i3] -= 1;
            }
            if (6 * t3[i3] < 1) {
              c2[i3] = t1 + (t2 - t1) * 6 * t3[i3];
            } else if (2 * t3[i3] < 1) {
              c2[i3] = t2;
            } else if (3 * t3[i3] < 2) {
              c2[i3] = t1 + (t2 - t1) * (2 / 3 - t3[i3]) * 6;
            } else {
              c2[i3] = t1;
            }
          }
          assign = [round$5(c2[0] * 255), round$5(c2[1] * 255), round$5(c2[2] * 255)], r2 = assign[0], g2 = assign[1], b2 = assign[2];
        }
        if (args.length > 3) {
          return [r2, g2, b2, args[3]];
        }
        return [r2, g2, b2, 1];
      };
      var hsl2rgb_1 = hsl2rgb$1;
      var hsl2rgb = hsl2rgb_1;
      var input$f = input$h;
      var RE_RGB = /^rgb\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*\)$/;
      var RE_RGBA = /^rgba\(\s*(-?\d+),\s*(-?\d+)\s*,\s*(-?\d+)\s*,\s*([01]|[01]?\.\d+)\)$/;
      var RE_RGB_PCT = /^rgb\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
      var RE_RGBA_PCT = /^rgba\(\s*(-?\d+(?:\.\d+)?)%,\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
      var RE_HSL = /^hsl\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*\)$/;
      var RE_HSLA = /^hsla\(\s*(-?\d+(?:\.\d+)?),\s*(-?\d+(?:\.\d+)?)%\s*,\s*(-?\d+(?:\.\d+)?)%\s*,\s*([01]|[01]?\.\d+)\)$/;
      var round$4 = Math.round;
      var css2rgb$1 = function(css2) {
        css2 = css2.toLowerCase().trim();
        var m2;
        if (input$f.format.named) {
          try {
            return input$f.format.named(css2);
          } catch (e2) {
          }
        }
        if (m2 = css2.match(RE_RGB)) {
          var rgb2 = m2.slice(1, 4);
          for (var i3 = 0; i3 < 3; i3++) {
            rgb2[i3] = +rgb2[i3];
          }
          rgb2[3] = 1;
          return rgb2;
        }
        if (m2 = css2.match(RE_RGBA)) {
          var rgb$1 = m2.slice(1, 5);
          for (var i$12 = 0; i$12 < 4; i$12++) {
            rgb$1[i$12] = +rgb$1[i$12];
          }
          return rgb$1;
        }
        if (m2 = css2.match(RE_RGB_PCT)) {
          var rgb$2 = m2.slice(1, 4);
          for (var i$2 = 0; i$2 < 3; i$2++) {
            rgb$2[i$2] = round$4(rgb$2[i$2] * 2.55);
          }
          rgb$2[3] = 1;
          return rgb$2;
        }
        if (m2 = css2.match(RE_RGBA_PCT)) {
          var rgb$3 = m2.slice(1, 5);
          for (var i$3 = 0; i$3 < 3; i$3++) {
            rgb$3[i$3] = round$4(rgb$3[i$3] * 2.55);
          }
          rgb$3[3] = +rgb$3[3];
          return rgb$3;
        }
        if (m2 = css2.match(RE_HSL)) {
          var hsl2 = m2.slice(1, 4);
          hsl2[1] *= 0.01;
          hsl2[2] *= 0.01;
          var rgb$4 = hsl2rgb(hsl2);
          rgb$4[3] = 1;
          return rgb$4;
        }
        if (m2 = css2.match(RE_HSLA)) {
          var hsl$1 = m2.slice(1, 4);
          hsl$1[1] *= 0.01;
          hsl$1[2] *= 0.01;
          var rgb$5 = hsl2rgb(hsl$1);
          rgb$5[3] = +m2[4];
          return rgb$5;
        }
      };
      css2rgb$1.test = function(s2) {
        return RE_RGB.test(s2) || RE_RGBA.test(s2) || RE_RGB_PCT.test(s2) || RE_RGBA_PCT.test(s2) || RE_HSL.test(s2) || RE_HSLA.test(s2);
      };
      var css2rgb_1 = css2rgb$1;
      var chroma$i = chroma_1;
      var Color$B = Color_1;
      var input$e = input$h;
      var type$k = utils.type;
      var rgb2css = rgb2css_1;
      var css2rgb = css2rgb_1;
      Color$B.prototype.css = function(mode) {
        return rgb2css(this._rgb, mode);
      };
      chroma$i.css = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$B, [null].concat(args, ["css"])))();
      };
      input$e.format.css = css2rgb;
      input$e.autodetect.push({
        p: 5,
        test: function(h2) {
          var rest = [], len = arguments.length - 1;
          while (len-- > 0)
            rest[len] = arguments[len + 1];
          if (!rest.length && type$k(h2) === "string" && css2rgb.test(h2)) {
            return "css";
          }
        }
      });
      var Color$A = Color_1;
      var chroma$h = chroma_1;
      var input$d = input$h;
      var unpack$t = utils.unpack;
      input$d.format.gl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgb2 = unpack$t(args, "rgba");
        rgb2[0] *= 255;
        rgb2[1] *= 255;
        rgb2[2] *= 255;
        return rgb2;
      };
      chroma$h.gl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$A, [null].concat(args, ["gl"])))();
      };
      Color$A.prototype.gl = function() {
        var rgb2 = this._rgb;
        return [rgb2[0] / 255, rgb2[1] / 255, rgb2[2] / 255, rgb2[3]];
      };
      var unpack$s = utils.unpack;
      var rgb2hcg$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$s(args, "rgb");
        var r2 = ref[0];
        var g2 = ref[1];
        var b2 = ref[2];
        var min2 = Math.min(r2, g2, b2);
        var max2 = Math.max(r2, g2, b2);
        var delta = max2 - min2;
        var c2 = delta * 100 / 255;
        var _g = min2 / (255 - delta) * 100;
        var h2;
        if (delta === 0) {
          h2 = Number.NaN;
        } else {
          if (r2 === max2) {
            h2 = (g2 - b2) / delta;
          }
          if (g2 === max2) {
            h2 = 2 + (b2 - r2) / delta;
          }
          if (b2 === max2) {
            h2 = 4 + (r2 - g2) / delta;
          }
          h2 *= 60;
          if (h2 < 0) {
            h2 += 360;
          }
        }
        return [h2, c2, _g];
      };
      var rgb2hcg_1 = rgb2hcg$1;
      var unpack$r = utils.unpack;
      var floor$3 = Math.floor;
      var hcg2rgb = function() {
        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$r(args, "hcg");
        var h2 = args[0];
        var c2 = args[1];
        var _g = args[2];
        var r2, g2, b2;
        _g = _g * 255;
        var _c = c2 * 255;
        if (c2 === 0) {
          r2 = g2 = b2 = _g;
        } else {
          if (h2 === 360) {
            h2 = 0;
          }
          if (h2 > 360) {
            h2 -= 360;
          }
          if (h2 < 0) {
            h2 += 360;
          }
          h2 /= 60;
          var i3 = floor$3(h2);
          var f2 = h2 - i3;
          var p2 = _g * (1 - c2);
          var q2 = p2 + _c * (1 - f2);
          var t2 = p2 + _c * f2;
          var v2 = p2 + _c;
          switch (i3) {
            case 0:
              assign = [v2, t2, p2], r2 = assign[0], g2 = assign[1], b2 = assign[2];
              break;
            case 1:
              assign$1 = [q2, v2, p2], r2 = assign$1[0], g2 = assign$1[1], b2 = assign$1[2];
              break;
            case 2:
              assign$2 = [p2, v2, t2], r2 = assign$2[0], g2 = assign$2[1], b2 = assign$2[2];
              break;
            case 3:
              assign$3 = [p2, q2, v2], r2 = assign$3[0], g2 = assign$3[1], b2 = assign$3[2];
              break;
            case 4:
              assign$4 = [t2, p2, v2], r2 = assign$4[0], g2 = assign$4[1], b2 = assign$4[2];
              break;
            case 5:
              assign$5 = [v2, p2, q2], r2 = assign$5[0], g2 = assign$5[1], b2 = assign$5[2];
              break;
          }
        }
        return [r2, g2, b2, args.length > 3 ? args[3] : 1];
      };
      var hcg2rgb_1 = hcg2rgb;
      var unpack$q = utils.unpack;
      var type$j = utils.type;
      var chroma$g = chroma_1;
      var Color$z = Color_1;
      var input$c = input$h;
      var rgb2hcg = rgb2hcg_1;
      Color$z.prototype.hcg = function() {
        return rgb2hcg(this._rgb);
      };
      chroma$g.hcg = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$z, [null].concat(args, ["hcg"])))();
      };
      input$c.format.hcg = hcg2rgb_1;
      input$c.autodetect.push({
        p: 1,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$q(args, "hcg");
          if (type$j(args) === "array" && args.length === 3) {
            return "hcg";
          }
        }
      });
      var unpack$p = utils.unpack;
      var last = utils.last;
      var round$3 = Math.round;
      var rgb2hex$2 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$p(args, "rgba");
        var r2 = ref[0];
        var g2 = ref[1];
        var b2 = ref[2];
        var a2 = ref[3];
        var mode = last(args) || "auto";
        if (a2 === void 0) {
          a2 = 1;
        }
        if (mode === "auto") {
          mode = a2 < 1 ? "rgba" : "rgb";
        }
        r2 = round$3(r2);
        g2 = round$3(g2);
        b2 = round$3(b2);
        var u2 = r2 << 16 | g2 << 8 | b2;
        var str = "000000" + u2.toString(16);
        str = str.substr(str.length - 6);
        var hxa = "0" + round$3(a2 * 255).toString(16);
        hxa = hxa.substr(hxa.length - 2);
        switch (mode.toLowerCase()) {
          case "rgba":
            return "#" + str + hxa;
          case "argb":
            return "#" + hxa + str;
          default:
            return "#" + str;
        }
      };
      var rgb2hex_1 = rgb2hex$2;
      var RE_HEX = /^#?([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
      var RE_HEXA = /^#?([A-Fa-f0-9]{8}|[A-Fa-f0-9]{4})$/;
      var hex2rgb$1 = function(hex) {
        if (hex.match(RE_HEX)) {
          if (hex.length === 4 || hex.length === 7) {
            hex = hex.substr(1);
          }
          if (hex.length === 3) {
            hex = hex.split("");
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
          }
          var u2 = parseInt(hex, 16);
          var r2 = u2 >> 16;
          var g2 = u2 >> 8 & 255;
          var b2 = u2 & 255;
          return [r2, g2, b2, 1];
        }
        if (hex.match(RE_HEXA)) {
          if (hex.length === 5 || hex.length === 9) {
            hex = hex.substr(1);
          }
          if (hex.length === 4) {
            hex = hex.split("");
            hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3];
          }
          var u$1 = parseInt(hex, 16);
          var r$1 = u$1 >> 24 & 255;
          var g$1 = u$1 >> 16 & 255;
          var b$1 = u$1 >> 8 & 255;
          var a2 = Math.round((u$1 & 255) / 255 * 100) / 100;
          return [r$1, g$1, b$1, a2];
        }
        throw new Error("unknown hex color: " + hex);
      };
      var hex2rgb_1 = hex2rgb$1;
      var chroma$f = chroma_1;
      var Color$y = Color_1;
      var type$i = utils.type;
      var input$b = input$h;
      var rgb2hex$1 = rgb2hex_1;
      Color$y.prototype.hex = function(mode) {
        return rgb2hex$1(this._rgb, mode);
      };
      chroma$f.hex = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$y, [null].concat(args, ["hex"])))();
      };
      input$b.format.hex = hex2rgb_1;
      input$b.autodetect.push({
        p: 4,
        test: function(h2) {
          var rest = [], len = arguments.length - 1;
          while (len-- > 0)
            rest[len] = arguments[len + 1];
          if (!rest.length && type$i(h2) === "string" && [3, 4, 5, 6, 7, 8, 9].indexOf(h2.length) >= 0) {
            return "hex";
          }
        }
      });
      var unpack$o = utils.unpack;
      var TWOPI$2 = utils.TWOPI;
      var min$2 = Math.min;
      var sqrt$4 = Math.sqrt;
      var acos = Math.acos;
      var rgb2hsi$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$o(args, "rgb");
        var r2 = ref[0];
        var g2 = ref[1];
        var b2 = ref[2];
        r2 /= 255;
        g2 /= 255;
        b2 /= 255;
        var h2;
        var min_ = min$2(r2, g2, b2);
        var i3 = (r2 + g2 + b2) / 3;
        var s2 = i3 > 0 ? 1 - min_ / i3 : 0;
        if (s2 === 0) {
          h2 = NaN;
        } else {
          h2 = (r2 - g2 + (r2 - b2)) / 2;
          h2 /= sqrt$4((r2 - g2) * (r2 - g2) + (r2 - b2) * (g2 - b2));
          h2 = acos(h2);
          if (b2 > g2) {
            h2 = TWOPI$2 - h2;
          }
          h2 /= TWOPI$2;
        }
        return [h2 * 360, s2, i3];
      };
      var rgb2hsi_1 = rgb2hsi$1;
      var unpack$n = utils.unpack;
      var limit2 = utils.limit;
      var TWOPI$1 = utils.TWOPI;
      var PITHIRD = utils.PITHIRD;
      var cos$4 = Math.cos;
      var hsi2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$n(args, "hsi");
        var h2 = args[0];
        var s2 = args[1];
        var i3 = args[2];
        var r2, g2, b2;
        if (isNaN(h2)) {
          h2 = 0;
        }
        if (isNaN(s2)) {
          s2 = 0;
        }
        if (h2 > 360) {
          h2 -= 360;
        }
        if (h2 < 0) {
          h2 += 360;
        }
        h2 /= 360;
        if (h2 < 1 / 3) {
          b2 = (1 - s2) / 3;
          r2 = (1 + s2 * cos$4(TWOPI$1 * h2) / cos$4(PITHIRD - TWOPI$1 * h2)) / 3;
          g2 = 1 - (b2 + r2);
        } else if (h2 < 2 / 3) {
          h2 -= 1 / 3;
          r2 = (1 - s2) / 3;
          g2 = (1 + s2 * cos$4(TWOPI$1 * h2) / cos$4(PITHIRD - TWOPI$1 * h2)) / 3;
          b2 = 1 - (r2 + g2);
        } else {
          h2 -= 2 / 3;
          g2 = (1 - s2) / 3;
          b2 = (1 + s2 * cos$4(TWOPI$1 * h2) / cos$4(PITHIRD - TWOPI$1 * h2)) / 3;
          r2 = 1 - (g2 + b2);
        }
        r2 = limit2(i3 * r2 * 3);
        g2 = limit2(i3 * g2 * 3);
        b2 = limit2(i3 * b2 * 3);
        return [r2 * 255, g2 * 255, b2 * 255, args.length > 3 ? args[3] : 1];
      };
      var hsi2rgb_1 = hsi2rgb;
      var unpack$m = utils.unpack;
      var type$h = utils.type;
      var chroma$e = chroma_1;
      var Color$x = Color_1;
      var input$a = input$h;
      var rgb2hsi = rgb2hsi_1;
      Color$x.prototype.hsi = function() {
        return rgb2hsi(this._rgb);
      };
      chroma$e.hsi = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$x, [null].concat(args, ["hsi"])))();
      };
      input$a.format.hsi = hsi2rgb_1;
      input$a.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$m(args, "hsi");
          if (type$h(args) === "array" && args.length === 3) {
            return "hsi";
          }
        }
      });
      var unpack$l = utils.unpack;
      var type$g = utils.type;
      var chroma$d = chroma_1;
      var Color$w = Color_1;
      var input$9 = input$h;
      var rgb2hsl$1 = rgb2hsl_1;
      Color$w.prototype.hsl = function() {
        return rgb2hsl$1(this._rgb);
      };
      chroma$d.hsl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$w, [null].concat(args, ["hsl"])))();
      };
      input$9.format.hsl = hsl2rgb_1;
      input$9.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$l(args, "hsl");
          if (type$g(args) === "array" && args.length === 3) {
            return "hsl";
          }
        }
      });
      var unpack$k = utils.unpack;
      var min$1 = Math.min;
      var max$1 = Math.max;
      var rgb2hsl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$k(args, "rgb");
        var r2 = args[0];
        var g2 = args[1];
        var b2 = args[2];
        var min_ = min$1(r2, g2, b2);
        var max_ = max$1(r2, g2, b2);
        var delta = max_ - min_;
        var h2, s2, v2;
        v2 = max_ / 255;
        if (max_ === 0) {
          h2 = Number.NaN;
          s2 = 0;
        } else {
          s2 = delta / max_;
          if (r2 === max_) {
            h2 = (g2 - b2) / delta;
          }
          if (g2 === max_) {
            h2 = 2 + (b2 - r2) / delta;
          }
          if (b2 === max_) {
            h2 = 4 + (r2 - g2) / delta;
          }
          h2 *= 60;
          if (h2 < 0) {
            h2 += 360;
          }
        }
        return [h2, s2, v2];
      };
      var rgb2hsv$1 = rgb2hsl;
      var unpack$j = utils.unpack;
      var floor$2 = Math.floor;
      var hsv2rgb = function() {
        var assign, assign$1, assign$2, assign$3, assign$4, assign$5;
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$j(args, "hsv");
        var h2 = args[0];
        var s2 = args[1];
        var v2 = args[2];
        var r2, g2, b2;
        v2 *= 255;
        if (s2 === 0) {
          r2 = g2 = b2 = v2;
        } else {
          if (h2 === 360) {
            h2 = 0;
          }
          if (h2 > 360) {
            h2 -= 360;
          }
          if (h2 < 0) {
            h2 += 360;
          }
          h2 /= 60;
          var i3 = floor$2(h2);
          var f2 = h2 - i3;
          var p2 = v2 * (1 - s2);
          var q2 = v2 * (1 - s2 * f2);
          var t2 = v2 * (1 - s2 * (1 - f2));
          switch (i3) {
            case 0:
              assign = [v2, t2, p2], r2 = assign[0], g2 = assign[1], b2 = assign[2];
              break;
            case 1:
              assign$1 = [q2, v2, p2], r2 = assign$1[0], g2 = assign$1[1], b2 = assign$1[2];
              break;
            case 2:
              assign$2 = [p2, v2, t2], r2 = assign$2[0], g2 = assign$2[1], b2 = assign$2[2];
              break;
            case 3:
              assign$3 = [p2, q2, v2], r2 = assign$3[0], g2 = assign$3[1], b2 = assign$3[2];
              break;
            case 4:
              assign$4 = [t2, p2, v2], r2 = assign$4[0], g2 = assign$4[1], b2 = assign$4[2];
              break;
            case 5:
              assign$5 = [v2, p2, q2], r2 = assign$5[0], g2 = assign$5[1], b2 = assign$5[2];
              break;
          }
        }
        return [r2, g2, b2, args.length > 3 ? args[3] : 1];
      };
      var hsv2rgb_1 = hsv2rgb;
      var unpack$i = utils.unpack;
      var type$f = utils.type;
      var chroma$c = chroma_1;
      var Color$v = Color_1;
      var input$8 = input$h;
      var rgb2hsv = rgb2hsv$1;
      Color$v.prototype.hsv = function() {
        return rgb2hsv(this._rgb);
      };
      chroma$c.hsv = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$v, [null].concat(args, ["hsv"])))();
      };
      input$8.format.hsv = hsv2rgb_1;
      input$8.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$i(args, "hsv");
          if (type$f(args) === "array" && args.length === 3) {
            return "hsv";
          }
        }
      });
      var labConstants = {
        Kn: 18,
        Xn: 0.95047,
        Yn: 1,
        Zn: 1.08883,
        t0: 0.137931034,
        t1: 0.206896552,
        t2: 0.12841855,
        t3: 8856452e-9
      };
      var LAB_CONSTANTS$3 = labConstants;
      var unpack$h = utils.unpack;
      var pow$a = Math.pow;
      var rgb2lab$2 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$h(args, "rgb");
        var r2 = ref[0];
        var g2 = ref[1];
        var b2 = ref[2];
        var ref$1 = rgb2xyz(r2, g2, b2);
        var x2 = ref$1[0];
        var y2 = ref$1[1];
        var z2 = ref$1[2];
        var l2 = 116 * y2 - 16;
        return [l2 < 0 ? 0 : l2, 500 * (x2 - y2), 200 * (y2 - z2)];
      };
      var rgb_xyz = function(r2) {
        if ((r2 /= 255) <= 0.04045) {
          return r2 / 12.92;
        }
        return pow$a((r2 + 0.055) / 1.055, 2.4);
      };
      var xyz_lab = function(t2) {
        if (t2 > LAB_CONSTANTS$3.t3) {
          return pow$a(t2, 1 / 3);
        }
        return t2 / LAB_CONSTANTS$3.t2 + LAB_CONSTANTS$3.t0;
      };
      var rgb2xyz = function(r2, g2, b2) {
        r2 = rgb_xyz(r2);
        g2 = rgb_xyz(g2);
        b2 = rgb_xyz(b2);
        var x2 = xyz_lab((0.4124564 * r2 + 0.3575761 * g2 + 0.1804375 * b2) / LAB_CONSTANTS$3.Xn);
        var y2 = xyz_lab((0.2126729 * r2 + 0.7151522 * g2 + 0.072175 * b2) / LAB_CONSTANTS$3.Yn);
        var z2 = xyz_lab((0.0193339 * r2 + 0.119192 * g2 + 0.9503041 * b2) / LAB_CONSTANTS$3.Zn);
        return [x2, y2, z2];
      };
      var rgb2lab_1 = rgb2lab$2;
      var LAB_CONSTANTS$2 = labConstants;
      var unpack$g = utils.unpack;
      var pow$9 = Math.pow;
      var lab2rgb$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$g(args, "lab");
        var l2 = args[0];
        var a2 = args[1];
        var b2 = args[2];
        var x2, y2, z2, r2, g2, b_;
        y2 = (l2 + 16) / 116;
        x2 = isNaN(a2) ? y2 : y2 + a2 / 500;
        z2 = isNaN(b2) ? y2 : y2 - b2 / 200;
        y2 = LAB_CONSTANTS$2.Yn * lab_xyz(y2);
        x2 = LAB_CONSTANTS$2.Xn * lab_xyz(x2);
        z2 = LAB_CONSTANTS$2.Zn * lab_xyz(z2);
        r2 = xyz_rgb(3.2404542 * x2 - 1.5371385 * y2 - 0.4985314 * z2);
        g2 = xyz_rgb(-0.969266 * x2 + 1.8760108 * y2 + 0.041556 * z2);
        b_ = xyz_rgb(0.0556434 * x2 - 0.2040259 * y2 + 1.0572252 * z2);
        return [r2, g2, b_, args.length > 3 ? args[3] : 1];
      };
      var xyz_rgb = function(r2) {
        return 255 * (r2 <= 304e-5 ? 12.92 * r2 : 1.055 * pow$9(r2, 1 / 2.4) - 0.055);
      };
      var lab_xyz = function(t2) {
        return t2 > LAB_CONSTANTS$2.t1 ? t2 * t2 * t2 : LAB_CONSTANTS$2.t2 * (t2 - LAB_CONSTANTS$2.t0);
      };
      var lab2rgb_1 = lab2rgb$1;
      var unpack$f = utils.unpack;
      var type$e = utils.type;
      var chroma$b = chroma_1;
      var Color$u = Color_1;
      var input$7 = input$h;
      var rgb2lab$1 = rgb2lab_1;
      Color$u.prototype.lab = function() {
        return rgb2lab$1(this._rgb);
      };
      chroma$b.lab = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$u, [null].concat(args, ["lab"])))();
      };
      input$7.format.lab = lab2rgb_1;
      input$7.autodetect.push({
        p: 2,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$f(args, "lab");
          if (type$e(args) === "array" && args.length === 3) {
            return "lab";
          }
        }
      });
      var unpack$e = utils.unpack;
      var RAD2DEG = utils.RAD2DEG;
      var sqrt$3 = Math.sqrt;
      var atan2$2 = Math.atan2;
      var round$2 = Math.round;
      var lab2lch$2 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$e(args, "lab");
        var l2 = ref[0];
        var a2 = ref[1];
        var b2 = ref[2];
        var c2 = sqrt$3(a2 * a2 + b2 * b2);
        var h2 = (atan2$2(b2, a2) * RAD2DEG + 360) % 360;
        if (round$2(c2 * 1e4) === 0) {
          h2 = Number.NaN;
        }
        return [l2, c2, h2];
      };
      var lab2lch_1 = lab2lch$2;
      var unpack$d = utils.unpack;
      var rgb2lab = rgb2lab_1;
      var lab2lch$1 = lab2lch_1;
      var rgb2lch$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$d(args, "rgb");
        var r2 = ref[0];
        var g2 = ref[1];
        var b2 = ref[2];
        var ref$1 = rgb2lab(r2, g2, b2);
        var l2 = ref$1[0];
        var a2 = ref$1[1];
        var b_ = ref$1[2];
        return lab2lch$1(l2, a2, b_);
      };
      var rgb2lch_1 = rgb2lch$1;
      var unpack$c = utils.unpack;
      var DEG2RAD = utils.DEG2RAD;
      var sin$3 = Math.sin;
      var cos$3 = Math.cos;
      var lch2lab$2 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$c(args, "lch");
        var l2 = ref[0];
        var c2 = ref[1];
        var h2 = ref[2];
        if (isNaN(h2)) {
          h2 = 0;
        }
        h2 = h2 * DEG2RAD;
        return [l2, cos$3(h2) * c2, sin$3(h2) * c2];
      };
      var lch2lab_1 = lch2lab$2;
      var unpack$b = utils.unpack;
      var lch2lab$1 = lch2lab_1;
      var lab2rgb = lab2rgb_1;
      var lch2rgb$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$b(args, "lch");
        var l2 = args[0];
        var c2 = args[1];
        var h2 = args[2];
        var ref = lch2lab$1(l2, c2, h2);
        var L2 = ref[0];
        var a2 = ref[1];
        var b_ = ref[2];
        var ref$1 = lab2rgb(L2, a2, b_);
        var r2 = ref$1[0];
        var g2 = ref$1[1];
        var b2 = ref$1[2];
        return [r2, g2, b2, args.length > 3 ? args[3] : 1];
      };
      var lch2rgb_1 = lch2rgb$1;
      var unpack$a = utils.unpack;
      var lch2rgb = lch2rgb_1;
      var hcl2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var hcl = unpack$a(args, "hcl").reverse();
        return lch2rgb.apply(void 0, hcl);
      };
      var hcl2rgb_1 = hcl2rgb;
      var unpack$9 = utils.unpack;
      var type$d = utils.type;
      var chroma$a = chroma_1;
      var Color$t = Color_1;
      var input$6 = input$h;
      var rgb2lch = rgb2lch_1;
      Color$t.prototype.lch = function() {
        return rgb2lch(this._rgb);
      };
      Color$t.prototype.hcl = function() {
        return rgb2lch(this._rgb).reverse();
      };
      chroma$a.lch = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$t, [null].concat(args, ["lch"])))();
      };
      chroma$a.hcl = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$t, [null].concat(args, ["hcl"])))();
      };
      input$6.format.lch = lch2rgb_1;
      input$6.format.hcl = hcl2rgb_1;
      ["lch", "hcl"].forEach(function(m2) {
        return input$6.autodetect.push({
          p: 2,
          test: function() {
            var args = [], len = arguments.length;
            while (len--)
              args[len] = arguments[len];
            args = unpack$9(args, m2);
            if (type$d(args) === "array" && args.length === 3) {
              return m2;
            }
          }
        });
      });
      var w3cx11$1 = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedalmond: "#ffebcd",
        blue: "#0000ff",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflower: "#6495ed",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategray: "#2f4f4f",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        laserlemon: "#ffff54",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrod: "#fafad2",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#00ff00",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        maroon2: "#7f0000",
        maroon3: "#b03060",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        purple2: "#7f007f",
        purple3: "#a020f0",
        rebeccapurple: "#663399",
        red: "#ff0000",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whitesmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowgreen: "#9acd32"
      };
      var w3cx11_1 = w3cx11$1;
      var Color$s = Color_1;
      var input$5 = input$h;
      var type$c = utils.type;
      var w3cx11 = w3cx11_1;
      var hex2rgb = hex2rgb_1;
      var rgb2hex = rgb2hex_1;
      Color$s.prototype.name = function() {
        var hex = rgb2hex(this._rgb, "rgb");
        for (var i3 = 0, list2 = Object.keys(w3cx11); i3 < list2.length; i3 += 1) {
          var n2 = list2[i3];
          if (w3cx11[n2] === hex) {
            return n2.toLowerCase();
          }
        }
        return hex;
      };
      input$5.format.named = function(name2) {
        name2 = name2.toLowerCase();
        if (w3cx11[name2]) {
          return hex2rgb(w3cx11[name2]);
        }
        throw new Error("unknown color name: " + name2);
      };
      input$5.autodetect.push({
        p: 5,
        test: function(h2) {
          var rest = [], len = arguments.length - 1;
          while (len-- > 0)
            rest[len] = arguments[len + 1];
          if (!rest.length && type$c(h2) === "string" && w3cx11[h2.toLowerCase()]) {
            return "named";
          }
        }
      });
      var unpack$8 = utils.unpack;
      var rgb2num$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$8(args, "rgb");
        var r2 = ref[0];
        var g2 = ref[1];
        var b2 = ref[2];
        return (r2 << 16) + (g2 << 8) + b2;
      };
      var rgb2num_1 = rgb2num$1;
      var type$b = utils.type;
      var num2rgb = function(num2) {
        if (type$b(num2) == "number" && num2 >= 0 && num2 <= 16777215) {
          var r2 = num2 >> 16;
          var g2 = num2 >> 8 & 255;
          var b2 = num2 & 255;
          return [r2, g2, b2, 1];
        }
        throw new Error("unknown num color: " + num2);
      };
      var num2rgb_1 = num2rgb;
      var chroma$9 = chroma_1;
      var Color$r = Color_1;
      var input$4 = input$h;
      var type$a = utils.type;
      var rgb2num = rgb2num_1;
      Color$r.prototype.num = function() {
        return rgb2num(this._rgb);
      };
      chroma$9.num = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$r, [null].concat(args, ["num"])))();
      };
      input$4.format.num = num2rgb_1;
      input$4.autodetect.push({
        p: 5,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          if (args.length === 1 && type$a(args[0]) === "number" && args[0] >= 0 && args[0] <= 16777215) {
            return "num";
          }
        }
      });
      var chroma$8 = chroma_1;
      var Color$q = Color_1;
      var input$3 = input$h;
      var unpack$7 = utils.unpack;
      var type$9 = utils.type;
      var round$1 = Math.round;
      Color$q.prototype.rgb = function(rnd2) {
        if (rnd2 === void 0)
          rnd2 = true;
        if (rnd2 === false) {
          return this._rgb.slice(0, 3);
        }
        return this._rgb.slice(0, 3).map(round$1);
      };
      Color$q.prototype.rgba = function(rnd2) {
        if (rnd2 === void 0)
          rnd2 = true;
        return this._rgb.slice(0, 4).map(function(v2, i3) {
          return i3 < 3 ? rnd2 === false ? v2 : round$1(v2) : v2;
        });
      };
      chroma$8.rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$q, [null].concat(args, ["rgb"])))();
      };
      input$3.format.rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgba = unpack$7(args, "rgba");
        if (rgba[3] === void 0) {
          rgba[3] = 1;
        }
        return rgba;
      };
      input$3.autodetect.push({
        p: 3,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$7(args, "rgba");
          if (type$9(args) === "array" && (args.length === 3 || args.length === 4 && type$9(args[3]) == "number" && args[3] >= 0 && args[3] <= 1)) {
            return "rgb";
          }
        }
      });
      var log$1 = Math.log;
      var temperature2rgb$1 = function(kelvin) {
        var temp = kelvin / 100;
        var r2, g2, b2;
        if (temp < 66) {
          r2 = 255;
          g2 = temp < 6 ? 0 : -155.25485562709179 - 0.44596950469579133 * (g2 = temp - 2) + 104.49216199393888 * log$1(g2);
          b2 = temp < 20 ? 0 : -254.76935184120902 + 0.8274096064007395 * (b2 = temp - 10) + 115.67994401066147 * log$1(b2);
        } else {
          r2 = 351.97690566805693 + 0.114206453784165 * (r2 = temp - 55) - 40.25366309332127 * log$1(r2);
          g2 = 325.4494125711974 + 0.07943456536662342 * (g2 = temp - 50) - 28.0852963507957 * log$1(g2);
          b2 = 255;
        }
        return [r2, g2, b2, 1];
      };
      var temperature2rgb_1 = temperature2rgb$1;
      var temperature2rgb = temperature2rgb_1;
      var unpack$6 = utils.unpack;
      var round = Math.round;
      var rgb2temperature$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var rgb2 = unpack$6(args, "rgb");
        var r2 = rgb2[0], b2 = rgb2[2];
        var minTemp = 1e3;
        var maxTemp = 4e4;
        var eps = 0.4;
        var temp;
        while (maxTemp - minTemp > eps) {
          temp = (maxTemp + minTemp) * 0.5;
          var rgb$1 = temperature2rgb(temp);
          if (rgb$1[2] / rgb$1[0] >= b2 / r2) {
            maxTemp = temp;
          } else {
            minTemp = temp;
          }
        }
        return round(temp);
      };
      var rgb2temperature_1 = rgb2temperature$1;
      var chroma$7 = chroma_1;
      var Color$p = Color_1;
      var input$2 = input$h;
      var rgb2temperature = rgb2temperature_1;
      Color$p.prototype.temp = Color$p.prototype.kelvin = Color$p.prototype.temperature = function() {
        return rgb2temperature(this._rgb);
      };
      chroma$7.temp = chroma$7.kelvin = chroma$7.temperature = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$p, [null].concat(args, ["temp"])))();
      };
      input$2.format.temp = input$2.format.kelvin = input$2.format.temperature = temperature2rgb_1;
      var unpack$5 = utils.unpack;
      var cbrt = Math.cbrt;
      var pow$8 = Math.pow;
      var sign$1 = Math.sign;
      var rgb2oklab$2 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$5(args, "rgb");
        var r2 = ref[0];
        var g2 = ref[1];
        var b2 = ref[2];
        var ref$1 = [rgb2lrgb(r2 / 255), rgb2lrgb(g2 / 255), rgb2lrgb(b2 / 255)];
        var lr = ref$1[0];
        var lg = ref$1[1];
        var lb = ref$1[2];
        var l2 = cbrt(0.4122214708 * lr + 0.5363325363 * lg + 0.0514459929 * lb);
        var m2 = cbrt(0.2119034982 * lr + 0.6806995451 * lg + 0.1073969566 * lb);
        var s2 = cbrt(0.0883024619 * lr + 0.2817188376 * lg + 0.6299787005 * lb);
        return [
          0.2104542553 * l2 + 0.793617785 * m2 - 0.0040720468 * s2,
          1.9779984951 * l2 - 2.428592205 * m2 + 0.4505937099 * s2,
          0.0259040371 * l2 + 0.7827717662 * m2 - 0.808675766 * s2
        ];
      };
      var rgb2oklab_1 = rgb2oklab$2;
      function rgb2lrgb(c2) {
        var abs2 = Math.abs(c2);
        if (abs2 < 0.04045) {
          return c2 / 12.92;
        }
        return (sign$1(c2) || 1) * pow$8((abs2 + 0.055) / 1.055, 2.4);
      }
      var unpack$4 = utils.unpack;
      var pow$7 = Math.pow;
      var sign = Math.sign;
      var oklab2rgb$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$4(args, "lab");
        var L2 = args[0];
        var a2 = args[1];
        var b2 = args[2];
        var l2 = pow$7(L2 + 0.3963377774 * a2 + 0.2158037573 * b2, 3);
        var m2 = pow$7(L2 - 0.1055613458 * a2 - 0.0638541728 * b2, 3);
        var s2 = pow$7(L2 - 0.0894841775 * a2 - 1.291485548 * b2, 3);
        return [
          255 * lrgb2rgb(4.0767416621 * l2 - 3.3077115913 * m2 + 0.2309699292 * s2),
          255 * lrgb2rgb(-1.2684380046 * l2 + 2.6097574011 * m2 - 0.3413193965 * s2),
          255 * lrgb2rgb(-0.0041960863 * l2 - 0.7034186147 * m2 + 1.707614701 * s2),
          args.length > 3 ? args[3] : 1
        ];
      };
      var oklab2rgb_1 = oklab2rgb$1;
      function lrgb2rgb(c2) {
        var abs2 = Math.abs(c2);
        if (abs2 > 31308e-7) {
          return (sign(c2) || 1) * (1.055 * pow$7(abs2, 1 / 2.4) - 0.055);
        }
        return c2 * 12.92;
      }
      var unpack$3 = utils.unpack;
      var type$8 = utils.type;
      var chroma$6 = chroma_1;
      var Color$o = Color_1;
      var input$1 = input$h;
      var rgb2oklab$1 = rgb2oklab_1;
      Color$o.prototype.oklab = function() {
        return rgb2oklab$1(this._rgb);
      };
      chroma$6.oklab = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$o, [null].concat(args, ["oklab"])))();
      };
      input$1.format.oklab = oklab2rgb_1;
      input$1.autodetect.push({
        p: 3,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack$3(args, "oklab");
          if (type$8(args) === "array" && args.length === 3) {
            return "oklab";
          }
        }
      });
      var unpack$2 = utils.unpack;
      var rgb2oklab = rgb2oklab_1;
      var lab2lch = lab2lch_1;
      var rgb2oklch$1 = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var ref = unpack$2(args, "rgb");
        var r2 = ref[0];
        var g2 = ref[1];
        var b2 = ref[2];
        var ref$1 = rgb2oklab(r2, g2, b2);
        var l2 = ref$1[0];
        var a2 = ref$1[1];
        var b_ = ref$1[2];
        return lab2lch(l2, a2, b_);
      };
      var rgb2oklch_1 = rgb2oklch$1;
      var unpack$1 = utils.unpack;
      var lch2lab = lch2lab_1;
      var oklab2rgb = oklab2rgb_1;
      var oklch2rgb = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        args = unpack$1(args, "lch");
        var l2 = args[0];
        var c2 = args[1];
        var h2 = args[2];
        var ref = lch2lab(l2, c2, h2);
        var L2 = ref[0];
        var a2 = ref[1];
        var b_ = ref[2];
        var ref$1 = oklab2rgb(L2, a2, b_);
        var r2 = ref$1[0];
        var g2 = ref$1[1];
        var b2 = ref$1[2];
        return [r2, g2, b2, args.length > 3 ? args[3] : 1];
      };
      var oklch2rgb_1 = oklch2rgb;
      var unpack = utils.unpack;
      var type$7 = utils.type;
      var chroma$5 = chroma_1;
      var Color$n = Color_1;
      var input = input$h;
      var rgb2oklch = rgb2oklch_1;
      Color$n.prototype.oklch = function() {
        return rgb2oklch(this._rgb);
      };
      chroma$5.oklch = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        return new (Function.prototype.bind.apply(Color$n, [null].concat(args, ["oklch"])))();
      };
      input.format.oklch = oklch2rgb_1;
      input.autodetect.push({
        p: 3,
        test: function() {
          var args = [], len = arguments.length;
          while (len--)
            args[len] = arguments[len];
          args = unpack(args, "oklch");
          if (type$7(args) === "array" && args.length === 3) {
            return "oklch";
          }
        }
      });
      var Color$m = Color_1;
      var type$6 = utils.type;
      Color$m.prototype.alpha = function(a2, mutate) {
        if (mutate === void 0)
          mutate = false;
        if (a2 !== void 0 && type$6(a2) === "number") {
          if (mutate) {
            this._rgb[3] = a2;
            return this;
          }
          return new Color$m([this._rgb[0], this._rgb[1], this._rgb[2], a2], "rgb");
        }
        return this._rgb[3];
      };
      var Color$l = Color_1;
      Color$l.prototype.clipped = function() {
        return this._rgb._clipped || false;
      };
      var Color$k = Color_1;
      var LAB_CONSTANTS$1 = labConstants;
      Color$k.prototype.darken = function(amount) {
        if (amount === void 0)
          amount = 1;
        var me = this;
        var lab2 = me.lab();
        lab2[0] -= LAB_CONSTANTS$1.Kn * amount;
        return new Color$k(lab2, "lab").alpha(me.alpha(), true);
      };
      Color$k.prototype.brighten = function(amount) {
        if (amount === void 0)
          amount = 1;
        return this.darken(-amount);
      };
      Color$k.prototype.darker = Color$k.prototype.darken;
      Color$k.prototype.brighter = Color$k.prototype.brighten;
      var Color$j = Color_1;
      Color$j.prototype.get = function(mc) {
        var ref = mc.split(".");
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
          var i3 = mode.indexOf(channel) - (mode.substr(0, 2) === "ok" ? 2 : 0);
          if (i3 > -1) {
            return src[i3];
          }
          throw new Error("unknown channel " + channel + " in mode " + mode);
        } else {
          return src;
        }
      };
      var Color$i = Color_1;
      var type$5 = utils.type;
      var pow$6 = Math.pow;
      var EPS = 1e-7;
      var MAX_ITER = 20;
      Color$i.prototype.luminance = function(lum) {
        if (lum !== void 0 && type$5(lum) === "number") {
          if (lum === 0) {
            return new Color$i([0, 0, 0, this._rgb[3]], "rgb");
          }
          if (lum === 1) {
            return new Color$i([255, 255, 255, this._rgb[3]], "rgb");
          }
          var cur_lum = this.luminance();
          var mode = "rgb";
          var max_iter = MAX_ITER;
          var test = function(low, high) {
            var mid = low.interpolate(high, 0.5, mode);
            var lm = mid.luminance();
            if (Math.abs(lum - lm) < EPS || !max_iter--) {
              return mid;
            }
            return lm > lum ? test(low, mid) : test(mid, high);
          };
          var rgb2 = (cur_lum > lum ? test(new Color$i([0, 0, 0]), this) : test(this, new Color$i([255, 255, 255]))).rgb();
          return new Color$i(rgb2.concat([this._rgb[3]]));
        }
        return rgb2luminance.apply(void 0, this._rgb.slice(0, 3));
      };
      var rgb2luminance = function(r2, g2, b2) {
        r2 = luminance_x(r2);
        g2 = luminance_x(g2);
        b2 = luminance_x(b2);
        return 0.2126 * r2 + 0.7152 * g2 + 0.0722 * b2;
      };
      var luminance_x = function(x2) {
        x2 /= 255;
        return x2 <= 0.03928 ? x2 / 12.92 : pow$6((x2 + 0.055) / 1.055, 2.4);
      };
      var interpolator$1 = {};
      var Color$h = Color_1;
      var type$4 = utils.type;
      var interpolator = interpolator$1;
      var mix$1 = function(col1, col2, f2) {
        if (f2 === void 0)
          f2 = 0.5;
        var rest = [], len = arguments.length - 3;
        while (len-- > 0)
          rest[len] = arguments[len + 3];
        var mode = rest[0] || "lrgb";
        if (!interpolator[mode] && !rest.length) {
          mode = Object.keys(interpolator)[0];
        }
        if (!interpolator[mode]) {
          throw new Error("interpolation mode " + mode + " is not defined");
        }
        if (type$4(col1) !== "object") {
          col1 = new Color$h(col1);
        }
        if (type$4(col2) !== "object") {
          col2 = new Color$h(col2);
        }
        return interpolator[mode](col1, col2, f2).alpha(col1.alpha() + f2 * (col2.alpha() - col1.alpha()));
      };
      var Color$g = Color_1;
      var mix = mix$1;
      Color$g.prototype.mix = Color$g.prototype.interpolate = function(col2, f2) {
        if (f2 === void 0)
          f2 = 0.5;
        var rest = [], len = arguments.length - 2;
        while (len-- > 0)
          rest[len] = arguments[len + 2];
        return mix.apply(void 0, [this, col2, f2].concat(rest));
      };
      var Color$f = Color_1;
      Color$f.prototype.premultiply = function(mutate) {
        if (mutate === void 0)
          mutate = false;
        var rgb2 = this._rgb;
        var a2 = rgb2[3];
        if (mutate) {
          this._rgb = [rgb2[0] * a2, rgb2[1] * a2, rgb2[2] * a2, a2];
          return this;
        } else {
          return new Color$f([rgb2[0] * a2, rgb2[1] * a2, rgb2[2] * a2, a2], "rgb");
        }
      };
      var Color$e = Color_1;
      var LAB_CONSTANTS = labConstants;
      Color$e.prototype.saturate = function(amount) {
        if (amount === void 0)
          amount = 1;
        var me = this;
        var lch2 = me.lch();
        lch2[1] += LAB_CONSTANTS.Kn * amount;
        if (lch2[1] < 0) {
          lch2[1] = 0;
        }
        return new Color$e(lch2, "lch").alpha(me.alpha(), true);
      };
      Color$e.prototype.desaturate = function(amount) {
        if (amount === void 0)
          amount = 1;
        return this.saturate(-amount);
      };
      var Color$d = Color_1;
      var type$3 = utils.type;
      Color$d.prototype.set = function(mc, value, mutate) {
        if (mutate === void 0)
          mutate = false;
        var ref = mc.split(".");
        var mode = ref[0];
        var channel = ref[1];
        var src = this[mode]();
        if (channel) {
          var i3 = mode.indexOf(channel) - (mode.substr(0, 2) === "ok" ? 2 : 0);
          if (i3 > -1) {
            if (type$3(value) == "string") {
              switch (value.charAt(0)) {
                case "+":
                  src[i3] += +value;
                  break;
                case "-":
                  src[i3] += +value;
                  break;
                case "*":
                  src[i3] *= +value.substr(1);
                  break;
                case "/":
                  src[i3] /= +value.substr(1);
                  break;
                default:
                  src[i3] = +value;
              }
            } else if (type$3(value) === "number") {
              src[i3] = value;
            } else {
              throw new Error("unsupported value for Color.set");
            }
            var out = new Color$d(src, mode);
            if (mutate) {
              this._rgb = out._rgb;
              return this;
            }
            return out;
          }
          throw new Error("unknown channel " + channel + " in mode " + mode);
        } else {
          return src;
        }
      };
      var Color$c = Color_1;
      var rgb = function(col1, col2, f2) {
        var xyz0 = col1._rgb;
        var xyz1 = col2._rgb;
        return new Color$c(xyz0[0] + f2 * (xyz1[0] - xyz0[0]), xyz0[1] + f2 * (xyz1[1] - xyz0[1]), xyz0[2] + f2 * (xyz1[2] - xyz0[2]), "rgb");
      };
      interpolator$1.rgb = rgb;
      var Color$b = Color_1;
      var sqrt$2 = Math.sqrt;
      var pow$5 = Math.pow;
      var lrgb = function(col1, col2, f2) {
        var ref = col1._rgb;
        var x1 = ref[0];
        var y1 = ref[1];
        var z1 = ref[2];
        var ref$1 = col2._rgb;
        var x2 = ref$1[0];
        var y2 = ref$1[1];
        var z2 = ref$1[2];
        return new Color$b(sqrt$2(pow$5(x1, 2) * (1 - f2) + pow$5(x2, 2) * f2), sqrt$2(pow$5(y1, 2) * (1 - f2) + pow$5(y2, 2) * f2), sqrt$2(pow$5(z1, 2) * (1 - f2) + pow$5(z2, 2) * f2), "rgb");
      };
      interpolator$1.lrgb = lrgb;
      var Color$a = Color_1;
      var lab = function(col1, col2, f2) {
        var xyz0 = col1.lab();
        var xyz1 = col2.lab();
        return new Color$a(xyz0[0] + f2 * (xyz1[0] - xyz0[0]), xyz0[1] + f2 * (xyz1[1] - xyz0[1]), xyz0[2] + f2 * (xyz1[2] - xyz0[2]), "lab");
      };
      interpolator$1.lab = lab;
      var Color$9 = Color_1;
      var _hsx = function(col1, col2, f2, m2) {
        var assign, assign$1;
        var xyz0, xyz1;
        if (m2 === "hsl") {
          xyz0 = col1.hsl();
          xyz1 = col2.hsl();
        } else if (m2 === "hsv") {
          xyz0 = col1.hsv();
          xyz1 = col2.hsv();
        } else if (m2 === "hcg") {
          xyz0 = col1.hcg();
          xyz1 = col2.hcg();
        } else if (m2 === "hsi") {
          xyz0 = col1.hsi();
          xyz1 = col2.hsi();
        } else if (m2 === "lch" || m2 === "hcl") {
          m2 = "hcl";
          xyz0 = col1.hcl();
          xyz1 = col2.hcl();
        } else if (m2 === "oklch") {
          xyz0 = col1.oklch().reverse();
          xyz1 = col2.oklch().reverse();
        }
        var hue0, hue1, sat0, sat1, lbv0, lbv1;
        if (m2.substr(0, 1) === "h" || m2 === "oklch") {
          assign = xyz0, hue0 = assign[0], sat0 = assign[1], lbv0 = assign[2];
          assign$1 = xyz1, hue1 = assign$1[0], sat1 = assign$1[1], lbv1 = assign$1[2];
        }
        var sat, hue, lbv, dh;
        if (!isNaN(hue0) && !isNaN(hue1)) {
          if (hue1 > hue0 && hue1 - hue0 > 180) {
            dh = hue1 - (hue0 + 360);
          } else if (hue1 < hue0 && hue0 - hue1 > 180) {
            dh = hue1 + 360 - hue0;
          } else {
            dh = hue1 - hue0;
          }
          hue = hue0 + f2 * dh;
        } else if (!isNaN(hue0)) {
          hue = hue0;
          if ((lbv1 == 1 || lbv1 == 0) && m2 != "hsv") {
            sat = sat0;
          }
        } else if (!isNaN(hue1)) {
          hue = hue1;
          if ((lbv0 == 1 || lbv0 == 0) && m2 != "hsv") {
            sat = sat1;
          }
        } else {
          hue = Number.NaN;
        }
        if (sat === void 0) {
          sat = sat0 + f2 * (sat1 - sat0);
        }
        lbv = lbv0 + f2 * (lbv1 - lbv0);
        return m2 === "oklch" ? new Color$9([lbv, sat, hue], m2) : new Color$9([hue, sat, lbv], m2);
      };
      var interpolate_hsx$5 = _hsx;
      var lch = function(col1, col2, f2) {
        return interpolate_hsx$5(col1, col2, f2, "lch");
      };
      interpolator$1.lch = lch;
      interpolator$1.hcl = lch;
      var Color$8 = Color_1;
      var num = function(col1, col2, f2) {
        var c1 = col1.num();
        var c2 = col2.num();
        return new Color$8(c1 + f2 * (c2 - c1), "num");
      };
      interpolator$1.num = num;
      var interpolate_hsx$4 = _hsx;
      var hcg = function(col1, col2, f2) {
        return interpolate_hsx$4(col1, col2, f2, "hcg");
      };
      interpolator$1.hcg = hcg;
      var interpolate_hsx$3 = _hsx;
      var hsi = function(col1, col2, f2) {
        return interpolate_hsx$3(col1, col2, f2, "hsi");
      };
      interpolator$1.hsi = hsi;
      var interpolate_hsx$2 = _hsx;
      var hsl = function(col1, col2, f2) {
        return interpolate_hsx$2(col1, col2, f2, "hsl");
      };
      interpolator$1.hsl = hsl;
      var interpolate_hsx$1 = _hsx;
      var hsv = function(col1, col2, f2) {
        return interpolate_hsx$1(col1, col2, f2, "hsv");
      };
      interpolator$1.hsv = hsv;
      var Color$7 = Color_1;
      var oklab = function(col1, col2, f2) {
        var xyz0 = col1.oklab();
        var xyz1 = col2.oklab();
        return new Color$7(xyz0[0] + f2 * (xyz1[0] - xyz0[0]), xyz0[1] + f2 * (xyz1[1] - xyz0[1]), xyz0[2] + f2 * (xyz1[2] - xyz0[2]), "oklab");
      };
      interpolator$1.oklab = oklab;
      var interpolate_hsx = _hsx;
      var oklch = function(col1, col2, f2) {
        return interpolate_hsx(col1, col2, f2, "oklch");
      };
      interpolator$1.oklch = oklch;
      var Color$6 = Color_1;
      var clip_rgb$1 = utils.clip_rgb;
      var pow$4 = Math.pow;
      var sqrt$1 = Math.sqrt;
      var PI$1 = Math.PI;
      var cos$2 = Math.cos;
      var sin$2 = Math.sin;
      var atan2$1 = Math.atan2;
      var average = function(colors2, mode, weights) {
        if (mode === void 0)
          mode = "lrgb";
        if (weights === void 0)
          weights = null;
        var l2 = colors2.length;
        if (!weights) {
          weights = Array.from(new Array(l2)).map(function() {
            return 1;
          });
        }
        var k2 = l2 / weights.reduce(function(a2, b2) {
          return a2 + b2;
        });
        weights.forEach(function(w2, i4) {
          weights[i4] *= k2;
        });
        colors2 = colors2.map(function(c2) {
          return new Color$6(c2);
        });
        if (mode === "lrgb") {
          return _average_lrgb(colors2, weights);
        }
        var first = colors2.shift();
        var xyz = first.get(mode);
        var cnt = [];
        var dx = 0;
        var dy = 0;
        for (var i3 = 0; i3 < xyz.length; i3++) {
          xyz[i3] = (xyz[i3] || 0) * weights[0];
          cnt.push(isNaN(xyz[i3]) ? 0 : weights[0]);
          if (mode.charAt(i3) === "h" && !isNaN(xyz[i3])) {
            var A2 = xyz[i3] / 180 * PI$1;
            dx += cos$2(A2) * weights[0];
            dy += sin$2(A2) * weights[0];
          }
        }
        var alpha = first.alpha() * weights[0];
        colors2.forEach(function(c2, ci) {
          var xyz2 = c2.get(mode);
          alpha += c2.alpha() * weights[ci + 1];
          for (var i4 = 0; i4 < xyz.length; i4++) {
            if (!isNaN(xyz2[i4])) {
              cnt[i4] += weights[ci + 1];
              if (mode.charAt(i4) === "h") {
                var A3 = xyz2[i4] / 180 * PI$1;
                dx += cos$2(A3) * weights[ci + 1];
                dy += sin$2(A3) * weights[ci + 1];
              } else {
                xyz[i4] += xyz2[i4] * weights[ci + 1];
              }
            }
          }
        });
        for (var i$12 = 0; i$12 < xyz.length; i$12++) {
          if (mode.charAt(i$12) === "h") {
            var A$1 = atan2$1(dy / cnt[i$12], dx / cnt[i$12]) / PI$1 * 180;
            while (A$1 < 0) {
              A$1 += 360;
            }
            while (A$1 >= 360) {
              A$1 -= 360;
            }
            xyz[i$12] = A$1;
          } else {
            xyz[i$12] = xyz[i$12] / cnt[i$12];
          }
        }
        alpha /= l2;
        return new Color$6(xyz, mode).alpha(alpha > 0.99999 ? 1 : alpha, true);
      };
      var _average_lrgb = function(colors2, weights) {
        var l2 = colors2.length;
        var xyz = [0, 0, 0, 0];
        for (var i3 = 0; i3 < colors2.length; i3++) {
          var col = colors2[i3];
          var f2 = weights[i3] / l2;
          var rgb2 = col._rgb;
          xyz[0] += pow$4(rgb2[0], 2) * f2;
          xyz[1] += pow$4(rgb2[1], 2) * f2;
          xyz[2] += pow$4(rgb2[2], 2) * f2;
          xyz[3] += rgb2[3] * f2;
        }
        xyz[0] = sqrt$1(xyz[0]);
        xyz[1] = sqrt$1(xyz[1]);
        xyz[2] = sqrt$1(xyz[2]);
        if (xyz[3] > 0.9999999) {
          xyz[3] = 1;
        }
        return new Color$6(clip_rgb$1(xyz));
      };
      var chroma$4 = chroma_1;
      var type$2 = utils.type;
      var pow$3 = Math.pow;
      var scale$2 = function(colors2) {
        var _mode = "rgb";
        var _nacol = chroma$4("#ccc");
        var _spread = 0;
        var _domain = [0, 1];
        var _pos = [];
        var _padding = [0, 0];
        var _classes = false;
        var _colors = [];
        var _out = false;
        var _min = 0;
        var _max = 1;
        var _correctLightness = false;
        var _colorCache = {};
        var _useCache = true;
        var _gamma = 1;
        var setColors = function(colors3) {
          colors3 = colors3 || ["#fff", "#000"];
          if (colors3 && type$2(colors3) === "string" && chroma$4.brewer && chroma$4.brewer[colors3.toLowerCase()]) {
            colors3 = chroma$4.brewer[colors3.toLowerCase()];
          }
          if (type$2(colors3) === "array") {
            if (colors3.length === 1) {
              colors3 = [colors3[0], colors3[0]];
            }
            colors3 = colors3.slice(0);
            for (var c2 = 0; c2 < colors3.length; c2++) {
              colors3[c2] = chroma$4(colors3[c2]);
            }
            _pos.length = 0;
            for (var c$1 = 0; c$1 < colors3.length; c$1++) {
              _pos.push(c$1 / (colors3.length - 1));
            }
          }
          resetCache();
          return _colors = colors3;
        };
        var getClass = function(value) {
          if (_classes != null) {
            var n2 = _classes.length - 1;
            var i3 = 0;
            while (i3 < n2 && value >= _classes[i3]) {
              i3++;
            }
            return i3 - 1;
          }
          return 0;
        };
        var tMapLightness = function(t2) {
          return t2;
        };
        var tMapDomain = function(t2) {
          return t2;
        };
        var getColor2 = function(val, bypassMap) {
          var col, t2;
          if (bypassMap == null) {
            bypassMap = false;
          }
          if (isNaN(val) || val === null) {
            return _nacol;
          }
          if (!bypassMap) {
            if (_classes && _classes.length > 2) {
              var c2 = getClass(val);
              t2 = c2 / (_classes.length - 2);
            } else if (_max !== _min) {
              t2 = (val - _min) / (_max - _min);
            } else {
              t2 = 1;
            }
          } else {
            t2 = val;
          }
          t2 = tMapDomain(t2);
          if (!bypassMap) {
            t2 = tMapLightness(t2);
          }
          if (_gamma !== 1) {
            t2 = pow$3(t2, _gamma);
          }
          t2 = _padding[0] + t2 * (1 - _padding[0] - _padding[1]);
          t2 = Math.min(1, Math.max(0, t2));
          var k2 = Math.floor(t2 * 1e4);
          if (_useCache && _colorCache[k2]) {
            col = _colorCache[k2];
          } else {
            if (type$2(_colors) === "array") {
              for (var i3 = 0; i3 < _pos.length; i3++) {
                var p2 = _pos[i3];
                if (t2 <= p2) {
                  col = _colors[i3];
                  break;
                }
                if (t2 >= p2 && i3 === _pos.length - 1) {
                  col = _colors[i3];
                  break;
                }
                if (t2 > p2 && t2 < _pos[i3 + 1]) {
                  t2 = (t2 - p2) / (_pos[i3 + 1] - p2);
                  col = chroma$4.interpolate(_colors[i3], _colors[i3 + 1], t2, _mode);
                  break;
                }
              }
            } else if (type$2(_colors) === "function") {
              col = _colors(t2);
            }
            if (_useCache) {
              _colorCache[k2] = col;
            }
          }
          return col;
        };
        var resetCache = function() {
          return _colorCache = {};
        };
        setColors(colors2);
        var f2 = function(v2) {
          var c2 = chroma$4(getColor2(v2));
          if (_out && c2[_out]) {
            return c2[_out]();
          } else {
            return c2;
          }
        };
        f2.classes = function(classes) {
          if (classes != null) {
            if (type$2(classes) === "array") {
              _classes = classes;
              _domain = [classes[0], classes[classes.length - 1]];
            } else {
              var d2 = chroma$4.analyze(_domain);
              if (classes === 0) {
                _classes = [d2.min, d2.max];
              } else {
                _classes = chroma$4.limits(d2, "e", classes);
              }
            }
            return f2;
          }
          return _classes;
        };
        f2.domain = function(domain) {
          if (!arguments.length) {
            return _domain;
          }
          _min = domain[0];
          _max = domain[domain.length - 1];
          _pos = [];
          var k2 = _colors.length;
          if (domain.length === k2 && _min !== _max) {
            for (var i3 = 0, list2 = Array.from(domain); i3 < list2.length; i3 += 1) {
              var d2 = list2[i3];
              _pos.push((d2 - _min) / (_max - _min));
            }
          } else {
            for (var c2 = 0; c2 < k2; c2++) {
              _pos.push(c2 / (k2 - 1));
            }
            if (domain.length > 2) {
              var tOut = domain.map(function(d3, i4) {
                return i4 / (domain.length - 1);
              });
              var tBreaks = domain.map(function(d3) {
                return (d3 - _min) / (_max - _min);
              });
              if (!tBreaks.every(function(val, i4) {
                return tOut[i4] === val;
              })) {
                tMapDomain = function(t2) {
                  if (t2 <= 0 || t2 >= 1) {
                    return t2;
                  }
                  var i4 = 0;
                  while (t2 >= tBreaks[i4 + 1]) {
                    i4++;
                  }
                  var f3 = (t2 - tBreaks[i4]) / (tBreaks[i4 + 1] - tBreaks[i4]);
                  var out = tOut[i4] + f3 * (tOut[i4 + 1] - tOut[i4]);
                  return out;
                };
              }
            }
          }
          _domain = [_min, _max];
          return f2;
        };
        f2.mode = function(_m) {
          if (!arguments.length) {
            return _mode;
          }
          _mode = _m;
          resetCache();
          return f2;
        };
        f2.range = function(colors3, _pos2) {
          setColors(colors3);
          return f2;
        };
        f2.out = function(_o) {
          _out = _o;
          return f2;
        };
        f2.spread = function(val) {
          if (!arguments.length) {
            return _spread;
          }
          _spread = val;
          return f2;
        };
        f2.correctLightness = function(v2) {
          if (v2 == null) {
            v2 = true;
          }
          _correctLightness = v2;
          resetCache();
          if (_correctLightness) {
            tMapLightness = function(t2) {
              var L0 = getColor2(0, true).lab()[0];
              var L1 = getColor2(1, true).lab()[0];
              var pol = L0 > L1;
              var L_actual = getColor2(t2, true).lab()[0];
              var L_ideal = L0 + (L1 - L0) * t2;
              var L_diff = L_actual - L_ideal;
              var t0 = 0;
              var t1 = 1;
              var max_iter = 20;
              while (Math.abs(L_diff) > 0.01 && max_iter-- > 0) {
                (function() {
                  if (pol) {
                    L_diff *= -1;
                  }
                  if (L_diff < 0) {
                    t0 = t2;
                    t2 += (t1 - t2) * 0.5;
                  } else {
                    t1 = t2;
                    t2 += (t0 - t2) * 0.5;
                  }
                  L_actual = getColor2(t2, true).lab()[0];
                  return L_diff = L_actual - L_ideal;
                })();
              }
              return t2;
            };
          } else {
            tMapLightness = function(t2) {
              return t2;
            };
          }
          return f2;
        };
        f2.padding = function(p2) {
          if (p2 != null) {
            if (type$2(p2) === "number") {
              p2 = [p2, p2];
            }
            _padding = p2;
            return f2;
          } else {
            return _padding;
          }
        };
        f2.colors = function(numColors, out) {
          if (arguments.length < 2) {
            out = "hex";
          }
          var result = [];
          if (arguments.length === 0) {
            result = _colors.slice(0);
          } else if (numColors === 1) {
            result = [f2(0.5)];
          } else if (numColors > 1) {
            var dm = _domain[0];
            var dd = _domain[1] - dm;
            result = __range__(0, numColors, false).map(function(i4) {
              return f2(dm + i4 / (numColors - 1) * dd);
            });
          } else {
            colors2 = [];
            var samples = [];
            if (_classes && _classes.length > 2) {
              for (var i3 = 1, end = _classes.length, asc = 1 <= end; asc ? i3 < end : i3 > end; asc ? i3++ : i3--) {
                samples.push((_classes[i3 - 1] + _classes[i3]) * 0.5);
              }
            } else {
              samples = _domain;
            }
            result = samples.map(function(v2) {
              return f2(v2);
            });
          }
          if (chroma$4[out]) {
            result = result.map(function(c2) {
              return c2[out]();
            });
          }
          return result;
        };
        f2.cache = function(c2) {
          if (c2 != null) {
            _useCache = c2;
            return f2;
          } else {
            return _useCache;
          }
        };
        f2.gamma = function(g2) {
          if (g2 != null) {
            _gamma = g2;
            return f2;
          } else {
            return _gamma;
          }
        };
        f2.nodata = function(d2) {
          if (d2 != null) {
            _nacol = chroma$4(d2);
            return f2;
          } else {
            return _nacol;
          }
        };
        return f2;
      };
      function __range__(left, right, inclusive) {
        var range = [];
        var ascending = left < right;
        var end = !inclusive ? right : ascending ? right + 1 : right - 1;
        for (var i3 = left; ascending ? i3 < end : i3 > end; ascending ? i3++ : i3--) {
          range.push(i3);
        }
        return range;
      }
      var Color$5 = Color_1;
      var scale$1 = scale$2;
      var binom_row = function(n2) {
        var row = [1, 1];
        for (var i3 = 1; i3 < n2; i3++) {
          var newrow = [1];
          for (var j2 = 1; j2 <= row.length; j2++) {
            newrow[j2] = (row[j2] || 0) + row[j2 - 1];
          }
          row = newrow;
        }
        return row;
      };
      var bezier = function(colors2) {
        var assign, assign$1, assign$2;
        var I2, lab0, lab1, lab2;
        colors2 = colors2.map(function(c2) {
          return new Color$5(c2);
        });
        if (colors2.length === 2) {
          assign = colors2.map(function(c2) {
            return c2.lab();
          }), lab0 = assign[0], lab1 = assign[1];
          I2 = function(t2) {
            var lab4 = [0, 1, 2].map(function(i3) {
              return lab0[i3] + t2 * (lab1[i3] - lab0[i3]);
            });
            return new Color$5(lab4, "lab");
          };
        } else if (colors2.length === 3) {
          assign$1 = colors2.map(function(c2) {
            return c2.lab();
          }), lab0 = assign$1[0], lab1 = assign$1[1], lab2 = assign$1[2];
          I2 = function(t2) {
            var lab4 = [0, 1, 2].map(function(i3) {
              return (1 - t2) * (1 - t2) * lab0[i3] + 2 * (1 - t2) * t2 * lab1[i3] + t2 * t2 * lab2[i3];
            });
            return new Color$5(lab4, "lab");
          };
        } else if (colors2.length === 4) {
          var lab3;
          assign$2 = colors2.map(function(c2) {
            return c2.lab();
          }), lab0 = assign$2[0], lab1 = assign$2[1], lab2 = assign$2[2], lab3 = assign$2[3];
          I2 = function(t2) {
            var lab4 = [0, 1, 2].map(function(i3) {
              return (1 - t2) * (1 - t2) * (1 - t2) * lab0[i3] + 3 * (1 - t2) * (1 - t2) * t2 * lab1[i3] + 3 * (1 - t2) * t2 * t2 * lab2[i3] + t2 * t2 * t2 * lab3[i3];
            });
            return new Color$5(lab4, "lab");
          };
        } else if (colors2.length >= 5) {
          var labs, row, n2;
          labs = colors2.map(function(c2) {
            return c2.lab();
          });
          n2 = colors2.length - 1;
          row = binom_row(n2);
          I2 = function(t2) {
            var u2 = 1 - t2;
            var lab4 = [0, 1, 2].map(function(i3) {
              return labs.reduce(function(sum, el, j2) {
                return sum + row[j2] * Math.pow(u2, n2 - j2) * Math.pow(t2, j2) * el[i3];
              }, 0);
            });
            return new Color$5(lab4, "lab");
          };
        } else {
          throw new RangeError("No point in running bezier with only one color.");
        }
        return I2;
      };
      var bezier_1 = function(colors2) {
        var f2 = bezier(colors2);
        f2.scale = function() {
          return scale$1(f2);
        };
        return f2;
      };
      var chroma$3 = chroma_1;
      var blend = function(bottom, top, mode) {
        if (!blend[mode]) {
          throw new Error("unknown blend mode " + mode);
        }
        return blend[mode](bottom, top);
      };
      var blend_f = function(f2) {
        return function(bottom, top) {
          var c0 = chroma$3(top).rgb();
          var c1 = chroma$3(bottom).rgb();
          return chroma$3.rgb(f2(c0, c1));
        };
      };
      var each = function(f2) {
        return function(c0, c1) {
          var out = [];
          out[0] = f2(c0[0], c1[0]);
          out[1] = f2(c0[1], c1[1]);
          out[2] = f2(c0[2], c1[2]);
          return out;
        };
      };
      var normal = function(a2) {
        return a2;
      };
      var multiply = function(a2, b2) {
        return a2 * b2 / 255;
      };
      var darken = function(a2, b2) {
        return a2 > b2 ? b2 : a2;
      };
      var lighten = function(a2, b2) {
        return a2 > b2 ? a2 : b2;
      };
      var screen = function(a2, b2) {
        return 255 * (1 - (1 - a2 / 255) * (1 - b2 / 255));
      };
      var overlay = function(a2, b2) {
        return b2 < 128 ? 2 * a2 * b2 / 255 : 255 * (1 - 2 * (1 - a2 / 255) * (1 - b2 / 255));
      };
      var burn = function(a2, b2) {
        return 255 * (1 - (1 - b2 / 255) / (a2 / 255));
      };
      var dodge = function(a2, b2) {
        if (a2 === 255) {
          return 255;
        }
        a2 = 255 * (b2 / 255) / (1 - a2 / 255);
        return a2 > 255 ? 255 : a2;
      };
      blend.normal = blend_f(each(normal));
      blend.multiply = blend_f(each(multiply));
      blend.screen = blend_f(each(screen));
      blend.overlay = blend_f(each(overlay));
      blend.darken = blend_f(each(darken));
      blend.lighten = blend_f(each(lighten));
      blend.dodge = blend_f(each(dodge));
      blend.burn = blend_f(each(burn));
      var blend_1 = blend;
      var type$1 = utils.type;
      var clip_rgb = utils.clip_rgb;
      var TWOPI = utils.TWOPI;
      var pow$2 = Math.pow;
      var sin$1 = Math.sin;
      var cos$1 = Math.cos;
      var chroma$2 = chroma_1;
      var cubehelix = function(start, rotations, hue, gamma, lightness) {
        if (start === void 0)
          start = 300;
        if (rotations === void 0)
          rotations = -1.5;
        if (hue === void 0)
          hue = 1;
        if (gamma === void 0)
          gamma = 1;
        if (lightness === void 0)
          lightness = [0, 1];
        var dh = 0, dl;
        if (type$1(lightness) === "array") {
          dl = lightness[1] - lightness[0];
        } else {
          dl = 0;
          lightness = [lightness, lightness];
        }
        var f2 = function(fract) {
          var a2 = TWOPI * ((start + 120) / 360 + rotations * fract);
          var l2 = pow$2(lightness[0] + dl * fract, gamma);
          var h2 = dh !== 0 ? hue[0] + fract * dh : hue;
          var amp = h2 * l2 * (1 - l2) / 2;
          var cos_a = cos$1(a2);
          var sin_a = sin$1(a2);
          var r2 = l2 + amp * (-0.14861 * cos_a + 1.78277 * sin_a);
          var g2 = l2 + amp * (-0.29227 * cos_a - 0.90649 * sin_a);
          var b2 = l2 + amp * (1.97294 * cos_a);
          return chroma$2(clip_rgb([r2 * 255, g2 * 255, b2 * 255, 1]));
        };
        f2.start = function(s2) {
          if (s2 == null) {
            return start;
          }
          start = s2;
          return f2;
        };
        f2.rotations = function(r2) {
          if (r2 == null) {
            return rotations;
          }
          rotations = r2;
          return f2;
        };
        f2.gamma = function(g2) {
          if (g2 == null) {
            return gamma;
          }
          gamma = g2;
          return f2;
        };
        f2.hue = function(h2) {
          if (h2 == null) {
            return hue;
          }
          hue = h2;
          if (type$1(hue) === "array") {
            dh = hue[1] - hue[0];
            if (dh === 0) {
              hue = hue[1];
            }
          } else {
            dh = 0;
          }
          return f2;
        };
        f2.lightness = function(h2) {
          if (h2 == null) {
            return lightness;
          }
          if (type$1(h2) === "array") {
            lightness = h2;
            dl = h2[1] - h2[0];
          } else {
            lightness = [h2, h2];
            dl = 0;
          }
          return f2;
        };
        f2.scale = function() {
          return chroma$2.scale(f2);
        };
        f2.hue(hue);
        return f2;
      };
      var Color$4 = Color_1;
      var digits = "0123456789abcdef";
      var floor$1 = Math.floor;
      var random = Math.random;
      var random_1 = function() {
        var code = "#";
        for (var i3 = 0; i3 < 6; i3++) {
          code += digits.charAt(floor$1(random() * 16));
        }
        return new Color$4(code, "hex");
      };
      var type = type$p;
      var log = Math.log;
      var pow$1 = Math.pow;
      var floor = Math.floor;
      var abs$1 = Math.abs;
      var analyze = function(data, key2) {
        if (key2 === void 0)
          key2 = null;
        var r2 = {
          min: Number.MAX_VALUE,
          max: Number.MAX_VALUE * -1,
          sum: 0,
          values: [],
          count: 0
        };
        if (type(data) === "object") {
          data = Object.values(data);
        }
        data.forEach(function(val) {
          if (key2 && type(val) === "object") {
            val = val[key2];
          }
          if (val !== void 0 && val !== null && !isNaN(val)) {
            r2.values.push(val);
            r2.sum += val;
            if (val < r2.min) {
              r2.min = val;
            }
            if (val > r2.max) {
              r2.max = val;
            }
            r2.count += 1;
          }
        });
        r2.domain = [r2.min, r2.max];
        r2.limits = function(mode, num2) {
          return limits(r2, mode, num2);
        };
        return r2;
      };
      var limits = function(data, mode, num2) {
        if (mode === void 0)
          mode = "equal";
        if (num2 === void 0)
          num2 = 7;
        if (type(data) == "array") {
          data = analyze(data);
        }
        var min2 = data.min;
        var max2 = data.max;
        var values = data.values.sort(function(a2, b2) {
          return a2 - b2;
        });
        if (num2 === 1) {
          return [min2, max2];
        }
        var limits2 = [];
        if (mode.substr(0, 1) === "c") {
          limits2.push(min2);
          limits2.push(max2);
        }
        if (mode.substr(0, 1) === "e") {
          limits2.push(min2);
          for (var i3 = 1; i3 < num2; i3++) {
            limits2.push(min2 + i3 / num2 * (max2 - min2));
          }
          limits2.push(max2);
        } else if (mode.substr(0, 1) === "l") {
          if (min2 <= 0) {
            throw new Error("Logarithmic scales are only possible for values > 0");
          }
          var min_log = Math.LOG10E * log(min2);
          var max_log = Math.LOG10E * log(max2);
          limits2.push(min2);
          for (var i$12 = 1; i$12 < num2; i$12++) {
            limits2.push(pow$1(10, min_log + i$12 / num2 * (max_log - min_log)));
          }
          limits2.push(max2);
        } else if (mode.substr(0, 1) === "q") {
          limits2.push(min2);
          for (var i$2 = 1; i$2 < num2; i$2++) {
            var p2 = (values.length - 1) * i$2 / num2;
            var pb = floor(p2);
            if (pb === p2) {
              limits2.push(values[pb]);
            } else {
              var pr = p2 - pb;
              limits2.push(values[pb] * (1 - pr) + values[pb + 1] * pr);
            }
          }
          limits2.push(max2);
        } else if (mode.substr(0, 1) === "k") {
          var cluster;
          var n2 = values.length;
          var assignments = new Array(n2);
          var clusterSizes = new Array(num2);
          var repeat = true;
          var nb_iters = 0;
          var centroids = null;
          centroids = [];
          centroids.push(min2);
          for (var i$3 = 1; i$3 < num2; i$3++) {
            centroids.push(min2 + i$3 / num2 * (max2 - min2));
          }
          centroids.push(max2);
          while (repeat) {
            for (var j2 = 0; j2 < num2; j2++) {
              clusterSizes[j2] = 0;
            }
            for (var i$4 = 0; i$4 < n2; i$4++) {
              var value = values[i$4];
              var mindist = Number.MAX_VALUE;
              var best = void 0;
              for (var j$1 = 0; j$1 < num2; j$1++) {
                var dist = abs$1(centroids[j$1] - value);
                if (dist < mindist) {
                  mindist = dist;
                  best = j$1;
                }
                clusterSizes[best]++;
                assignments[i$4] = best;
              }
            }
            var newCentroids = new Array(num2);
            for (var j$2 = 0; j$2 < num2; j$2++) {
              newCentroids[j$2] = null;
            }
            for (var i$5 = 0; i$5 < n2; i$5++) {
              cluster = assignments[i$5];
              if (newCentroids[cluster] === null) {
                newCentroids[cluster] = values[i$5];
              } else {
                newCentroids[cluster] += values[i$5];
              }
            }
            for (var j$3 = 0; j$3 < num2; j$3++) {
              newCentroids[j$3] *= 1 / clusterSizes[j$3];
            }
            repeat = false;
            for (var j$4 = 0; j$4 < num2; j$4++) {
              if (newCentroids[j$4] !== centroids[j$4]) {
                repeat = true;
                break;
              }
            }
            centroids = newCentroids;
            nb_iters++;
            if (nb_iters > 200) {
              repeat = false;
            }
          }
          var kClusters = {};
          for (var j$5 = 0; j$5 < num2; j$5++) {
            kClusters[j$5] = [];
          }
          for (var i$6 = 0; i$6 < n2; i$6++) {
            cluster = assignments[i$6];
            kClusters[cluster].push(values[i$6]);
          }
          var tmpKMeansBreaks = [];
          for (var j$6 = 0; j$6 < num2; j$6++) {
            tmpKMeansBreaks.push(kClusters[j$6][0]);
            tmpKMeansBreaks.push(kClusters[j$6][kClusters[j$6].length - 1]);
          }
          tmpKMeansBreaks = tmpKMeansBreaks.sort(function(a2, b2) {
            return a2 - b2;
          });
          limits2.push(tmpKMeansBreaks[0]);
          for (var i$7 = 1; i$7 < tmpKMeansBreaks.length; i$7 += 2) {
            var v2 = tmpKMeansBreaks[i$7];
            if (!isNaN(v2) && limits2.indexOf(v2) === -1) {
              limits2.push(v2);
            }
          }
        }
        return limits2;
      };
      var analyze_1 = { analyze, limits };
      var Color$3 = Color_1;
      var contrast = function(a2, b2) {
        a2 = new Color$3(a2);
        b2 = new Color$3(b2);
        var l1 = a2.luminance();
        var l2 = b2.luminance();
        return l1 > l2 ? (l1 + 0.05) / (l2 + 0.05) : (l2 + 0.05) / (l1 + 0.05);
      };
      var Color$2 = Color_1;
      var sqrt = Math.sqrt;
      var pow = Math.pow;
      var min = Math.min;
      var max = Math.max;
      var atan2 = Math.atan2;
      var abs = Math.abs;
      var cos = Math.cos;
      var sin = Math.sin;
      var exp = Math.exp;
      var PI = Math.PI;
      var deltaE = function(a2, b2, Kl, Kc, Kh) {
        if (Kl === void 0)
          Kl = 1;
        if (Kc === void 0)
          Kc = 1;
        if (Kh === void 0)
          Kh = 1;
        var rad2deg = function(rad) {
          return 360 * rad / (2 * PI);
        };
        var deg2rad = function(deg) {
          return 2 * PI * deg / 360;
        };
        a2 = new Color$2(a2);
        b2 = new Color$2(b2);
        var ref = Array.from(a2.lab());
        var L1 = ref[0];
        var a1 = ref[1];
        var b1 = ref[2];
        var ref$1 = Array.from(b2.lab());
        var L2 = ref$1[0];
        var a22 = ref$1[1];
        var b22 = ref$1[2];
        var avgL = (L1 + L2) / 2;
        var C1 = sqrt(pow(a1, 2) + pow(b1, 2));
        var C2 = sqrt(pow(a22, 2) + pow(b22, 2));
        var avgC = (C1 + C2) / 2;
        var G2 = 0.5 * (1 - sqrt(pow(avgC, 7) / (pow(avgC, 7) + pow(25, 7))));
        var a1p = a1 * (1 + G2);
        var a2p = a22 * (1 + G2);
        var C1p = sqrt(pow(a1p, 2) + pow(b1, 2));
        var C2p = sqrt(pow(a2p, 2) + pow(b22, 2));
        var avgCp = (C1p + C2p) / 2;
        var arctan1 = rad2deg(atan2(b1, a1p));
        var arctan2 = rad2deg(atan2(b22, a2p));
        var h1p = arctan1 >= 0 ? arctan1 : arctan1 + 360;
        var h2p = arctan2 >= 0 ? arctan2 : arctan2 + 360;
        var avgHp = abs(h1p - h2p) > 180 ? (h1p + h2p + 360) / 2 : (h1p + h2p) / 2;
        var T2 = 1 - 0.17 * cos(deg2rad(avgHp - 30)) + 0.24 * cos(deg2rad(2 * avgHp)) + 0.32 * cos(deg2rad(3 * avgHp + 6)) - 0.2 * cos(deg2rad(4 * avgHp - 63));
        var deltaHp = h2p - h1p;
        deltaHp = abs(deltaHp) <= 180 ? deltaHp : h2p <= h1p ? deltaHp + 360 : deltaHp - 360;
        deltaHp = 2 * sqrt(C1p * C2p) * sin(deg2rad(deltaHp) / 2);
        var deltaL = L2 - L1;
        var deltaCp = C2p - C1p;
        var sl = 1 + 0.015 * pow(avgL - 50, 2) / sqrt(20 + pow(avgL - 50, 2));
        var sc = 1 + 0.045 * avgCp;
        var sh = 1 + 0.015 * avgCp * T2;
        var deltaTheta = 30 * exp(-pow((avgHp - 275) / 25, 2));
        var Rc = 2 * sqrt(pow(avgCp, 7) / (pow(avgCp, 7) + pow(25, 7)));
        var Rt = -Rc * sin(2 * deg2rad(deltaTheta));
        var result = sqrt(pow(deltaL / (Kl * sl), 2) + pow(deltaCp / (Kc * sc), 2) + pow(deltaHp / (Kh * sh), 2) + Rt * (deltaCp / (Kc * sc)) * (deltaHp / (Kh * sh)));
        return max(0, min(100, result));
      };
      var Color$1 = Color_1;
      var distance = function(a2, b2, mode) {
        if (mode === void 0)
          mode = "lab";
        a2 = new Color$1(a2);
        b2 = new Color$1(b2);
        var l1 = a2.get(mode);
        var l2 = b2.get(mode);
        var sum_sq = 0;
        for (var i3 in l1) {
          var d2 = (l1[i3] || 0) - (l2[i3] || 0);
          sum_sq += d2 * d2;
        }
        return Math.sqrt(sum_sq);
      };
      var Color = Color_1;
      var valid = function() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        try {
          new (Function.prototype.bind.apply(Color, [null].concat(args)))();
          return true;
        } catch (e2) {
          return false;
        }
      };
      var chroma$1 = chroma_1;
      var scale = scale$2;
      var scales = {
        cool: function cool() {
          return scale([chroma$1.hsl(180, 1, 0.9), chroma$1.hsl(250, 0.7, 0.4)]);
        },
        hot: function hot() {
          return scale(["#000", "#f00", "#ff0", "#fff"]).mode("rgb");
        }
      };
      var colorbrewer = {
        OrRd: ["#fff7ec", "#fee8c8", "#fdd49e", "#fdbb84", "#fc8d59", "#ef6548", "#d7301f", "#b30000", "#7f0000"],
        PuBu: ["#fff7fb", "#ece7f2", "#d0d1e6", "#a6bddb", "#74a9cf", "#3690c0", "#0570b0", "#045a8d", "#023858"],
        BuPu: ["#f7fcfd", "#e0ecf4", "#bfd3e6", "#9ebcda", "#8c96c6", "#8c6bb1", "#88419d", "#810f7c", "#4d004b"],
        Oranges: ["#fff5eb", "#fee6ce", "#fdd0a2", "#fdae6b", "#fd8d3c", "#f16913", "#d94801", "#a63603", "#7f2704"],
        BuGn: ["#f7fcfd", "#e5f5f9", "#ccece6", "#99d8c9", "#66c2a4", "#41ae76", "#238b45", "#006d2c", "#00441b"],
        YlOrBr: ["#ffffe5", "#fff7bc", "#fee391", "#fec44f", "#fe9929", "#ec7014", "#cc4c02", "#993404", "#662506"],
        YlGn: ["#ffffe5", "#f7fcb9", "#d9f0a3", "#addd8e", "#78c679", "#41ab5d", "#238443", "#006837", "#004529"],
        Reds: ["#fff5f0", "#fee0d2", "#fcbba1", "#fc9272", "#fb6a4a", "#ef3b2c", "#cb181d", "#a50f15", "#67000d"],
        RdPu: ["#fff7f3", "#fde0dd", "#fcc5c0", "#fa9fb5", "#f768a1", "#dd3497", "#ae017e", "#7a0177", "#49006a"],
        Greens: ["#f7fcf5", "#e5f5e0", "#c7e9c0", "#a1d99b", "#74c476", "#41ab5d", "#238b45", "#006d2c", "#00441b"],
        YlGnBu: ["#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"],
        Purples: ["#fcfbfd", "#efedf5", "#dadaeb", "#bcbddc", "#9e9ac8", "#807dba", "#6a51a3", "#54278f", "#3f007d"],
        GnBu: ["#f7fcf0", "#e0f3db", "#ccebc5", "#a8ddb5", "#7bccc4", "#4eb3d3", "#2b8cbe", "#0868ac", "#084081"],
        Greys: ["#ffffff", "#f0f0f0", "#d9d9d9", "#bdbdbd", "#969696", "#737373", "#525252", "#252525", "#000000"],
        YlOrRd: ["#ffffcc", "#ffeda0", "#fed976", "#feb24c", "#fd8d3c", "#fc4e2a", "#e31a1c", "#bd0026", "#800026"],
        PuRd: ["#f7f4f9", "#e7e1ef", "#d4b9da", "#c994c7", "#df65b0", "#e7298a", "#ce1256", "#980043", "#67001f"],
        Blues: ["#f7fbff", "#deebf7", "#c6dbef", "#9ecae1", "#6baed6", "#4292c6", "#2171b5", "#08519c", "#08306b"],
        PuBuGn: ["#fff7fb", "#ece2f0", "#d0d1e6", "#a6bddb", "#67a9cf", "#3690c0", "#02818a", "#016c59", "#014636"],
        Viridis: ["#440154", "#482777", "#3f4a8a", "#31678e", "#26838f", "#1f9d8a", "#6cce5a", "#b6de2b", "#fee825"],
        Spectral: ["#9e0142", "#d53e4f", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#e6f598", "#abdda4", "#66c2a5", "#3288bd", "#5e4fa2"],
        RdYlGn: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee08b", "#ffffbf", "#d9ef8b", "#a6d96a", "#66bd63", "#1a9850", "#006837"],
        RdBu: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#f7f7f7", "#d1e5f0", "#92c5de", "#4393c3", "#2166ac", "#053061"],
        PiYG: ["#8e0152", "#c51b7d", "#de77ae", "#f1b6da", "#fde0ef", "#f7f7f7", "#e6f5d0", "#b8e186", "#7fbc41", "#4d9221", "#276419"],
        PRGn: ["#40004b", "#762a83", "#9970ab", "#c2a5cf", "#e7d4e8", "#f7f7f7", "#d9f0d3", "#a6dba0", "#5aae61", "#1b7837", "#00441b"],
        RdYlBu: ["#a50026", "#d73027", "#f46d43", "#fdae61", "#fee090", "#ffffbf", "#e0f3f8", "#abd9e9", "#74add1", "#4575b4", "#313695"],
        BrBG: ["#543005", "#8c510a", "#bf812d", "#dfc27d", "#f6e8c3", "#f5f5f5", "#c7eae5", "#80cdc1", "#35978f", "#01665e", "#003c30"],
        RdGy: ["#67001f", "#b2182b", "#d6604d", "#f4a582", "#fddbc7", "#ffffff", "#e0e0e0", "#bababa", "#878787", "#4d4d4d", "#1a1a1a"],
        PuOr: ["#7f3b08", "#b35806", "#e08214", "#fdb863", "#fee0b6", "#f7f7f7", "#d8daeb", "#b2abd2", "#8073ac", "#542788", "#2d004b"],
        Set2: ["#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3", "#a6d854", "#ffd92f", "#e5c494", "#b3b3b3"],
        Accent: ["#7fc97f", "#beaed4", "#fdc086", "#ffff99", "#386cb0", "#f0027f", "#bf5b17", "#666666"],
        Set1: ["#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00", "#ffff33", "#a65628", "#f781bf", "#999999"],
        Set3: ["#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462", "#b3de69", "#fccde5", "#d9d9d9", "#bc80bd", "#ccebc5", "#ffed6f"],
        Dark2: ["#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e", "#e6ab02", "#a6761d", "#666666"],
        Paired: ["#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928"],
        Pastel2: ["#b3e2cd", "#fdcdac", "#cbd5e8", "#f4cae4", "#e6f5c9", "#fff2ae", "#f1e2cc", "#cccccc"],
        Pastel1: ["#fbb4ae", "#b3cde3", "#ccebc5", "#decbe4", "#fed9a6", "#ffffcc", "#e5d8bd", "#fddaec", "#f2f2f2"]
      };
      for (var i2 = 0, list = Object.keys(colorbrewer); i2 < list.length; i2 += 1) {
        var key = list[i2];
        colorbrewer[key.toLowerCase()] = colorbrewer[key];
      }
      var colorbrewer_1 = colorbrewer;
      var chroma2 = chroma_1;
      chroma2.average = average;
      chroma2.bezier = bezier_1;
      chroma2.blend = blend_1;
      chroma2.cubehelix = cubehelix;
      chroma2.mix = chroma2.interpolate = mix$1;
      chroma2.random = random_1;
      chroma2.scale = scale$2;
      chroma2.analyze = analyze_1.analyze;
      chroma2.contrast = contrast;
      chroma2.deltaE = deltaE;
      chroma2.distance = distance;
      chroma2.limits = analyze_1.limits;
      chroma2.valid = valid;
      chroma2.scales = scales;
      chroma2.colors = w3cx11_1;
      chroma2.brewer = colorbrewer_1;
      var chroma_js = chroma2;
      return chroma_js;
    });
  }
});

// ../../ui/node_modules/react-walk-element-tree/lib/index.js
var require_lib2 = __commonJS({
  "../../ui/node_modules/react-walk-element-tree/lib/index.js"(exports) {
    "use strict";
    init_react();
    Object.defineProperty(exports, "__esModule", { value: true });
    var react_1 = require_react();
    var alwaysFalse = () => false;
    function WalkReactElementTree(transformer, skipIfSatisfy = alwaysFalse) {
      return function walker(node) {
        if (skipIfSatisfy(node))
          return node;
        const tNode = transformer(node);
        const isHasChild = tNode && tNode.props && tNode.props.children !== void 0;
        if (isHasChild) {
          const { children } = tNode.props;
          const tChildren = Array.isArray(children) ? children.map(walker) : walker(children);
          return react_1.cloneElement(tNode, { children: tChildren });
        }
        return tNode;
      };
    }
    exports.default = WalkReactElementTree;
  }
});

// ../../../node_modules/object-assign/index.js
var require_object_assign2 = __commonJS({
  "../../../node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    init_react();
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  }
});

// ../../../node_modules/react/cjs/react.development.js
var require_react_development = __commonJS({
  "../../../node_modules/react/cjs/react.development.js"(exports) {
    "use strict";
    init_react();
    if (true) {
      (function() {
        "use strict";
        var _assign = require_object_assign2();
        var ReactVersion = "17.0.2";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        exports.Fragment = 60107;
        exports.StrictMode = 60108;
        exports.Profiler = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        exports.Suspense = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          exports.Fragment = symbolFor("react.fragment");
          exports.StrictMode = symbolFor("react.strict_mode");
          exports.Profiler = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          exports.Suspense = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var ReactCurrentDispatcher = {
          current: null
        };
        var ReactCurrentBatchConfig = {
          transition: 0
        };
        var ReactCurrentOwner = {
          current: null
        };
        var ReactDebugCurrentFrame = {};
        var currentExtraStackFrame = null;
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack;
          }
        }
        {
          ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
            {
              currentExtraStackFrame = stack;
            }
          };
          ReactDebugCurrentFrame.getCurrentStack = null;
          ReactDebugCurrentFrame.getStackAddendum = function() {
            var stack = "";
            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame;
            }
            var impl = ReactDebugCurrentFrame.getCurrentStack;
            if (impl) {
              stack += impl() || "";
            }
            return stack;
          };
        }
        var IsSomeRendererActing = {
          current: false
        };
        var ReactSharedInternals = {
          ReactCurrentDispatcher,
          ReactCurrentBatchConfig,
          ReactCurrentOwner,
          IsSomeRendererActing,
          assign: _assign
        };
        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
        }
        function warn3(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var didWarnStateUpdateForUnmountedComponent = {};
        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor;
            var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
            var warningKey = componentName + "." + callerName;
            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return;
            }
            error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
            didWarnStateUpdateForUnmountedComponent[warningKey] = true;
          }
        }
        var ReactNoopUpdateQueue = {
          isMounted: function(publicInstance) {
            return false;
          },
          enqueueForceUpdate: function(publicInstance, callback, callerName) {
            warnNoop(publicInstance, "forceUpdate");
          },
          enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
            warnNoop(publicInstance, "replaceState");
          },
          enqueueSetState: function(publicInstance, partialState, callback, callerName) {
            warnNoop(publicInstance, "setState");
          }
        };
        var emptyObject = {};
        {
          Object.freeze(emptyObject);
        }
        function Component(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        Component.prototype.isReactComponent = {};
        Component.prototype.setState = function(partialState, callback) {
          if (!(typeof partialState === "object" || typeof partialState === "function" || partialState == null)) {
            {
              throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
          }
          this.updater.enqueueSetState(this, partialState, callback, "setState");
        };
        Component.prototype.forceUpdate = function(callback) {
          this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
        };
        {
          var deprecatedAPIs = {
            isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
            replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
          };
          var defineDeprecationWarning = function(methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function() {
                warn3("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                return void 0;
              }
            });
          };
          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
            }
          }
        }
        function ComponentDummy() {
        }
        ComponentDummy.prototype = Component.prototype;
        function PureComponent(props, context, updater) {
          this.props = props;
          this.context = context;
          this.refs = emptyObject;
          this.updater = updater || ReactNoopUpdateQueue;
        }
        var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
        pureComponentPrototype.constructor = PureComponent;
        _assign(pureComponentPrototype, Component.prototype);
        pureComponentPrototype.isPureReactComponent = true;
        function createRef2() {
          var refObject = {
            current: null
          };
          {
            Object.seal(refObject);
          }
          return refObject;
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case exports.Fragment:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case exports.Profiler:
              return "Profiler";
            case exports.StrictMode:
              return "StrictMode";
            case exports.Suspense:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true
        };
        var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
        {
          didWarnAboutStringRefs = {};
        }
        function hasValidRef(config2) {
          {
            if (hasOwnProperty.call(config2, "ref")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.ref !== void 0;
        }
        function hasValidKey(config2) {
          {
            if (hasOwnProperty.call(config2, "key")) {
              var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
              if (getter && getter.isReactWarning) {
                return false;
              }
            }
          }
          return config2.key !== void 0;
        }
        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function() {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true;
                error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingKey.isReactWarning = true;
          Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: true
          });
        }
        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function() {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true;
                error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
              }
            }
          };
          warnAboutAccessingRef.isReactWarning = true;
          Object.defineProperty(props, "ref", {
            get: warnAboutAccessingRef,
            configurable: true
          });
        }
        function warnIfStringRefCannotBeAutoConverted(config2) {
          {
            if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
              var componentName = getComponentName(ReactCurrentOwner.current.type);
              if (!didWarnAboutStringRefs[componentName]) {
                error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                didWarnAboutStringRefs[componentName] = true;
              }
            }
          }
        }
        var ReactElement = function(type, key, ref, self2, source, owner, props) {
          var element = {
            $$typeof: REACT_ELEMENT_TYPE,
            type,
            key,
            ref,
            props,
            _owner: owner
          };
          {
            element._store = {};
            Object.defineProperty(element._store, "validated", {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false
            });
            Object.defineProperty(element, "_self", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self2
            });
            Object.defineProperty(element, "_source", {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source
            });
            if (Object.freeze) {
              Object.freeze(element.props);
              Object.freeze(element);
            }
          }
          return element;
        };
        function createElement3(type, config2, children) {
          var propName;
          var props = {};
          var key = null;
          var ref = null;
          var self2 = null;
          var source = null;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              {
                warnIfStringRefCannotBeAutoConverted(config2);
              }
            }
            if (hasValidKey(config2)) {
              key = "" + config2.key;
            }
            self2 = config2.__self === void 0 ? null : config2.__self;
            source = config2.__source === void 0 ? null : config2.__source;
            for (propName in config2) {
              if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                props[propName] = config2[propName];
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            {
              if (Object.freeze) {
                Object.freeze(childArray);
              }
            }
            props.children = childArray;
          }
          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps;
            for (propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
          }
          {
            if (key || ref) {
              var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
              if (key) {
                defineKeyPropWarningGetter(props, displayName);
              }
              if (ref) {
                defineRefPropWarningGetter(props, displayName);
              }
            }
          }
          return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
          return newElement;
        }
        function cloneElement2(element, config2, children) {
          if (!!(element === null || element === void 0)) {
            {
              throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
          }
          var propName;
          var props = _assign({}, element.props);
          var key = element.key;
          var ref = element.ref;
          var self2 = element._self;
          var source = element._source;
          var owner = element._owner;
          if (config2 != null) {
            if (hasValidRef(config2)) {
              ref = config2.ref;
              owner = ReactCurrentOwner.current;
            }
            if (hasValidKey(config2)) {
              key = "" + config2.key;
            }
            var defaultProps;
            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps;
            }
            for (propName in config2) {
              if (hasOwnProperty.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                if (config2[propName] === void 0 && defaultProps !== void 0) {
                  props[propName] = defaultProps[propName];
                } else {
                  props[propName] = config2[propName];
                }
              }
            }
          }
          var childrenLength = arguments.length - 2;
          if (childrenLength === 1) {
            props.children = children;
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength);
            for (var i2 = 0; i2 < childrenLength; i2++) {
              childArray[i2] = arguments[i2 + 2];
            }
            props.children = childArray;
          }
          return ReactElement(element.type, key, ref, self2, source, owner, props);
        }
        function isValidElement2(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        var SEPARATOR = ".";
        var SUBSEPARATOR = ":";
        function escape(key) {
          var escapeRegex = /[=:]/g;
          var escaperLookup = {
            "=": "=0",
            ":": "=2"
          };
          var escapedString = key.replace(escapeRegex, function(match) {
            return escaperLookup[match];
          });
          return "$" + escapedString;
        }
        var didWarnAboutMaps = false;
        var userProvidedKeyEscapeRegex = /\/+/g;
        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, "$&/");
        }
        function getElementKey(element, index) {
          if (typeof element === "object" && element !== null && element.key != null) {
            return escape("" + element.key);
          }
          return index.toString(36);
        }
        function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
          var type = typeof children;
          if (type === "undefined" || type === "boolean") {
            children = null;
          }
          var invokeCallback = false;
          if (children === null) {
            invokeCallback = true;
          } else {
            switch (type) {
              case "string":
              case "number":
                invokeCallback = true;
                break;
              case "object":
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true;
                }
            }
          }
          if (invokeCallback) {
            var _child = children;
            var mappedChild = callback(_child);
            var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
            if (Array.isArray(mappedChild)) {
              var escapedChildKey = "";
              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + "/";
              }
              mapIntoArray(mappedChild, array, escapedChildKey, "", function(c2) {
                return c2;
              });
            } else if (mappedChild != null) {
              if (isValidElement2(mappedChild)) {
                mappedChild = cloneAndReplaceKey(mappedChild, escapedPrefix + (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? escapeUserProvidedKey("" + mappedChild.key) + "/" : "") + childKey);
              }
              array.push(mappedChild);
            }
            return 1;
          }
          var child;
          var nextName;
          var subtreeCount = 0;
          var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
          if (Array.isArray(children)) {
            for (var i2 = 0; i2 < children.length; i2++) {
              child = children[i2];
              nextName = nextNamePrefix + getElementKey(child, i2);
              subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
            }
          } else {
            var iteratorFn = getIteratorFn(children);
            if (typeof iteratorFn === "function") {
              var iterableChildren = children;
              {
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn3("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
              }
              var iterator = iteratorFn.call(iterableChildren);
              var step;
              var ii = 0;
              while (!(step = iterator.next()).done) {
                child = step.value;
                nextName = nextNamePrefix + getElementKey(child, ii++);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else if (type === "object") {
              var childrenString = "" + children;
              {
                {
                  throw Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
                }
              }
            }
          }
          return subtreeCount;
        }
        function mapChildren(children, func, context) {
          if (children == null) {
            return children;
          }
          var result = [];
          var count = 0;
          mapIntoArray(children, result, "", "", function(child) {
            return func.call(context, child, count++);
          });
          return result;
        }
        function countChildren(children) {
          var n2 = 0;
          mapChildren(children, function() {
            n2++;
          });
          return n2;
        }
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(children, function() {
            forEachFunc.apply(this, arguments);
          }, forEachContext);
        }
        function toArray(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        }
        function onlyChild(children) {
          if (!isValidElement2(children)) {
            {
              throw Error("React.Children.only expected to receive a single React element child.");
            }
          }
          return children;
        }
        function createContext3(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === void 0) {
            calculateChangedBits = null;
          } else {
            {
              if (calculateChangedBits !== null && typeof calculateChangedBits !== "function") {
                error("createContext: Expected the optional second argument to be a function. Instead received: %s", calculateChangedBits);
              }
            }
          }
          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            _threadCount: 0,
            Provider: null,
            Consumer: null
          };
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context
          };
          var hasWarnedAboutUsingNestedContextConsumers = false;
          var hasWarnedAboutUsingConsumerProvider = false;
          var hasWarnedAboutDisplayNameOnConsumer = false;
          {
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits
            };
            Object.defineProperties(Consumer, {
              Provider: {
                get: function() {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true;
                    error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                  }
                  return context.Provider;
                },
                set: function(_Provider) {
                  context.Provider = _Provider;
                }
              },
              _currentValue: {
                get: function() {
                  return context._currentValue;
                },
                set: function(_currentValue) {
                  context._currentValue = _currentValue;
                }
              },
              _currentValue2: {
                get: function() {
                  return context._currentValue2;
                },
                set: function(_currentValue2) {
                  context._currentValue2 = _currentValue2;
                }
              },
              _threadCount: {
                get: function() {
                  return context._threadCount;
                },
                set: function(_threadCount) {
                  context._threadCount = _threadCount;
                }
              },
              Consumer: {
                get: function() {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true;
                    error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                  return context.Consumer;
                }
              },
              displayName: {
                get: function() {
                  return context.displayName;
                },
                set: function(displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn3("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                    hasWarnedAboutDisplayNameOnConsumer = true;
                  }
                }
              }
            });
            context.Consumer = Consumer;
          }
          {
            context._currentRenderer = null;
            context._currentRenderer2 = null;
          }
          return context;
        }
        var Uninitialized = -1;
        var Pending = 0;
        var Resolved = 1;
        var Rejected = 2;
        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result;
            var thenable = ctor();
            var pending = payload;
            pending._status = Pending;
            pending._result = thenable;
            thenable.then(function(moduleObject) {
              if (payload._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === void 0) {
                    error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                var resolved = payload;
                resolved._status = Resolved;
                resolved._result = defaultExport;
              }
            }, function(error2) {
              if (payload._status === Pending) {
                var rejected = payload;
                rejected._status = Rejected;
                rejected._result = error2;
              }
            });
          }
          if (payload._status === Resolved) {
            return payload._result;
          } else {
            throw payload._result;
          }
        }
        function lazy2(ctor) {
          var payload = {
            _status: -1,
            _result: ctor
          };
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer
          };
          {
            var defaultProps;
            var propTypes;
            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function() {
                  return defaultProps;
                },
                set: function(newDefaultProps) {
                  error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  defaultProps = newDefaultProps;
                  Object.defineProperty(lazyType, "defaultProps", {
                    enumerable: true
                  });
                }
              },
              propTypes: {
                configurable: true,
                get: function() {
                  return propTypes;
                },
                set: function(newPropTypes) {
                  error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                  propTypes = newPropTypes;
                  Object.defineProperty(lazyType, "propTypes", {
                    enumerable: true
                  });
                }
              }
            });
          }
          return lazyType;
        }
        function forwardRef3(render3) {
          {
            if (render3 != null && render3.$$typeof === REACT_MEMO_TYPE) {
              error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
            } else if (typeof render3 !== "function") {
              error("forwardRef requires a render function but was given %s.", render3 === null ? "null" : typeof render3);
            } else {
              if (render3.length !== 0 && render3.length !== 2) {
                error("forwardRef render functions accept exactly two parameters: props and ref. %s", render3.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
              }
            }
            if (render3 != null) {
              if (render3.defaultProps != null || render3.propTypes != null) {
                error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
              }
            }
          }
          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render3
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (render3.displayName == null) {
                  render3.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        var enableScopeAPI = false;
        function isValidElementType2(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function memo(type, compare) {
          {
            if (!isValidElementType2(type)) {
              error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
            }
          }
          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type,
            compare: compare === void 0 ? null : compare
          };
          {
            var ownName;
            Object.defineProperty(elementType, "displayName", {
              enumerable: false,
              configurable: true,
              get: function() {
                return ownName;
              },
              set: function(name) {
                ownName = name;
                if (type.displayName == null) {
                  type.displayName = name;
                }
              }
            });
          }
          return elementType;
        }
        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current;
          if (!(dispatcher !== null)) {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
          return dispatcher;
        }
        function useContext3(Context2, unstable_observedBits) {
          var dispatcher = resolveDispatcher();
          {
            if (unstable_observedBits !== void 0) {
              error("useContext() second argument is reserved for future use in React. Passing it is not supported. You passed: %s.%s", unstable_observedBits, typeof unstable_observedBits === "number" && Array.isArray(arguments[2]) ? "\n\nDid you call array.map(useContext)? Calling Hooks inside a loop is not supported. Learn more at https://reactjs.org/link/rules-of-hooks" : "");
            }
            if (Context2._context !== void 0) {
              var realContext = Context2._context;
              if (realContext.Consumer === Context2) {
                error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
              } else if (realContext.Provider === Context2) {
                error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
              }
            }
          }
          return dispatcher.useContext(Context2, unstable_observedBits);
        }
        function useState3(initialState) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useState(initialState);
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useReducer(reducer, initialArg, init);
        }
        function useRef3(initialValue) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useRef(initialValue);
        }
        function useEffect4(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useEffect(create2, deps);
        }
        function useLayoutEffect2(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useLayoutEffect(create2, deps);
        }
        function useCallback3(callback, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useCallback(callback, deps);
        }
        function useMemo4(create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useMemo(create2, deps);
        }
        function useImperativeHandle(ref, create2, deps) {
          var dispatcher = resolveDispatcher();
          return dispatcher.useImperativeHandle(ref, create2, deps);
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDebugValue(value, formatterFn);
          }
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher$1.current;
            ReactCurrentDispatcher$1.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher$1.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component2) {
          var prototype = Component2.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case exports.Suspense:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location2, componentName, element) {
          {
            var has = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              setExtraStackFrame(stack);
            } else {
              setExtraStackFrame(null);
            }
          }
        }
        var propTypesMisspellWarningShown;
        {
          propTypesMisspellWarningShown = false;
        }
        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type);
            if (name) {
              return "\n\nCheck the render method of `" + name + "`.";
            }
          }
          return "";
        }
        function getSourceInfoErrorAddendum(source) {
          if (source !== void 0) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, "");
            var lineNumber = source.lineNumber;
            return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
          }
          return "";
        }
        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== void 0) {
            return getSourceInfoErrorAddendum(elementProps.__source);
          }
          return "";
        }
        var ownerHasKeyUseWarning = {};
        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum();
          if (!info) {
            var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
            if (parentName) {
              info = "\n\nCheck the top-level render call using <" + parentName + ">.";
            }
          }
          return info;
        }
        function validateExplicitKey(element, parentType) {
          if (!element._store || element._store.validated || element.key != null) {
            return;
          }
          element._store.validated = true;
          var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return;
          }
          ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
          var childOwner = "";
          if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
            childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
          }
          {
            setCurrentlyValidatingElement$1(element);
            error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
            setCurrentlyValidatingElement$1(null);
          }
        }
        function validateChildKeys(node, parentType) {
          if (typeof node !== "object") {
            return;
          }
          if (Array.isArray(node)) {
            for (var i2 = 0; i2 < node.length; i2++) {
              var child = node[i2];
              if (isValidElement2(child)) {
                validateExplicitKey(child, parentType);
              }
            }
          } else if (isValidElement2(node)) {
            if (node._store) {
              node._store.validated = true;
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node);
            if (typeof iteratorFn === "function") {
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node);
                var step;
                while (!(step = iterator.next()).done) {
                  if (isValidElement2(step.value)) {
                    validateExplicitKey(step.value, parentType);
                  }
                }
              }
            }
          }
        }
        function validatePropTypes(element) {
          {
            var type = element.type;
            if (type === null || type === void 0 || typeof type === "string") {
              return;
            }
            var propTypes;
            if (typeof type === "function") {
              propTypes = type.propTypes;
            } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_MEMO_TYPE)) {
              propTypes = type.propTypes;
            } else {
              return;
            }
            if (propTypes) {
              var name = getComponentName(type);
              checkPropTypes(propTypes, element.props, "prop", name, element);
            } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
              propTypesMisspellWarningShown = true;
              var _name = getComponentName(type);
              error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
            }
            if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
            }
          }
        }
        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props);
            for (var i2 = 0; i2 < keys.length; i2++) {
              var key = keys[i2];
              if (key !== "children" && key !== "key") {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                setCurrentlyValidatingElement$1(null);
                break;
              }
            }
            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment);
              error("Invalid attribute `ref` supplied to `React.Fragment`.");
              setCurrentlyValidatingElement$1(null);
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType2(type);
          if (!validType) {
            var info = "";
            if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
              info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            }
            var sourceInfo = getSourceInfoErrorAddendumForProps(props);
            if (sourceInfo) {
              info += sourceInfo;
            } else {
              info += getDeclarationErrorAddendum();
            }
            var typeString;
            if (type === null) {
              typeString = "null";
            } else if (Array.isArray(type)) {
              typeString = "array";
            } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
              typeString = "<" + (getComponentName(type.type) || "Unknown") + " />";
              info = " Did you accidentally export a JSX literal instead of a component?";
            } else {
              typeString = typeof type;
            }
            {
              error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
            }
          }
          var element = createElement3.apply(this, arguments);
          if (element == null) {
            return element;
          }
          if (validType) {
            for (var i2 = 2; i2 < arguments.length; i2++) {
              validateChildKeys(arguments[i2], type);
            }
          }
          if (type === exports.Fragment) {
            validateFragmentProps(element);
          } else {
            validatePropTypes(element);
          }
          return element;
        }
        var didWarnAboutDeprecatedCreateFactory = false;
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type);
          validatedFactory.type = type;
          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true;
              warn3("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
            }
            Object.defineProperty(validatedFactory, "type", {
              enumerable: false,
              get: function() {
                warn3("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                Object.defineProperty(this, "type", {
                  value: type
                });
                return type;
              }
            });
          }
          return validatedFactory;
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement2.apply(this, arguments);
          for (var i2 = 2; i2 < arguments.length; i2++) {
            validateChildKeys(arguments[i2], newElement.type);
          }
          validatePropTypes(newElement);
          return newElement;
        }
        {
          try {
            var frozenObject = Object.freeze({});
            /* @__PURE__ */ new Map([[frozenObject, null]]);
            /* @__PURE__ */ new Set([frozenObject]);
          } catch (e2) {
          }
        }
        var createElement$1 = createElementWithValidation;
        var cloneElement$1 = cloneElementWithValidation;
        var createFactory = createFactoryWithValidation;
        var Children2 = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray,
          only: onlyChild
        };
        exports.Children = Children2;
        exports.Component = Component;
        exports.PureComponent = PureComponent;
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
        exports.cloneElement = cloneElement$1;
        exports.createContext = createContext3;
        exports.createElement = createElement$1;
        exports.createFactory = createFactory;
        exports.createRef = createRef2;
        exports.forwardRef = forwardRef3;
        exports.isValidElement = isValidElement2;
        exports.lazy = lazy2;
        exports.memo = memo;
        exports.useCallback = useCallback3;
        exports.useContext = useContext3;
        exports.useDebugValue = useDebugValue;
        exports.useEffect = useEffect4;
        exports.useImperativeHandle = useImperativeHandle;
        exports.useLayoutEffect = useLayoutEffect2;
        exports.useMemo = useMemo4;
        exports.useReducer = useReducer;
        exports.useRef = useRef3;
        exports.useState = useState3;
        exports.version = ReactVersion;
      })();
    }
  }
});

// ../../../node_modules/react/index.js
var require_react2 = __commonJS({
  "../../../node_modules/react/index.js"(exports, module) {
    "use strict";
    init_react();
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_development();
    }
  }
});

// ../../../node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "../../../node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    init_react();
    if (true) {
      (function() {
        "use strict";
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var requestHostCallback;
        var requestHostTimeout;
        var cancelHostTimeout;
        var requestPaint;
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        if (typeof window === "undefined" || typeof MessageChannel !== "function") {
          var _callback = null;
          var _timeoutID = null;
          var _flushCallback = function() {
            if (_callback !== null) {
              try {
                var currentTime = exports.unstable_now();
                var hasRemainingTime = true;
                _callback(hasRemainingTime, currentTime);
                _callback = null;
              } catch (e2) {
                setTimeout(_flushCallback, 0);
                throw e2;
              }
            }
          };
          requestHostCallback = function(cb) {
            if (_callback !== null) {
              setTimeout(requestHostCallback, 0, cb);
            } else {
              _callback = cb;
              setTimeout(_flushCallback, 0);
            }
          };
          requestHostTimeout = function(cb, ms) {
            _timeoutID = setTimeout(cb, ms);
          };
          cancelHostTimeout = function() {
            clearTimeout(_timeoutID);
          };
          exports.unstable_shouldYield = function() {
            return false;
          };
          requestPaint = exports.unstable_forceFrameRate = function() {
          };
        } else {
          var _setTimeout = window.setTimeout;
          var _clearTimeout = window.clearTimeout;
          if (typeof console !== "undefined") {
            var requestAnimationFrame3 = window.requestAnimationFrame;
            var cancelAnimationFrame3 = window.cancelAnimationFrame;
            if (typeof requestAnimationFrame3 !== "function") {
              console["error"]("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
            if (typeof cancelAnimationFrame3 !== "function") {
              console["error"]("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var yieldInterval = 5;
          var deadline = 0;
          {
            exports.unstable_shouldYield = function() {
              return exports.unstable_now() >= deadline;
            };
            requestPaint = function() {
            };
          }
          exports.unstable_forceFrameRate = function(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              yieldInterval = Math.floor(1e3 / fps);
            } else {
              yieldInterval = 5;
            }
          };
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              deadline = currentTime + yieldInterval;
              var hasTimeRemaining = true;
              try {
                var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
                if (!hasMoreWork) {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                } else {
                  port.postMessage(null);
                }
              } catch (error) {
                port.postMessage(null);
                throw error;
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          requestHostCallback = function(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              port.postMessage(null);
            }
          };
          requestHostTimeout = function(callback, ms) {
            taskTimeoutID = _setTimeout(function() {
              callback(exports.unstable_now());
            }, ms);
          };
          cancelHostTimeout = function() {
            _clearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          };
        }
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          var first = heap[0];
          return first === void 0 ? null : first;
        }
        function pop(heap) {
          var first = heap[0];
          if (first !== void 0) {
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          } else {
            return null;
          }
        }
        function siftUp(heap, node, i2) {
          var index = i2;
          while (true) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (parent !== void 0 && compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i2) {
          var index = i2;
          var length = heap.length;
          while (index < length) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (left !== void 0 && compare(left, node) < 0) {
              if (right !== void 0 && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (right !== void 0 && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a2, b2) {
          var diff = a2.sortIndex - b2.sortIndex;
          return diff !== 0 ? diff : a2.id - b2.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms) {
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime = currentTime + delay;
            } else {
              startTime = currentTime;
            }
          } else {
            startTime = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime,
            expirationTime,
            sortIndex: -1
          };
          if (startTime > currentTime) {
            newTask.sortIndex = startTime;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_wrapCallback = unstable_wrapCallback;
      })();
    }
  }
});

// ../../../node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "../../../node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    init_react();
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  }
});

// ../../../node_modules/scheduler/cjs/scheduler-tracing.development.js
var require_scheduler_tracing_development = __commonJS({
  "../../../node_modules/scheduler/cjs/scheduler-tracing.development.js"(exports) {
    "use strict";
    init_react();
    if (true) {
      (function() {
        "use strict";
        var DEFAULT_THREAD_ID = 0;
        var interactionIDCounter = 0;
        var threadIDCounter = 0;
        exports.__interactionsRef = null;
        exports.__subscriberRef = null;
        {
          exports.__interactionsRef = {
            current: /* @__PURE__ */ new Set()
          };
          exports.__subscriberRef = {
            current: null
          };
        }
        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current;
          exports.__interactionsRef.current = /* @__PURE__ */ new Set();
          try {
            return callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;
          }
        }
        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current;
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter;
        }
        function unstable_trace(name, timestamp, callback) {
          var threadID = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : DEFAULT_THREAD_ID;
          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name,
            timestamp
          };
          var prevInteractions = exports.__interactionsRef.current;
          var interactions = new Set(prevInteractions);
          interactions.add(interaction);
          exports.__interactionsRef.current = interactions;
          var subscriber = exports.__subscriberRef.current;
          var returnValue;
          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction);
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID);
              }
            } finally {
              try {
                returnValue = callback();
              } finally {
                exports.__interactionsRef.current = prevInteractions;
                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID);
                  }
                } finally {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                }
              }
            }
          }
          return returnValue;
        }
        function unstable_wrap(callback) {
          var threadID = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : DEFAULT_THREAD_ID;
          var wrappedInteractions = exports.__interactionsRef.current;
          var subscriber = exports.__subscriberRef.current;
          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID);
          }
          wrappedInteractions.forEach(function(interaction) {
            interaction.__count++;
          });
          var hasRun = false;
          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current;
            exports.__interactionsRef.current = wrappedInteractions;
            subscriber = exports.__subscriberRef.current;
            try {
              var returnValue;
              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID);
                }
              } finally {
                try {
                  returnValue = callback.apply(void 0, arguments);
                } finally {
                  exports.__interactionsRef.current = prevInteractions;
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID);
                  }
                }
              }
              return returnValue;
            } finally {
              if (!hasRun) {
                hasRun = true;
                wrappedInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  }
                });
              }
            }
          }
          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current;
            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID);
              }
            } finally {
              wrappedInteractions.forEach(function(interaction) {
                interaction.__count--;
                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction);
                }
              });
            }
          };
          return wrapped;
        }
        var subscribers = null;
        {
          subscribers = /* @__PURE__ */ new Set();
        }
        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted,
                onInteractionTraced,
                onWorkCanceled,
                onWorkScheduled,
                onWorkStarted,
                onWorkStopped
              };
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber);
            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null;
            }
          }
        }
        function onInteractionTraced(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionTraced(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStarted(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkStopped(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false;
          var caughtError = null;
          subscribers.forEach(function(subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID);
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true;
                caughtError = error;
              }
            }
          });
          if (didCatchError) {
            throw caughtError;
          }
        }
        exports.unstable_clear = unstable_clear;
        exports.unstable_getCurrent = unstable_getCurrent;
        exports.unstable_getThreadID = unstable_getThreadID;
        exports.unstable_subscribe = unstable_subscribe;
        exports.unstable_trace = unstable_trace;
        exports.unstable_unsubscribe = unstable_unsubscribe;
        exports.unstable_wrap = unstable_wrap;
      })();
    }
  }
});

// ../../../node_modules/scheduler/tracing.js
var require_tracing = __commonJS({
  "../../../node_modules/scheduler/tracing.js"(exports, module) {
    "use strict";
    init_react();
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_tracing_development();
    }
  }
});

// ../../../node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "../../../node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    init_react();
    if (true) {
      (function() {
        "use strict";
        var React5 = require_react2();
        var _assign = require_object_assign2();
        var Scheduler = require_scheduler();
        var tracing = require_tracing();
        var ReactSharedInternals = React5.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function warn3(format) {
          {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }
            printWarning("warn", format, args);
          }
        }
        function error(format) {
          {
            for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            printWarning("error", format, args);
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return "" + item;
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        if (!React5) {
          {
            throw Error("ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.");
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment2 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var FundamentalComponent = 20;
        var ScopeComponent = 21;
        var Block = 22;
        var OffscreenComponent = 23;
        var LegacyHiddenComponent = 24;
        var enableProfilerTimer = true;
        var enableFundamentalAPI = false;
        var enableNewReconciler = false;
        var warnAboutStringRefs = false;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i2 = 0; i2 < dependencies.length; i2++) {
            allNativeEvents.add(dependencies[i2]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var ROOT_ATTRIBUTE_NAME = "data-reactroot";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, RESERVED, false, name, null, false, false);
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name.toLowerCase(), null, false, false);
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, name, null, false, false);
        });
        [
          "allowFullScreen",
          "async",
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, name.toLowerCase(), null, false, false);
        });
        [
          "checked",
          "multiple",
          "muted",
          "selected"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, name, null, false, false);
        });
        [
          "capture",
          "download"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, name, null, false, false);
        });
        [
          "cols",
          "rows",
          "size",
          "span"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, name, null, false, false);
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(name, NUMERIC, false, name.toLowerCase(), null, false, false);
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, null, false, false);
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/1999/xlink", false, false);
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(name, STRING, false, attributeName, "http://www.w3.org/XML/1998/namespace", false, false);
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, false, false);
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord("xlinkHref", STRING, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, attributeName.toLowerCase(), null, true, true);
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (isOpaqueHydratingObject(expected)) {
              return expected;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var MAYBE_ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog
                }),
                info: _assign({}, props, {
                  value: prevInfo
                }),
                warn: _assign({}, props, {
                  value: prevWarn
                }),
                error: _assign({}, props, {
                  value: prevError
                }),
                group: _assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x2) {
                var match = x2.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x2) {
                  control = x2;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x2) {
                  control = x2;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x2) {
                control = x2;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s2 = sampleLines.length - 1;
              var c2 = controlLines.length - 1;
              while (s2 >= 1 && c2 >= 0 && sampleLines[s2] !== controlLines[c2]) {
                c2--;
              }
              for (; s2 >= 1 && c2 >= 0; s2--, c2--) {
                if (sampleLines[s2] !== controlLines[c2]) {
                  if (s2 !== 1 || c2 !== 1) {
                    do {
                      s2--;
                      c2--;
                      if (c2 < 0 || sampleLines[s2] !== controlLines[c2]) {
                        var _frame = "\n" + sampleLines[s2].replace(" at new ", " at ");
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s2 >= 1 && c2 >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x2) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case Block:
              return describeFunctionComponentFrame(fiber.type._render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x2) {
            return "\nError generating stack: " + x2.message + "\n" + x2.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentName(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentName(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                return getComponentName(type.type);
              case REACT_BLOCK_TYPE:
                return getComponentName(type._render);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentName(init(payload));
                } catch (x2) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentName(owner.type);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function getIsRendering() {
          {
            return isRendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "object":
            case "string":
            case "undefined":
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e2) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = _assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i2 = 0; i2 < group.length; i2++) {
              var otherNode = group[i2];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                {
                  throw Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (type !== "number" || getActiveElement(node.ownerDocument) !== node) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        function flattenChildren(children) {
          var content = "";
          React5.Children.forEach(children, function(child) {
            if (child == null) {
              return;
            }
            content += child;
          });
          return content;
        }
        function validateProps(element, props) {
          {
            if (typeof props.children === "object" && props.children !== null) {
              React5.Children.forEach(props.children, function(child) {
                if (child == null) {
                  return;
                }
                if (typeof child === "string" || typeof child === "number") {
                  return;
                }
                if (typeof child.type !== "string") {
                  return;
                }
                if (!didWarnInvalidChild) {
                  didWarnInvalidChild = true;
                  error("Only strings and numbers are supported as <option> children.");
                }
              });
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        function getHostProps$1(element, props) {
          var hostProps = _assign({
            children: void 0
          }, props);
          var content = flattenChildren(props.children);
          if (content) {
            hostProps.children = content;
          }
          return hostProps;
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i2 = 0; i2 < valuePropNames.length; i2++) {
              var propName = valuePropNames[i2];
              if (props[propName] == null) {
                continue;
              }
              var isArray2 = Array.isArray(props[propName]);
              if (props.multiple && !isArray2) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && isArray2) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i2 = 0; i2 < selectedValues.length; i2++) {
              selectedValue["$" + selectedValues[i2]] = true;
            }
            for (var _i = 0; _i < options2.length; _i++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
              if (options2[_i].selected !== selected) {
                options2[_i].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              if (options2[_i2].value === _selectedValue) {
                options2[_i2].selected = true;
                if (setDefaultSelected) {
                  options2[_i2].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i2].disabled) {
                defaultSelected = options2[_i2];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$2(element, props) {
          return _assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$3(element, props) {
          var node = element;
          if (!(props.dangerouslySetInnerHTML == null)) {
            {
              throw Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
          }
          var hostProps = _assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (!(defaultValue == null)) {
                  {
                    throw Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                }
                if (Array.isArray(children)) {
                  if (!(children.length <= 1)) {
                    {
                      throw Error("<textarea> can only have at most one child.");
                    }
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        var Namespaces = {
          html: HTML_NAMESPACE,
          mathml: MATH_NAMESPACE,
          svg: SVG_NAMESPACE
        };
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === Namespaces.svg) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_2, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern$1, "ms-")));
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i2 = 0; i2 < longhands.length; i2++) {
              expanded[longhands[i2]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
        };
        var voidElementTags = _assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
              {
                throw Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (!(props.children == null)) {
              {
                throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
            }
            if (!(typeof props.dangerouslySetInnerHTML === "object" && HTML in props.dangerouslySetInnerHTML)) {
              {
                throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (!(props.style == null || typeof props.style === "object")) {
            {
              throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          "aria-hidden": 0,
          "aria-invalid": 0,
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var _hasOwnProperty = Object.prototype.hasOwnProperty;
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var IS_REPLAYED = 1 << 4;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (!(typeof restoreImpl === "function")) {
            {
              throw Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i2 = 0; i2 < queuedTargets.length; i2++) {
              restoreStateOfTarget(queuedTargets[i2]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var discreteUpdatesImpl = function(fn, a2, b2, c2, d2) {
          return fn(a2, b2, c2, d2);
        };
        var flushDiscreteUpdatesImpl = function() {
        };
        var batchedEventUpdatesImpl = batchedUpdatesImpl;
        var isInsideEventHandler = false;
        var isBatchingEventUpdates = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushDiscreteUpdatesImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, bookkeeping) {
          if (isInsideEventHandler) {
            return fn(bookkeeping);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, bookkeeping);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function batchedEventUpdates(fn, a2, b2) {
          if (isBatchingEventUpdates) {
            return fn(a2, b2);
          }
          isBatchingEventUpdates = true;
          try {
            return batchedEventUpdatesImpl(fn, a2, b2);
          } finally {
            isBatchingEventUpdates = false;
            finishEventHandler();
          }
        }
        function discreteUpdates(fn, a2, b2, c2, d2) {
          var prevIsInsideEventHandler = isInsideEventHandler;
          isInsideEventHandler = true;
          try {
            return discreteUpdatesImpl(fn, a2, b2, c2, d2);
          } finally {
            isInsideEventHandler = prevIsInsideEventHandler;
            if (!isInsideEventHandler) {
              finishEventHandler();
            }
          }
        }
        function flushDiscreteUpdatesIfNeeded(timeStamp) {
          {
            if (!isInsideEventHandler) {
              flushDiscreteUpdatesImpl();
            }
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          discreteUpdatesImpl = _discreteUpdatesImpl;
          flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
          batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (!(!listener || typeof listener === "function")) {
            {
              throw Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e2) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a2, b2, c2, d2, e2, f2) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a2, b2, c2, d2, e2, f2) {
              if (!(typeof document !== "undefined")) {
                {
                  throw Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a2, b2, c2, d2, e2, f2) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a2, b2, c2, d2, e2, f2) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            {
              {
                throw Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = 0;
        var PerformedWork = 1;
        var Placement2 = 2;
        var Update = 4;
        var PlacementAndUpdate = 6;
        var Deletion = 8;
        var ContentReset = 16;
        var Callback = 32;
        var DidCapture = 64;
        var Ref = 128;
        var Snapshot = 256;
        var Passive = 512;
        var PassiveUnmountPendingDev = 8192;
        var Hydrating = 1024;
        var HydratingAndUpdate = 1028;
        var LifecycleEffectMask = 932;
        var HostEffectMask = 2047;
        var Incomplete = 2048;
        var ShouldCapture = 4096;
        var ForceUpdateForLegacySuspense = 16384;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement2 | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(ownerFiber.type) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (!(getNearestMountedFiber(fiber) === fiber)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (!(nearestMounted !== null)) {
              {
                throw Error("Unable to find node on an unmounted component.");
              }
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a2 = fiber;
          var b2 = alternate;
          while (true) {
            var parentA = a2.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a2 = b2 = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a2) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b2) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              {
                {
                  throw Error("Unable to find node on an unmounted component.");
                }
              }
            }
            if (a2.return !== b2.return) {
              a2 = parentA;
              b2 = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a2) {
                  didFindChild = true;
                  a2 = parentA;
                  b2 = parentB;
                  break;
                }
                if (_child === b2) {
                  didFindChild = true;
                  b2 = parentA;
                  a2 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a2) {
                    didFindChild = true;
                    a2 = parentB;
                    b2 = parentA;
                    break;
                  }
                  if (_child === b2) {
                    didFindChild = true;
                    b2 = parentB;
                    a2 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  {
                    throw Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
            }
            if (!(a2.alternate === b2)) {
              {
                throw Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (!(a2.tag === HostRoot)) {
            {
              throw Error("Unable to find node on an unmounted component.");
            }
          }
          if (a2.stateNode.current === a2) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText) {
              return node;
            } else if (node.child) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          if (!currentParent) {
            return null;
          }
          var node = currentParent;
          while (true) {
            if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI) {
              return node;
            } else if (node.child && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === currentParent) {
              return null;
            }
            while (!node.sibling) {
              if (!node.return || node.return === currentParent) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        function doesFiberContain(parentFiber, childFiber) {
          var node = childFiber;
          var parentFiberAlternate = parentFiber.alternate;
          while (node !== null) {
            if (node === parentFiber || node === parentFiberAlternate) {
              return true;
            }
            node = node.return;
          }
          return false;
        }
        var attemptUserBlockingHydration;
        function setAttemptUserBlockingHydration(fn) {
          attemptUserBlockingHydration = fn;
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        function hasQueuedDiscreteEvents() {
          return queuedDiscreteEvents.length > 0;
        }
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isReplayableDiscreteEvent(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags: eventSystemFlags | IS_REPLAYED,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
          queuedDiscreteEvents.push(queuedEvent);
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.lanePriority, function() {
                    Scheduler.unstable_runWithPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn !== null) {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          while (queuedDiscreteEvents.length > 0) {
            var nextDiscreteEvent = queuedDiscreteEvents[0];
            if (nextDiscreteEvent.blockedOn !== null) {
              var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);
              if (_fiber4 !== null) {
                attemptUserBlockingHydration(_fiber4);
              }
              break;
            }
            var targetContainers = nextDiscreteEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);
              if (nextBlockedOn !== null) {
                nextDiscreteEvent.blockedOn = nextBlockedOn;
                break;
              }
              targetContainers.shift();
            }
            if (nextDiscreteEvent.blockedOn === null) {
              queuedDiscreteEvents.shift();
            }
          }
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i2 = 1; i2 < queuedDiscreteEvents.length; i2++) {
              var queuedEvent = queuedDiscreteEvents[i2];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var DiscreteEvent = 0;
        var UserBlockingEvent = 1;
        var ContinuousEvent = 2;
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var eventPriorities = /* @__PURE__ */ new Map();
        var discreteEventPairsForSimpleEventPlugin = [
          "cancel",
          "cancel",
          "click",
          "click",
          "close",
          "close",
          "contextmenu",
          "contextMenu",
          "copy",
          "copy",
          "cut",
          "cut",
          "auxclick",
          "auxClick",
          "dblclick",
          "doubleClick",
          "dragend",
          "dragEnd",
          "dragstart",
          "dragStart",
          "drop",
          "drop",
          "focusin",
          "focus",
          "focusout",
          "blur",
          "input",
          "input",
          "invalid",
          "invalid",
          "keydown",
          "keyDown",
          "keypress",
          "keyPress",
          "keyup",
          "keyUp",
          "mousedown",
          "mouseDown",
          "mouseup",
          "mouseUp",
          "paste",
          "paste",
          "pause",
          "pause",
          "play",
          "play",
          "pointercancel",
          "pointerCancel",
          "pointerdown",
          "pointerDown",
          "pointerup",
          "pointerUp",
          "ratechange",
          "rateChange",
          "reset",
          "reset",
          "seeked",
          "seeked",
          "submit",
          "submit",
          "touchcancel",
          "touchCancel",
          "touchend",
          "touchEnd",
          "touchstart",
          "touchStart",
          "volumechange",
          "volumeChange"
        ];
        var otherDiscreteEvents = ["change", "selectionchange", "textInput", "compositionstart", "compositionend", "compositionupdate"];
        var userBlockingPairsForSimpleEventPlugin = ["drag", "drag", "dragenter", "dragEnter", "dragexit", "dragExit", "dragleave", "dragLeave", "dragover", "dragOver", "mousemove", "mouseMove", "mouseout", "mouseOut", "mouseover", "mouseOver", "pointermove", "pointerMove", "pointerout", "pointerOut", "pointerover", "pointerOver", "scroll", "scroll", "toggle", "toggle", "touchmove", "touchMove", "wheel", "wheel"];
        var continuousPairsForSimpleEventPlugin = ["abort", "abort", ANIMATION_END, "animationEnd", ANIMATION_ITERATION, "animationIteration", ANIMATION_START, "animationStart", "canplay", "canPlay", "canplaythrough", "canPlayThrough", "durationchange", "durationChange", "emptied", "emptied", "encrypted", "encrypted", "ended", "ended", "error", "error", "gotpointercapture", "gotPointerCapture", "load", "load", "loadeddata", "loadedData", "loadedmetadata", "loadedMetadata", "loadstart", "loadStart", "lostpointercapture", "lostPointerCapture", "playing", "playing", "progress", "progress", "seeking", "seeking", "stalled", "stalled", "suspend", "suspend", "timeupdate", "timeUpdate", TRANSITION_END, "transitionEnd", "waiting", "waiting"];
        function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
          for (var i2 = 0; i2 < eventTypes.length; i2 += 2) {
            var topEvent = eventTypes[i2];
            var event = eventTypes[i2 + 1];
            var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
            var reactName = "on" + capitalizedEvent;
            eventPriorities.set(topEvent, priority);
            topLevelEventsToReactNames.set(topEvent, reactName);
            registerTwoPhaseEvent(reactName, [topEvent]);
          }
        }
        function setEventPriorities(eventTypes, priority) {
          for (var i2 = 0; i2 < eventTypes.length; i2++) {
            eventPriorities.set(eventTypes[i2], priority);
          }
        }
        function getEventPriorityForPluginSystem(domEventName) {
          var priority = eventPriorities.get(domEventName);
          return priority === void 0 ? ContinuousEvent : priority;
        }
        function registerSimpleEvents() {
          registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
          registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
          registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
          setEventPriorities(otherDiscreteEvents, DiscreteEvent);
        }
        var Scheduler_now = Scheduler.unstable_now;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var ImmediatePriority = 99;
        var UserBlockingPriority = 98;
        var NormalPriority = 97;
        var LowPriority = 96;
        var IdlePriority = 95;
        var NoPriority = 90;
        var initialTimeMs = Scheduler_now();
        var SyncLanePriority = 15;
        var SyncBatchedLanePriority = 14;
        var InputDiscreteHydrationLanePriority = 13;
        var InputDiscreteLanePriority = 12;
        var InputContinuousHydrationLanePriority = 11;
        var InputContinuousLanePriority = 10;
        var DefaultHydrationLanePriority = 9;
        var DefaultLanePriority = 8;
        var TransitionHydrationPriority = 7;
        var TransitionPriority = 6;
        var RetryLanePriority = 5;
        var SelectiveHydrationLanePriority = 4;
        var IdleHydrationLanePriority = 3;
        var IdleLanePriority = 2;
        var OffscreenLanePriority = 1;
        var NoLanePriority = 0;
        var TotalLanes = 31;
        var NoLanes = 0;
        var NoLane = 0;
        var SyncLane = 1;
        var SyncBatchedLane = 2;
        var InputDiscreteHydrationLane = 4;
        var InputDiscreteLanes = 24;
        var InputContinuousHydrationLane = 32;
        var InputContinuousLanes = 192;
        var DefaultHydrationLane = 256;
        var DefaultLanes = 3584;
        var TransitionHydrationLane = 4096;
        var TransitionLanes = 4186112;
        var RetryLanes = 62914560;
        var SomeRetryLane = 33554432;
        var SelectiveHydrationLane = 67108864;
        var NonIdleLanes = 134217727;
        var IdleHydrationLane = 134217728;
        var IdleLanes = 805306368;
        var OffscreenLane = 1073741824;
        var NoTimestamp = -1;
        function setCurrentUpdateLanePriority(newLanePriority) {
        }
        var return_highestLanePriority = DefaultLanePriority;
        function getHighestPriorityLanes(lanes) {
          if ((SyncLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncLanePriority;
            return SyncLane;
          }
          if ((SyncBatchedLane & lanes) !== NoLanes) {
            return_highestLanePriority = SyncBatchedLanePriority;
            return SyncBatchedLane;
          }
          if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
            return_highestLanePriority = InputDiscreteHydrationLanePriority;
            return InputDiscreteHydrationLane;
          }
          var inputDiscreteLanes = InputDiscreteLanes & lanes;
          if (inputDiscreteLanes !== NoLanes) {
            return_highestLanePriority = InputDiscreteLanePriority;
            return inputDiscreteLanes;
          }
          if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
            return_highestLanePriority = InputContinuousHydrationLanePriority;
            return InputContinuousHydrationLane;
          }
          var inputContinuousLanes = InputContinuousLanes & lanes;
          if (inputContinuousLanes !== NoLanes) {
            return_highestLanePriority = InputContinuousLanePriority;
            return inputContinuousLanes;
          }
          if ((lanes & DefaultHydrationLane) !== NoLanes) {
            return_highestLanePriority = DefaultHydrationLanePriority;
            return DefaultHydrationLane;
          }
          var defaultLanes = DefaultLanes & lanes;
          if (defaultLanes !== NoLanes) {
            return_highestLanePriority = DefaultLanePriority;
            return defaultLanes;
          }
          if ((lanes & TransitionHydrationLane) !== NoLanes) {
            return_highestLanePriority = TransitionHydrationPriority;
            return TransitionHydrationLane;
          }
          var transitionLanes = TransitionLanes & lanes;
          if (transitionLanes !== NoLanes) {
            return_highestLanePriority = TransitionPriority;
            return transitionLanes;
          }
          var retryLanes = RetryLanes & lanes;
          if (retryLanes !== NoLanes) {
            return_highestLanePriority = RetryLanePriority;
            return retryLanes;
          }
          if (lanes & SelectiveHydrationLane) {
            return_highestLanePriority = SelectiveHydrationLanePriority;
            return SelectiveHydrationLane;
          }
          if ((lanes & IdleHydrationLane) !== NoLanes) {
            return_highestLanePriority = IdleHydrationLanePriority;
            return IdleHydrationLane;
          }
          var idleLanes = IdleLanes & lanes;
          if (idleLanes !== NoLanes) {
            return_highestLanePriority = IdleLanePriority;
            return idleLanes;
          }
          if ((OffscreenLane & lanes) !== NoLanes) {
            return_highestLanePriority = OffscreenLanePriority;
            return OffscreenLane;
          }
          {
            error("Should have found matching lanes. This is a bug in React.");
          }
          return_highestLanePriority = DefaultLanePriority;
          return lanes;
        }
        function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
          switch (schedulerPriorityLevel) {
            case ImmediatePriority:
              return SyncLanePriority;
            case UserBlockingPriority:
              return InputContinuousLanePriority;
            case NormalPriority:
            case LowPriority:
              return DefaultLanePriority;
            case IdlePriority:
              return IdleLanePriority;
            default:
              return NoLanePriority;
          }
        }
        function lanePriorityToSchedulerPriority(lanePriority) {
          switch (lanePriority) {
            case SyncLanePriority:
            case SyncBatchedLanePriority:
              return ImmediatePriority;
            case InputDiscreteHydrationLanePriority:
            case InputDiscreteLanePriority:
            case InputContinuousHydrationLanePriority:
            case InputContinuousLanePriority:
              return UserBlockingPriority;
            case DefaultHydrationLanePriority:
            case DefaultLanePriority:
            case TransitionHydrationPriority:
            case TransitionPriority:
            case SelectiveHydrationLanePriority:
            case RetryLanePriority:
              return NormalPriority;
            case IdleHydrationLanePriority:
            case IdleLanePriority:
            case OffscreenLanePriority:
              return IdlePriority;
            case NoLanePriority:
              return NoPriority;
            default: {
              {
                throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
              }
            }
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return_highestLanePriority = NoLanePriority;
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var nextLanePriority = NoLanePriority;
          var expiredLanes = root2.expiredLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          if (expiredLanes !== NoLanes) {
            nextLanes = expiredLanes;
            nextLanePriority = return_highestLanePriority = SyncLanePriority;
          } else {
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
                nextLanePriority = return_highestLanePriority;
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                  nextLanePriority = return_highestLanePriority;
                }
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes);
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {
            getHighestPriorityLanes(wipLanes);
            var wipLanePriority = return_highestLanePriority;
            if (nextLanePriority <= wipLanePriority) {
              return wipLanes;
            } else {
              return_highestLanePriority = nextLanePriority;
            }
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          getHighestPriorityLanes(lane);
          var priority = return_highestLanePriority;
          if (priority >= InputContinuousLanePriority) {
            return currentTime + 250;
          } else if (priority >= TransitionPriority) {
            return currentTime + 5e3;
          } else {
            return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function returnNextLanesPriority() {
          return return_highestLanePriority;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function findUpdateLane(lanePriority, wipLanes) {
          switch (lanePriority) {
            case NoLanePriority:
              break;
            case SyncLanePriority:
              return SyncLane;
            case SyncBatchedLanePriority:
              return SyncBatchedLane;
            case InputDiscreteLanePriority: {
              var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);
              if (_lane === NoLane) {
                return findUpdateLane(InputContinuousLanePriority, wipLanes);
              }
              return _lane;
            }
            case InputContinuousLanePriority: {
              var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);
              if (_lane2 === NoLane) {
                return findUpdateLane(DefaultLanePriority, wipLanes);
              }
              return _lane2;
            }
            case DefaultLanePriority: {
              var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);
              if (_lane3 === NoLane) {
                _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);
                if (_lane3 === NoLane) {
                  _lane3 = pickArbitraryLane(DefaultLanes);
                }
              }
              return _lane3;
            }
            case TransitionPriority:
            case RetryLanePriority:
              break;
            case IdleLanePriority:
              var lane = pickArbitraryLane(IdleLanes & ~wipLanes);
              if (lane === NoLane) {
                lane = pickArbitraryLane(IdleLanes);
              }
              return lane;
          }
          {
            {
              throw Error("Invalid update priority: " + lanePriority + ". This is a bug in React.");
            }
          }
        }
        function findTransitionLane(wipLanes, pendingLanes) {
          var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(TransitionLanes & ~wipLanes);
            if (lane === NoLane) {
              lane = pickArbitraryLane(TransitionLanes);
            }
          }
          return lane;
        }
        function findRetryLane(wipLanes) {
          var lane = pickArbitraryLane(RetryLanes & ~wipLanes);
          if (lane === NoLane) {
            lane = pickArbitraryLane(RetryLanes);
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function getLowestPriorityLane(lanes) {
          var index2 = 31 - clz32(lanes);
          return index2 < 0 ? NoLanes : 1 << index2;
        }
        function getEqualOrHigherPriorityLanes(lanes) {
          return (getLowestPriorityLane(lanes) << 1) - 1;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a2, b2) {
          return (a2 & b2) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a2, b2) {
          return a2 | b2;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a2, b2) {
          return a2 !== NoLane && a2 < b2 ? a2 : b2;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i2 = 0; i2 < TotalLanes; i2++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          var higherPriorityLanes = updateLane - 1;
          root2.suspendedLanes &= higherPriorityLanes;
          root2.pingedLanes &= higherPriorityLanes;
          var eventTimes = root2.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markDiscreteUpdatesExpired(root2) {
          root2.expiredLanes |= InputDiscreteLanes & root2.pendingLanes;
        }
        function hasDiscreteLanes(lanes) {
          return (lanes & InputDiscreteLanes) !== NoLanes;
        }
        function markRootMutableRead(root2, updateLane) {
          root2.mutableReadLanes |= updateLane & root2.pendingLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = 0;
          root2.pingedLanes = 0;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = entangledLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] |= entangledLanes;
            lanes &= ~lane;
          }
        }
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(lanes) {
          if (lanes === 0) {
            return 32;
          }
          return 31 - (log(lanes) / LN2 | 0) | 0;
        }
        var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority, runWithPriority = Scheduler.unstable_runWithPriority;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriorityForPluginSystem(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEvent:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case UserBlockingEvent:
              listenerWrapper = dispatchUserBlockingUpdate;
              break;
            case ContinuousEvent:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
          }
          discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
        }
        function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
          {
            runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          var allowReplay = true;
          {
            allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
          }
          if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
            queueDiscreteEvent(null, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            return;
          }
          var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            if (allowReplay) {
              clearIfContinuousEvent(domEventName, nativeEvent);
            }
            return;
          }
          if (allowReplay) {
            if (isReplayableDiscreteEvent(domEventName)) {
              queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (root2.hydrate) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer);
          return null;
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          _assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            persist: function() {
            },
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = _assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = _assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0)
              return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = _assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = _assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = _assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = _assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = _assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = _assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = _assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = _assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = _assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = _assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
          },
          deltaZ: 0,
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to = _related ? getClosestInstanceFromNode(_related) : null;
            if (to !== null) {
              var nearestMounted = getNearestMountedFiber(to);
              if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                to = null;
              }
            }
          } else {
            from = null;
            to = targetInst;
          }
          if (from === to) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to == null ? win : getNodeFromInstance(to);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
        }
        function is(x2, y2) {
          return x2 === y2 && (x2 !== 0 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i2 = 0; i2 < keysA.length; i2++) {
            if (!hasOwnProperty$2.call(objB, keysA[i2]) || !objectIs(objA[keysA[i2]], objB[keysA[i2]])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e2) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer:
            while (true) {
              var next = null;
              while (true) {
                if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                  start = length + anchorOffset;
                }
                if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                  end = length + focusOffset;
                }
                if (node.nodeType === TEXT_NODE) {
                  length += node.nodeValue.length;
                }
                if ((next = node.firstChild) === null) {
                  break;
                }
                parentNode = node;
                node = next;
              }
              while (true) {
                if (node === outerNode) {
                  break outer;
                }
                if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                  start = length;
                }
                if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                  end = length;
                }
                if ((next = node.nextSibling) !== null) {
                  break;
                }
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i2 = 0; i2 < ancestors.length; i2++) {
              var info = ancestors[i2];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i2 = dispatchListeners.length - 1; i2 >= 0; i2--) {
              var _dispatchListeners$i = dispatchListeners[i2], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i = 0; _i < dispatchListeners.length; _i++) {
              var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i2 = 0; i2 < dispatchQueue.length; i2++) {
            var _dispatchQueue$i = dispatchQueue[i2], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          {
            if (rootContainerElement[listeningMarker]) {
              return;
            }
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (!nonDelegatedEvents.has(domEventName)) {
                listenToNativeEvent(domEventName, false, rootContainerElement, null);
              }
              listenToNativeEvent(domEventName, true, rootContainerElement, null);
            });
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
          var eventSystemFlags = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
          var target = rootContainerElement;
          if (domEventName === "selectionchange" && rootContainerElement.nodeType !== DOCUMENT_NODE) {
            target = rootContainerElement.ownerDocument;
          }
          if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
            if (domEventName !== "scroll") {
              return;
            }
            eventSystemFlags |= IS_NON_DELEGATED;
            target = targetElement;
          }
          var listenerSet = getEventListenerSet(target);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop:
                while (true) {
                  if (node === null) {
                    return;
                  }
                  var nodeTag = node.tag;
                  if (nodeTag === HostRoot || nodeTag === HostPortal) {
                    var container = node.stateNode.containerInfo;
                    if (isMatchingRootContainer(container, targetContainerNode)) {
                      break;
                    }
                    if (nodeTag === HostPortal) {
                      var grandNode = node.return;
                      while (grandNode !== null) {
                        var grandTag = grandNode.tag;
                        if (grandTag === HostRoot || grandTag === HostPortal) {
                          var grandContainer = grandNode.stateNode.containerInfo;
                          if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                            return;
                          }
                        }
                        grandNode = grandNode.return;
                      }
                    }
                    while (container !== null) {
                      var parentNode = getClosestInstanceFromNode(container);
                      if (parentNode === null) {
                        return;
                      }
                      var parentTag = parentNode.tag;
                      if (parentTag === HostComponent || parentTag === HostText) {
                        node = ancestorInst = parentNode;
                        continue mainLoop;
                      }
                      container = container.parentNode;
                    }
                  }
                  node = node.return;
                }
            }
          }
          batchedEventUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
          var common = from && to ? getLowestCommonAncestor(from, to) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var HTML_NAMESPACE$1 = Namespaces.html;
        var warnedUnknownTags;
        var suppressHydrationWarning;
        var validatePropertiesInDevelopment;
        var warnForTextDifference;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeMarkupForTextOrAttribute;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            dialog: true,
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          normalizeMarkupForTextOrAttribute = function(markup) {
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          };
          warnForTextDifference = function(serverText, clientText) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
          };
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i2 = 0; i2 < updatePayload.length; i2 += 2) {
            var propKey = updatePayload[i2];
            var propValue = updatePayload[i2 + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement3(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE$1) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE$1) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE$1) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$3(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "option":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$3(domElement, lastRawProps);
              nextProps = getHostProps$3(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
              ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (propKey === AUTOFOCUS)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
              ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else if (typeof nextProp === "object" && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
              nextProp.toString();
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i2 = 0; i2 < mediaEventTypes.length; i2++) {
                listenToNonDelegatedEvent(mediaEventTypes[i2], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i = 0; _i < attributes.length; _i++) {
              var name = attributes[_i].name.toLowerCase();
              switch (name) {
                case "data-reactroot":
                  break;
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (!suppressHydrationWarning) {
                    warnForTextDifference(domElement.textContent, nextProp);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = getPropertyInfo(propKey);
              if (suppressHydrationWarning)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || propKey === "value" || propKey === "checked" || propKey === "selected")
                ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE$1) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
              warnForExtraAttributes(extraAttributeNames);
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForUnmatchedText(textNode, text) {
          {
            warnForTextDifference(textNode.nodeValue, text);
          }
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              case "option":
                return tag === "#text";
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              case "colgroup":
                return tag === "col" || tag === "template";
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1;
        {
          SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        }
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function shouldAutoFocusHostComponent(type, props) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
          }
          return false;
        }
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement3(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          return shouldAutoFocusHostComponent(type, props);
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "option" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          if (shouldAutoFocusHostComponent(type, newProps)) {
            domElement.focus();
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateFiberProps(domElement, newProps);
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            var body = container.body;
            if (body != null) {
              body.textContent = "";
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          return diffHydratedProperties(instance, type, props, parentNamespace);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          return diffHydratedText(textInstance, text);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
          {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForUnmatchedText(textInstance, text);
          }
        }
        function didNotHydrateContainerInstance(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentInstance, instance);
            } else if (instance.nodeType === COMMENT_NODE)
              ;
            else {
              warnForDeletedHydratableText(parentInstance, instance);
            }
          }
        }
        function didNotFindHydratableContainerInstance(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableContainerTextInstance(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedElement(parentInstance, type);
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            warnForInsertedHydratedText(parentInstance, text);
          }
        }
        function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true)
            ;
        }
        var clientId = 0;
        function makeClientIdInDEV(warnOnAccessInDEV) {
          var id = "r:" + (clientId++).toString(36);
          return {
            toString: function() {
              warnOnAccessInDEV();
              return id;
            },
            valueOf: function() {
              warnOnAccessInDEV();
              return id;
            }
          };
        }
        function isOpaqueHydratingObject(value) {
          return value !== null && typeof value === "object" && value.$$typeof === REACT_OPAQUE_ID_TYPE;
        }
        function makeOpaqueHydratingObject(attemptToReadValue) {
          return {
            $$typeof: REACT_OPAQUE_ID_TYPE,
            toString: attemptToReadValue,
            valueOf: attemptToReadValue
          };
        }
        function preparePortalMount(portalInstance) {
          {
            listenToAllSupportedEvents(portalInstance);
          }
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          {
            {
              throw Error("getNodeFromInstance: Invalid argument.");
            }
          }
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location2, componentName, element) {
          {
            var has2 = Function.call.bind(Object.prototype.hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location2 + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location2, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex) {
                  error$1 = ex;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location2, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location2, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (!(contextStackCursor.current === emptyContextObject)) {
              {
                throw Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentName(type) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                {
                  throw Error((getComponentName(type) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
            }
            {
              var name = getComponentName(type) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return _assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              {
                throw Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
              {
                throw Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            {
              {
                throw Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
        }
        var LegacyRoot = 0;
        var BlockingRoot = 1;
        var ConcurrentRoot = 2;
        var rendererID = null;
        var injectedHook = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          return true;
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, priorityLevel) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                injectedHook.onCommitFiberRoot(rendererID, root2, priorityLevel, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority, Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback, Scheduler_cancelCallback = Scheduler.unstable_cancelCallback, Scheduler_shouldYield = Scheduler.unstable_shouldYield, Scheduler_requestPaint = Scheduler.unstable_requestPaint, Scheduler_now$1 = Scheduler.unstable_now, Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel, Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority, Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority, Scheduler_NormalPriority = Scheduler.unstable_NormalPriority, Scheduler_LowPriority = Scheduler.unstable_LowPriority, Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;
        {
          if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
            {
              throw Error("It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling");
            }
          }
        }
        var fakeCallbackNode = {};
        var ImmediatePriority$1 = 99;
        var UserBlockingPriority$2 = 98;
        var NormalPriority$1 = 97;
        var LowPriority$1 = 96;
        var IdlePriority$1 = 95;
        var NoPriority$1 = 90;
        var shouldYield = Scheduler_shouldYield;
        var requestPaint = Scheduler_requestPaint !== void 0 ? Scheduler_requestPaint : function() {
        };
        var syncQueue = null;
        var immediateQueueCallbackNode = null;
        var isFlushingSyncQueue = false;
        var initialTimeMs$1 = Scheduler_now$1();
        var now = initialTimeMs$1 < 1e4 ? Scheduler_now$1 : function() {
          return Scheduler_now$1() - initialTimeMs$1;
        };
        function getCurrentPriorityLevel() {
          switch (Scheduler_getCurrentPriorityLevel()) {
            case Scheduler_ImmediatePriority:
              return ImmediatePriority$1;
            case Scheduler_UserBlockingPriority:
              return UserBlockingPriority$2;
            case Scheduler_NormalPriority:
              return NormalPriority$1;
            case Scheduler_LowPriority:
              return LowPriority$1;
            case Scheduler_IdlePriority:
              return IdlePriority$1;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function reactPriorityToSchedulerPriority(reactPriorityLevel) {
          switch (reactPriorityLevel) {
            case ImmediatePriority$1:
              return Scheduler_ImmediatePriority;
            case UserBlockingPriority$2:
              return Scheduler_UserBlockingPriority;
            case NormalPriority$1:
              return Scheduler_NormalPriority;
            case LowPriority$1:
              return Scheduler_LowPriority;
            case IdlePriority$1:
              return Scheduler_IdlePriority;
            default: {
              {
                throw Error("Unknown priority level.");
              }
            }
          }
        }
        function runWithPriority$1(reactPriorityLevel, fn) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_runWithPriority(priorityLevel, fn);
        }
        function scheduleCallback(reactPriorityLevel, callback, options2) {
          var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
          return Scheduler_scheduleCallback(priorityLevel, callback, options2);
        }
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
            immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
          } else {
            syncQueue.push(callback);
          }
          return fakeCallbackNode;
        }
        function cancelCallback(callbackNode) {
          if (callbackNode !== fakeCallbackNode) {
            Scheduler_cancelCallback(callbackNode);
          }
        }
        function flushSyncCallbackQueue() {
          if (immediateQueueCallbackNode !== null) {
            var node = immediateQueueCallbackNode;
            immediateQueueCallbackNode = null;
            Scheduler_cancelCallback(node);
          }
          flushSyncCallbackQueueImpl();
        }
        function flushSyncCallbackQueueImpl() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i2 = 0;
            {
              try {
                var _isSync2 = true;
                var _queue = syncQueue;
                runWithPriority$1(ImmediatePriority$1, function() {
                  for (; i2 < _queue.length; i2++) {
                    var callback = _queue[i2];
                    do {
                      callback = callback(_isSync2);
                    } while (callback !== null);
                  }
                });
                syncQueue = null;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i2 + 1);
                }
                Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
                throw error2;
              } finally {
                isFlushingSyncQueue = false;
              }
            }
          }
        }
        var ReactVersion = "17.0.2";
        var NoMode = 0;
        var StrictMode = 1;
        var BlockingMode = 2;
        var ConcurrentMode = 4;
        var ProfileMode = 8;
        var DebugTracingMode = 16;
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = 0;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn3("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn3("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn3("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentName(fiber.type) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = _assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var MAX_SIGNED_31_BIT_INT = 1073741823;
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastContextWithAllBitsObserved = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, nextValue) {
          var context = providerFiber.type._context;
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          var context = providerFiber.type._context;
          {
            context._currentValue = currentValue;
          }
        }
        function calculateChangedBits(context, newValue, oldValue) {
          if (objectIs(oldValue, newValue)) {
            return 0;
          } else {
            var changedBits = typeof context._calculateChangedBits === "function" ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;
            {
              if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
                error("calculateChangedBits: Expected the return value to be a 31-bit integer. Instead received: %s", changedBits);
              }
            }
            return changedBits | 0;
          }
        }
        function scheduleWorkOnParentPath(parent, renderLanes2) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            } else {
              break;
            }
            node = node.return;
          }
        }
        function propagateContextChange(workInProgress2, context, changedBits, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
                  if (fiber.tag === ClassComponent) {
                    var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes2));
                    update.tag = ForceUpdate;
                    enqueueUpdate(fiber, update);
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleWorkOnParentPath(fiber.return, renderLanes2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastContextWithAllBitsObserved = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            var firstContext = dependencies.firstContext;
            if (firstContext !== null) {
              if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                markWorkInProgressReceivedUpdate();
              }
              dependencies.firstContext = null;
            }
          }
        }
        function readContext(context, observedBits) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          if (lastContextWithAllBitsObserved === context)
            ;
          else if (observedBits === false || observedBits === 0)
            ;
          else {
            var resolvedObservedBits;
            if (typeof observedBits !== "number" || observedBits === MAX_SIGNED_31_BIT_INT) {
              lastContextWithAllBitsObserved = context;
              resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
            } else {
              resolvedObservedBits = observedBits;
            }
            var contextItem = {
              context,
              observedBits: resolvedObservedBits,
              next: null
            };
            if (lastContextDependency === null) {
              if (!(currentlyRenderingFiber !== null)) {
                {
                  throw Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem,
                responders: null
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return context._currentValue;
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          var pending = sharedQueue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          sharedQueue.pending = update;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictMode) {
                    disableLogs();
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      reenableLogs();
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return _assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (!(typeof callback === "function")) {
            {
              throw Error("Invalid argument passed as callback. Expected a function. Instead received: " + callback);
            }
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i2 = 0; i2 < effects.length; i2++) {
              var effect = effects[i2];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var fakeInternalInstance = {};
        var isArray = Array.isArray;
        var emptyRefsObject = new React5.Component().refs;
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentName(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              {
                {
                  throw Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
                }
              }
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                getDerivedStateFromProps(nextProps, prevState);
              } finally {
                reenableLogs();
              }
            }
          }
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : _assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            enqueueUpdate(fiber, update);
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  reenableLogs();
                }
              }
            }
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentName(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentName(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentName(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentName(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0;
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentName(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          {
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                new ctor(props, context);
              } finally {
                reenableLogs();
              }
            }
          }
          var instance = new ctor(props, context);
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentName(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentName(workInProgress2.type) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentName(workInProgress2.type) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = emptyRefsObject;
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentName(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            workInProgress2.flags |= Update;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              workInProgress2.flags |= Update;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (!(typeof child._store === "object")) {
              {
                throw Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            child._store.validated = true;
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        var isArray$1 = Array.isArray;
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                var componentName = getComponentName(returnFiber.type) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (!(ownerFiber.tag === ClassComponent)) {
                  {
                    throw Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                {
                  throw Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = inst.refs;
                if (refs === emptyRefsObject) {
                  refs = inst.refs = {};
                }
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (!(typeof mixedRef === "string")) {
                {
                  throw Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
              }
              if (!element._owner) {
                {
                  throw Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          if (returnFiber.type !== "textarea") {
            {
              {
                throw Error("Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : newChild) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
          }
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentName(returnFiber.type) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = childToDelete;
              returnFiber.lastEffect = childToDelete;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
            }
            childToDelete.nextEffect = null;
            childToDelete.flags = Deletion;
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags = Placement2;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags = Placement2;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags = Placement2;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            if (current2 !== null) {
              if (current2.elementType === element.type || isCompatibleFamilyForHotReloading(current2, element)) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment2) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    if (newChild.type === REACT_FRAGMENT_TYPE) {
                      return updateFragment2(returnFiber, oldFiber, newChild.props.children, lanes, key);
                    }
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment2(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
                  }
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
              }
              if (isArray$1(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i2 = 0; i2 < newChildren.length; i2++) {
                var child = newChildren[i2];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (!(typeof iteratorFn === "function")) {
              {
                throw Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            {
              if (typeof Symbol === "function" && newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (!(newChildren != null)) {
              {
                throw Error("An iterable object provided no iterator.");
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                switch (child.tag) {
                  case Fragment2: {
                    if (element.type === REACT_FRAGMENT_TYPE) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                    break;
                  }
                  case Block:
                  default: {
                    if (child.elementType === element.type || isCompatibleFamilyForHotReloading(child, element)) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing3 = useFiber(child, element.props);
                      _existing3.ref = coerceRef(returnFiber, child, element);
                      _existing3.return = returnFiber;
                      {
                        _existing3._debugSource = element._source;
                        _existing3._debugOwner = element._owner;
                      }
                      return _existing3;
                    }
                    break;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            var isObject = typeof newChild === "object" && newChild !== null;
            if (isObject) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
              }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            if (isArray$1(newChild)) {
              return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (getIteratorFn(newChild)) {
              return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
            }
            if (isObject) {
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            if (typeof newChild === "undefined" && !isUnkeyedTopLevelFragment) {
              switch (returnFiber.tag) {
                case ClassComponent: {
                  {
                    var instance = returnFiber.stateNode;
                    if (instance.render._isMockFunction) {
                      break;
                    }
                  }
                }
                case Block:
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  {
                    {
                      throw Error((getComponentName(returnFiber.type) || "Component") + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.");
                    }
                  }
                }
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (!(current2 === null || workInProgress2.child === current2.child)) {
            {
              throw Error("Resuming work not yet implemented.");
            }
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c2) {
          if (!(c2 !== NO_CONTEXT)) {
            {
              throw Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return c2;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          if (props.fallback === void 0) {
            return false;
          }
          if (props.unstable_avoidThisFallback !== true) {
            return true;
          }
          if (hasInvisibleParent) {
            return false;
          }
          return true;
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = 0;
        var HasEffect = 1;
        var Layout = 2;
        var Passive$1 = 4;
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChild(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          return true;
        }
        function deleteHydratableInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot:
                didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
                break;
              case HostComponent:
                didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
                break;
            }
          }
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          childToDelete.flags = Deletion;
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = childToDelete;
            returnFiber.lastEffect = childToDelete;
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement2;
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableContainerInstance(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableContainerTextInstance(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent:
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
                    break;
                  case HostText:
                    var _text = fiber.pendingProps;
                    didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                    break;
                  case SuspenseComponent:
                    didNotFindHydratableSuspenseInstance(parentType, parentProps);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              return false;
            }
            default:
              return false;
          }
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
          }
          hydrationParentFiber = fiber;
          nextHydratableInstance = getFirstHydratableChild(nextInstance);
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          {
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                    break;
                  }
                }
              }
            }
          }
          return shouldUpdate;
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            {
              throw Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          var type = fiber.type;
          if (fiber.tag !== HostComponent || type !== "head" && type !== "body" && !shouldSetTextContent(type, fiber.memoizedProps)) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              deleteHydratableInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
        }
        function getIsHydrating() {
          return isHydrating;
        }
        var workInProgressSources = [];
        var rendererSigil$1;
        {
          rendererSigil$1 = {};
        }
        function markSourceAsDirty(mutableSource) {
          workInProgressSources.push(mutableSource);
        }
        function resetWorkInProgressVersions() {
          for (var i2 = 0; i2 < workInProgressSources.length; i2++) {
            var mutableSource = workInProgressSources[i2];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function getWorkInProgressVersion(mutableSource) {
          {
            return mutableSource._workInProgressVersionPrimary;
          }
        }
        function setWorkInProgressVersion(mutableSource, version) {
          {
            mutableSource._workInProgressVersionPrimary = version;
          }
          workInProgressSources.push(mutableSource);
        }
        function warnAboutMultipleRenderersDEV(mutableSource) {
          {
            {
              if (mutableSource._currentPrimaryRenderer == null) {
                mutableSource._currentPrimaryRenderer = rendererSigil$1;
              } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
                error("Detected multiple renderers concurrently rendering the same mutable source. This is currently unsupported.");
              }
            }
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnAboutUseOpaqueIdentifier;
        {
          didWarnAboutUseOpaqueIdentifier = {};
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !Array.isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentName(currentlyRenderingFiber$1.type);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i2 = 0; i2 <= hookTypesUpdateIndexDev; i2++) {
                  var oldHookName = hookTypesDev[i2];
                  var newHookName = i2 === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i2 + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          {
            {
              throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
            }
          }
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i2 = 0; i2 < prevDeps.length && i2 < nextDeps.length; i2++) {
            if (objectIs(nextDeps[i2], prevDeps[i2])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
                {
                  throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
          }
          didScheduleRenderPhaseUpdate = false;
          if (!!didRenderTooFewHooks) {
            {
              throw Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
          }
          return children;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          workInProgress2.flags &= ~(Passive | Update);
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (!(nextCurrentHook !== null)) {
              {
                throw Error("Rendered more hooks than during the previous render.");
              }
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    lane: NoLane,
                    action: update.action,
                    eagerReducer: update.eagerReducer,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.eagerReducer === reducer) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (!(queue !== null)) {
            {
              throw Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function readFromUnsubcribedMutableSource(root2, source, getSnapshot) {
          {
            warnAboutMultipleRenderersDEV(source);
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var isSafeToReadFromSource = false;
          var currentRenderVersion = getWorkInProgressVersion(source);
          if (currentRenderVersion !== null) {
            isSafeToReadFromSource = currentRenderVersion === version;
          } else {
            isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root2.mutableReadLanes);
            if (isSafeToReadFromSource) {
              setWorkInProgressVersion(source, version);
            }
          }
          if (isSafeToReadFromSource) {
            var snapshot = getSnapshot(source._source);
            {
              if (typeof snapshot === "function") {
                error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
              }
            }
            return snapshot;
          } else {
            markSourceAsDirty(source);
            {
              {
                throw Error("Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.");
              }
            }
          }
        }
        function useMutableSource(hook, source, getSnapshot, subscribe) {
          var root2 = getWorkInProgressRoot();
          if (!(root2 !== null)) {
            {
              throw Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
          }
          var getVersion = source._getVersion;
          var version = getVersion(source._source);
          var dispatcher = ReactCurrentDispatcher$1.current;
          var _dispatcher$useState = dispatcher.useState(function() {
            return readFromUnsubcribedMutableSource(root2, source, getSnapshot);
          }), currentSnapshot = _dispatcher$useState[0], setSnapshot = _dispatcher$useState[1];
          var snapshot = currentSnapshot;
          var stateHook = workInProgressHook;
          var memoizedState = hook.memoizedState;
          var refs = memoizedState.refs;
          var prevGetSnapshot = refs.getSnapshot;
          var prevSource = memoizedState.source;
          var prevSubscribe = memoizedState.subscribe;
          var fiber = currentlyRenderingFiber$1;
          hook.memoizedState = {
            refs,
            source,
            subscribe
          };
          dispatcher.useEffect(function() {
            refs.getSnapshot = getSnapshot;
            refs.setSnapshot = setSnapshot;
            var maybeNewVersion = getVersion(source._source);
            if (!objectIs(version, maybeNewVersion)) {
              var maybeNewSnapshot = getSnapshot(source._source);
              {
                if (typeof maybeNewSnapshot === "function") {
                  error("Mutable source should not return a function as the snapshot value. Functions may close over mutable values and cause tearing.");
                }
              }
              if (!objectIs(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot);
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root2, lane);
              }
              markRootEntangled(root2, root2.mutableReadLanes);
            }
          }, [getSnapshot, source, subscribe]);
          dispatcher.useEffect(function() {
            var handleChange = function() {
              var latestGetSnapshot = refs.getSnapshot;
              var latestSetSnapshot = refs.setSnapshot;
              try {
                latestSetSnapshot(latestGetSnapshot(source._source));
                var lane = requestUpdateLane(fiber);
                markRootMutableRead(root2, lane);
              } catch (error2) {
                latestSetSnapshot(function() {
                  throw error2;
                });
              }
            };
            var unsubscribe = subscribe(source._source, handleChange);
            {
              if (typeof unsubscribe !== "function") {
                error("Mutable source subscribe function must return an unsubscribe function.");
              }
            }
            return unsubscribe;
          }, [source, subscribe]);
          if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
            var newQueue = {
              pending: null,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: snapshot
            };
            newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
            stateHook.queue = newQueue;
            stateHook.baseQueue = null;
            snapshot = readFromUnsubcribedMutableSource(root2, source, getSnapshot);
            stateHook.memoizedState = stateHook.baseState = snapshot;
          }
          return snapshot;
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = {
            refs: {
              getSnapshot,
              setSnapshot: null
            },
            source,
            subscribe
          };
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          var hook = updateWorkInProgressHook();
          return useMutableSource(hook, source, getSnapshot, subscribe);
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = hook.queue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create2, destroy, deps) {
          var effect = {
            tag,
            create: create2,
            destroy,
            deps,
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          var ref = {
            current: initialValue
          };
          {
            Object.seal(ref);
          }
          hook.memoizedState = ref;
          return ref;
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create2, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create2, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                pushEffect(hookFlags, create2, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create2, destroy, nextDeps);
        }
        function mountEffect(create2, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return mountEffectImpl(Update | Passive, Passive$1, create2, deps);
        }
        function updateEffect(create2, deps) {
          {
            if (typeof jest !== "undefined") {
              warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
            }
          }
          return updateEffectImpl(Update | Passive, Passive$1, create2, deps);
        }
        function mountLayoutEffect(create2, deps) {
          return mountEffectImpl(Update, Layout, create2, deps);
        }
        function updateLayoutEffect(create2, deps) {
          return updateEffectImpl(Update, Layout, create2, deps);
        }
        function imperativeHandleEffect(create2, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create2();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create2();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create2, deps) {
          {
            if (typeof create2 !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create2 !== null ? typeof create2 : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create2, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var _mountState = mountState(value), prevValue = _mountState[0], setValue = _mountState[1];
          mountEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function updateDeferredValue(value) {
          var _updateState = updateState(), prevValue = _updateState[0], setValue = _updateState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function rerenderDeferredValue(value) {
          var _rerenderState = rerenderState(), prevValue = _rerenderState[0], setValue = _rerenderState[1];
          updateEffect(function() {
            var prevTransition = ReactCurrentBatchConfig$1.transition;
            ReactCurrentBatchConfig$1.transition = 1;
            try {
              setValue(value);
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition;
            }
          }, [value]);
          return prevValue;
        }
        function startTransition(setPending, callback) {
          var priorityLevel = getCurrentPriorityLevel();
          {
            runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function() {
              setPending(true);
            });
            runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function() {
              var prevTransition = ReactCurrentBatchConfig$1.transition;
              ReactCurrentBatchConfig$1.transition = 1;
              try {
                setPending(false);
                callback();
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition;
              }
            });
          }
        }
        function mountTransition() {
          var _mountState2 = mountState(false), isPending = _mountState2[0], setPending = _mountState2[1];
          var start = startTransition.bind(null, setPending);
          mountRef(start);
          return [start, isPending];
        }
        function updateTransition() {
          var _updateState2 = updateState(), isPending = _updateState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        function rerenderTransition() {
          var _rerenderState2 = rerenderState(), isPending = _rerenderState2[0];
          var startRef = updateRef();
          var start = startRef.current;
          return [start, isPending];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function warnOnOpaqueIdentifierAccessInDEV(fiber) {
          {
            var name = getComponentName(fiber.type) || "Unknown";
            if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
              error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
              didWarnAboutUseOpaqueIdentifier[name] = true;
            }
          }
        }
        function mountOpaqueIdentifier() {
          var makeId = makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1));
          if (getIsHydrating()) {
            var didUpgrade = false;
            var fiber = currentlyRenderingFiber$1;
            var readValue = function() {
              if (!didUpgrade) {
                didUpgrade = true;
                {
                  isUpdatingOpaqueValueInRenderPhase = true;
                  setId(makeId());
                  isUpdatingOpaqueValueInRenderPhase = false;
                  warnOnOpaqueIdentifierAccessInDEV(fiber);
                }
              }
              {
                {
                  throw Error("The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.");
                }
              }
            };
            var id = makeOpaqueHydratingObject(readValue);
            var setId = mountState(id)[1];
            if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
              currentlyRenderingFiber$1.flags |= Update | Passive;
              pushEffect(HasEffect | Passive$1, function() {
                setId(makeId());
              }, void 0, null);
            }
            return id;
          } else {
            var _id = makeId();
            mountState(_id);
            return _id;
          }
        }
        function updateOpaqueIdentifier() {
          var id = updateState()[0];
          return id;
        }
        function rerenderOpaqueIdentifier() {
          var id = rerenderState()[0];
          return id;
        }
        function dispatchAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            eagerReducer: null,
            eagerState: null,
            next: null
          };
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
          var alternate = fiber.alternate;
          if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          } else {
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.eagerReducer = lastRenderedReducer;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            {
              if (typeof jest !== "undefined") {
                warnIfNotScopedWithMatchingAct(fiber);
                warnIfNotCurrentlyActingUpdatesInDev(fiber);
              }
            }
            scheduleUpdateOnFiber(fiber, lane, eventTime);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useOpaqueIdentifier: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context, observedBits) {
              warnInvalidContextAccess();
              return readContext(context, observedBits);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context, observedBits) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context, observedBits);
            },
            useEffect: function(create2, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create2, deps);
            },
            useImperativeHandle: function(ref, create2, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create2, deps);
            },
            useLayoutEffect: function(create2, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create2, deps);
            },
            useMemo: function(create2, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create2, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource(source, getSnapshot, subscribe);
            },
            useOpaqueIdentifier: function() {
              currentHookNameInDev = "useOpaqueIdentifier";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderOpaqueIdentifier();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var profilerStartTime = -1;
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
              }
            }
          }
          var render4 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render4, nextProps, ref, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, updateLanes, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(type));
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(_innerPropTypes, nextProps, "prop", getComponentName(_type));
            }
          }
          var currentChild = current2.child;
          if (!includesSomeLane(updateLanes, renderLanes2)) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, updateLanes, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x2) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, nextProps, "prop", getComponentName(outerMemoType));
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              if (!includesSomeLane(renderLanes2, updateLanes)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || nextProps.mode === "unstable-defer-without-hiding") {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              {
                markSpawnedWork(OffscreenLane);
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes
              };
              workInProgress2.memoizedState = _nextState;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        var updateLegacyHiddenComponent = updateOffscreenComponent;
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            var stateNode = workInProgress2.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            if (workInProgress2.mode & StrictMode) {
              disableLogs();
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              } finally {
                reenableLogs();
              }
            }
            setIsRendering(false);
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(innerPropTypes, nextProps, "prop", getComponentName(Component));
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement2;
            }
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentName(workInProgress2.type) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  instance.render();
                } finally {
                  reenableLogs();
                }
              }
              setIsRendering(false);
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          var updateQueue = workInProgress2.updateQueue;
          if (!(current2 !== null && updateQueue !== null)) {
            {
              throw Error("If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState !== null ? prevState.element : null;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var nextChildren = nextState.element;
          if (nextChildren === prevChildren) {
            resetHydrationState();
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var root2 = workInProgress2.stateNode;
          if (root2.hydrate && enterHydrationState(workInProgress2)) {
            {
              var mutableSourceEagerHydrationData = root2.mutableSourceEagerHydrationData;
              if (mutableSourceEagerHydrationData != null) {
                for (var i2 = 0; i2 < mutableSourceEagerHydrationData.length; i2 += 2) {
                  var mutableSource = mutableSourceEagerHydrationData[i2];
                  var version = mutableSourceEagerHydrationData[i2 + 1];
                  setWorkInProgressVersion(mutableSource, version);
                }
              }
            }
            var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            workInProgress2.child = child;
            var node = child;
            while (node) {
              node.flags = node.flags & ~Placement2 | Hydrating;
              node = node.sibling;
            }
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            resetHydrationState();
          }
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, updateLanes, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement2;
          }
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, resolvedProps, "prop", getComponentName(Component));
                  }
                }
              }
              child = updateMemoComponent(null, workInProgress2, Component, resolveDefaultProps(Component.type, resolvedProps), updateLanes, renderLanes2);
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          {
            {
              throw Error("Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint);
            }
          }
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement2;
          }
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          if (_current !== null) {
            _current.alternate = null;
            workInProgress2.alternate = null;
            workInProgress2.flags |= Placement2;
          }
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
            {
              var _componentName2 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            var getDerivedStateFromProps = Component.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, Component, getDerivedStateFromProps, props);
            }
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictMode) {
                disableLogs();
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                } finally {
                  reenableLogs();
                }
              }
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || workInProgress2._debugID || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentName(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2)
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              if (nextProps.fallback !== void 0 && nextProps.unstable_avoidThisFallback !== true) {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            if (nextProps.fallback !== void 0) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else if (typeof nextProps.unstable_expectedLoadTime === "number") {
              var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment = workInProgress2.child;
              _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              workInProgress2.lanes = SomeRetryLane;
              {
                markSpawnedWork(SomeRetryLane);
              }
              return _fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren, renderLanes2);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              if (showFallback) {
                var _nextFallbackChildren2 = nextProps.fallback;
                var _nextPrimaryChildren2 = nextProps.children;
                var _fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes2);
                var _primaryChildFragment3 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment;
              } else {
                var _nextPrimaryChildren3 = nextProps.children;
                var _primaryChildFragment4 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren3, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment4;
              }
            } else {
              if (showFallback) {
                var _nextFallbackChildren3 = nextProps.fallback;
                var _nextPrimaryChildren4 = nextProps.children;
                var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes2);
                var _primaryChildFragment5 = workInProgress2.child;
                var _prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes2);
                _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return _fallbackChildFragment2;
              } else {
                var _nextPrimaryChildren5 = nextProps.children;
                var _primaryChildFragment6 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren5, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment6;
              }
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes2, null);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function createWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            currentFallbackChildFragment.nextEffect = null;
            currentFallbackChildFragment.flags = Deletion;
            workInProgress2.firstEffect = workInProgress2.lastEffect = currentFallbackChildFragment;
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if ((mode & BlockingMode) === NoMode && workInProgress2.child !== currentPrimaryChildFragment) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            var progressedLastEffect = primaryChildFragment.lastEffect;
            if (progressedLastEffect !== null) {
              workInProgress2.firstEffect = primaryChildFragment.firstEffect;
              workInProgress2.lastEffect = progressedLastEffect;
              progressedLastEffect.nextEffect = null;
            } else {
              workInProgress2.firstEffect = workInProgress2.lastEffect = null;
            }
          } else {
            primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement2;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function scheduleWorkOnFiber(fiber, renderLanes2) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleWorkOnParentPath(fiber.return, renderLanes2);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleWorkOnFiber(node, renderLanes2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleWorkOnFiber(node, renderLanes2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isArray2 = Array.isArray(childSlot);
            var isIterable = !isArray2 && typeof getIteratorFn(childSlot) === "function";
            if (isArray2 || isIterable) {
              var type = isArray2 ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (Array.isArray(children)) {
                for (var i2 = 0; i2 < children.length; i2++) {
                  if (!validateSuspenseListNestedChild(children[i2], i2)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i)) {
                        return;
                      }
                      _i++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode,
              lastEffect: lastEffectBeforeRendering
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
            renderState.lastEffect = lastEffectBeforeRendering;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & BlockingMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(workInProgress2, false, tail, lastContentRow, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(workInProgress2, true, _tail, null, tailMode, workInProgress2.lastEffect);
                break;
              }
              case "together": {
                initSuspenseListRenderState(workInProgress2, false, null, null, void 0, workInProgress2.lastEffect);
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, newValue);
          if (oldProps !== null) {
            var oldValue = oldProps.value;
            var changedBits = calculateChangedBits(context, newValue, oldValue);
            if (changedBits === 0) {
              if (oldProps.children === newProps.children && !hasContextChanged()) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            } else {
              propagateContextChange(workInProgress2, context, changedBits, renderLanes2);
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render4 = newProps.children;
          {
            if (typeof render4 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context, newProps.unstable_observedBits);
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render4(newValue);
            setIsRendering(false);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            return null;
          } else {
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var last = returnFiber.lastEffect;
            if (last !== null) {
              last.nextEffect = current2;
              returnFiber.lastEffect = current2;
            } else {
              returnFiber.firstEffect = returnFiber.lastEffect = current2;
            }
            current2.nextEffect = null;
            current2.flags = Deletion;
            newWorkInProgress.flags |= Placement2;
            return newWorkInProgress;
          }
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          var updateLanes = workInProgress2.lanes;
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else if (!includesSomeLane(renderLanes2, updateLanes)) {
              didReceiveUpdate = false;
              switch (workInProgress2.tag) {
                case HostRoot:
                  pushHostRootContext(workInProgress2);
                  resetHydrationState();
                  break;
                case HostComponent:
                  pushHostContext(workInProgress2);
                  break;
                case ClassComponent: {
                  var Component = workInProgress2.type;
                  if (isContextProvider(Component)) {
                    pushContextProvider(workInProgress2);
                  }
                  break;
                }
                case HostPortal:
                  pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                  break;
                case ContextProvider: {
                  var newValue = workInProgress2.memoizedProps.value;
                  pushProvider(workInProgress2, newValue);
                  break;
                }
                case Profiler:
                  {
                    var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                    if (hasChildWork) {
                      workInProgress2.flags |= Update;
                    }
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                  break;
                case SuspenseComponent: {
                  var state = workInProgress2.memoizedState;
                  if (state !== null) {
                    var primaryChildFragment = workInProgress2.child;
                    var primaryChildLanes = primaryChildFragment.childLanes;
                    if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                      return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                    } else {
                      pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                      var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                      if (child !== null) {
                        return child.sibling;
                      } else {
                        return null;
                      }
                    }
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  }
                  break;
                }
                case SuspenseListComponent: {
                  var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                  var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (didSuspendBefore) {
                    if (_hasChildWork) {
                      return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                    }
                    workInProgress2.flags |= DidCapture;
                  }
                  var renderState = workInProgress2.memoizedState;
                  if (renderState !== null) {
                    renderState.rendering = null;
                    renderState.tail = null;
                    renderState.lastEffect = null;
                  }
                  pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                  if (_hasChildWork) {
                    break;
                  } else {
                    return null;
                  }
                }
                case OffscreenComponent:
                case LegacyHiddenComponent: {
                  workInProgress2.lanes = NoLanes;
                  return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
                }
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            } else {
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, updateLanes, renderLanes2);
            }
            case FunctionComponent: {
              var _Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, _Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component2, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment2:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(outerPropTypes, _resolvedProps3, "prop", getComponentName(_type2));
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, updateLanes, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, updateLanes, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component3 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component3, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
            case LegacyHiddenComponent: {
              return updateLegacyHiddenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment2:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var fiberRoot = workInProgress2.stateNode;
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else if (!fiberRoot.hydrate) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              updateHostContainer(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (!(workInProgress2.stateNode !== null)) {
                    {
                      throw Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = false;
              if (current2 === null) {
                if (workInProgress2.memoizedProps.fallback !== void 0) {
                  popHydrationState(workInProgress2);
                }
              } else {
                var prevState = current2.memoizedState;
                prevDidTimeout = prevState !== null;
              }
              if (nextDidTimeout && !prevDidTimeout) {
                if ((workInProgress2.mode & BlockingMode) !== NoMode) {
                  var hasInvisibleChildContext = current2 === null && workInProgress2.memoizedProps.unstable_avoidThisFallback !== true;
                  if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                    renderDidSuspend();
                  } else {
                    renderDidSuspendDelayIfPossible();
                  }
                }
              }
              {
                if (nextDidTimeout || prevDidTimeout) {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThennables = suspended.updateQueue;
                        if (newThennables !== null) {
                          workInProgress2.updateQueue = newThennables;
                          workInProgress2.flags |= Update;
                        }
                        if (renderState.lastEffect === null) {
                          workInProgress2.firstEffect = null;
                        }
                        workInProgress2.lastEffect = renderState.lastEffect;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThennables = _suspended.updateQueue;
                    if (_newThennables !== null) {
                      workInProgress2.updateQueue = _newThennables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      var lastEffect = workInProgress2.lastEffect = renderState.lastEffect;
                      if (lastEffect !== null) {
                        lastEffect.nextEffect = null;
                      }
                      return null;
                    }
                  } else if (now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                    {
                      markSpawnedWork(SomeRetryLane);
                    }
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.lastEffect = workInProgress2.lastEffect;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              return null;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case Block:
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              if (current2 !== null) {
                var _nextState = workInProgress2.memoizedState;
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                var nextIsHidden = _nextState !== null;
                if (prevIsHidden !== nextIsHidden && newProps.mode !== "unstable-defer-without-hiding") {
                  workInProgress2.flags |= Update;
                }
              }
              return null;
            }
          }
          {
            {
              throw Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function unwindWork(workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if (!((_flags & DidCapture) === NoFlags)) {
                {
                  throw Error("The root failed to unmount after an error. This is likely a bug in React. Please file an issue.");
                }
              }
              workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
              return workInProgress2;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              popProvider(workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(interruptedWork) {
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              popProvider(interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        function createCapturedValue(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentName(source.type) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              var errorBoundaryName = getComponentName(boundary.type);
              if (errorBoundaryName) {
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              } else {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e2) {
            setTimeout(function() {
              throw e2;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              logCapturedError(fiber, errorInfo);
              return getDerivedStateFromError(error$1);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
                logCapturedError(fiber, errorInfo);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentName(fiber.type) || "Unknown");
                  }
                }
              }
            };
          } else {
            update.callback = function() {
              markFailedErrorBoundaryForHotReloading(fiber);
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            wakeable.then(ping, ping);
          }
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          sourceFiber.firstEffect = sourceFiber.lastEffect = null;
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            if ((sourceFiber.mode & BlockingMode) === NoMode) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
            var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext);
            var _workInProgress = returnFiber;
            do {
              if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
                var wakeables = _workInProgress.updateQueue;
                if (wakeables === null) {
                  var updateQueue = /* @__PURE__ */ new Set();
                  updateQueue.add(wakeable);
                  _workInProgress.updateQueue = updateQueue;
                } else {
                  wakeables.add(wakeable);
                }
                if ((_workInProgress.mode & BlockingMode) === NoMode) {
                  _workInProgress.flags |= DidCapture;
                  sourceFiber.flags |= ForceUpdateForLegacySuspense;
                  sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                  if (sourceFiber.tag === ClassComponent) {
                    var currentSourceFiber = sourceFiber.alternate;
                    if (currentSourceFiber === null) {
                      sourceFiber.tag = IncompleteClassComponent;
                    } else {
                      var update = createUpdate(NoTimestamp, SyncLane);
                      update.tag = ForceUpdate;
                      enqueueUpdate(sourceFiber, update);
                    }
                  }
                  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
                  return;
                }
                attachPingListener(root2, wakeable, rootRenderLanes);
                _workInProgress.flags |= ShouldCapture;
                _workInProgress.lanes = rootRenderLanes;
                return;
              }
              _workInProgress = _workInProgress.return;
            } while (_workInProgress !== null);
            value = new Error((getComponentName(sourceFiber.type) || "A React component") + " suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.");
          }
          renderDidError();
          value = createCapturedValue(value, sourceFiber);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var _update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, _update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update2 = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update2);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          {
            instance.componentWillUnmount();
          }
        };
        function safelyCallComponentWillUnmount(current2, instance) {
          {
            invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current2, instance);
            if (hasCaughtError()) {
              var unmountError = clearCaughtError();
              captureCommitPhaseError(current2, unmountError);
            }
          }
        }
        function safelyDetachRef(current2) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              {
                invokeGuardedCallback(null, ref, null, null);
                if (hasCaughtError()) {
                  var refError = clearCaughtError();
                  captureCommitPhaseError(current2, refError);
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, destroy) {
          {
            invokeGuardedCallback(null, destroy, null);
            if (hasCaughtError()) {
              var error2 = clearCaughtError();
              captureCommitPhaseError(current2, error2);
            }
          }
        }
        function commitBeforeMutationLifeCycles(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              return;
            }
            case ClassComponent: {
              if (finishedWork.flags & Snapshot) {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentName(finishedWork.type));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
              }
              return;
            }
            case HostRoot: {
              {
                if (finishedWork.flags & Snapshot) {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
              }
              return;
            }
            case HostComponent:
            case HostText:
            case HostPortal:
            case IncompleteClassComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitHookEffectListUnmount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  destroy();
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(tag, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & tag) === tag) {
                var create2 = effect.create;
                effect.destroy = create2();
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("An effect function must not return anything besides a function, which is used for clean-up.%s", addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function schedulePassiveEffects(finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              var _effect = effect, next = _effect.next, tag = _effect.tag;
              if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
                enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
                enqueuePendingPassiveHookEffectMount(finishedWork, effect);
              }
              effect = next;
            } while (effect !== firstEffect);
          }
        }
        function commitLifeCycles(finishedRoot, current2, finishedWork, committedLanes) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListMount(Layout | HasEffect, finishedWork);
              }
              schedulePassiveEffects(finishedWork);
              return;
            }
            case ClassComponent: {
              var instance = finishedWork.stateNode;
              if (finishedWork.flags & Update) {
                if (current2 === null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidMount();
                  }
                } else {
                  var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                  var prevState = current2.memoizedState;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                      }
                    }
                  }
                  {
                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                  }
                }
              }
              var updateQueue = finishedWork.updateQueue;
              if (updateQueue !== null) {
                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                    if (instance.state !== finishedWork.memoizedState) {
                      error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentName(finishedWork.type) || "instance");
                    }
                  }
                }
                commitUpdateQueue(finishedWork, updateQueue, instance);
              }
              return;
            }
            case HostRoot: {
              var _updateQueue = finishedWork.updateQueue;
              if (_updateQueue !== null) {
                var _instance = null;
                if (finishedWork.child !== null) {
                  switch (finishedWork.child.tag) {
                    case HostComponent:
                      _instance = getPublicInstance(finishedWork.child.stateNode);
                      break;
                    case ClassComponent:
                      _instance = finishedWork.child.stateNode;
                      break;
                  }
                }
                commitUpdateQueue(finishedWork, _updateQueue, _instance);
              }
              return;
            }
            case HostComponent: {
              var _instance2 = finishedWork.stateNode;
              if (current2 === null && finishedWork.flags & Update) {
                var type = finishedWork.type;
                var props = finishedWork.memoizedProps;
                commitMount(_instance2, type, props);
              }
              return;
            }
            case HostText: {
              return;
            }
            case HostPortal: {
              return;
            }
            case Profiler: {
              {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                var effectDuration = finishedWork.stateNode.effectDuration;
                var commitTime2 = getCommitTime();
                if (typeof onRender === "function") {
                  {
                    onRender(finishedWork.memoizedProps.id, current2 === null ? "mount" : "update", finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2, finishedRoot.memoizedInteractions);
                  }
                }
              }
              return;
            }
            case SuspenseComponent: {
              commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              return;
            }
            case SuspenseListComponent:
            case IncompleteClassComponent:
            case FundamentalComponent:
            case ScopeComponent:
            case OffscreenComponent:
            case LegacyHiddenComponent:
              return;
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                var instance = node.stateNode;
                if (isHidden) {
                  hideInstance(instance);
                } else {
                  unhideInstance(node.stateNode, node.memoizedProps);
                }
              } else if (node.tag === HostText) {
                var _instance3 = node.stateNode;
                if (isHidden) {
                  hideTextInstance(_instance3);
                } else {
                  unhideTextInstance(_instance3, node.memoizedProps);
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork)
                ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              ref(instanceToUse);
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentName(finishedWork.type));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function commitDetachRef(current2) {
          var currentRef = current2.ref;
          if (currentRef !== null) {
            if (typeof currentRef === "function") {
              currentRef(null);
            } else {
              currentRef.current = null;
            }
          }
        }
        function commitUnmount(finishedRoot, current2, renderPriorityLevel) {
          onCommitUnmount(current2);
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              var updateQueue = current2.updateQueue;
              if (updateQueue !== null) {
                var lastEffect = updateQueue.lastEffect;
                if (lastEffect !== null) {
                  var firstEffect = lastEffect.next;
                  var effect = firstEffect;
                  do {
                    var _effect2 = effect, destroy = _effect2.destroy, tag = _effect2.tag;
                    if (destroy !== void 0) {
                      if ((tag & Passive$1) !== NoFlags$1) {
                        enqueuePendingPassiveHookEffectUnmount(current2, effect);
                      } else {
                        {
                          safelyCallDestroy(current2, destroy);
                        }
                      }
                    }
                    effect = effect.next;
                  } while (effect !== firstEffect);
                }
              }
              return;
            }
            case ClassComponent: {
              safelyDetachRef(current2);
              var instance = current2.stateNode;
              if (typeof instance.componentWillUnmount === "function") {
                safelyCallComponentWillUnmount(current2, instance);
              }
              return;
            }
            case HostComponent: {
              safelyDetachRef(current2);
              return;
            }
            case HostPortal: {
              {
                unmountHostComponents(finishedRoot, current2);
              }
              return;
            }
            case FundamentalComponent: {
              return;
            }
            case DehydratedFragment: {
              return;
            }
            case ScopeComponent: {
              return;
            }
          }
        }
        function commitNestedUnmounts(finishedRoot, root2, renderPriorityLevel) {
          var node = root2;
          while (true) {
            commitUnmount(finishedRoot, node);
            if (node.child !== null && node.tag !== HostPortal) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === root2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === root2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function detachFiberMutation(fiber) {
          fiber.alternate = null;
          fiber.child = null;
          fiber.dependencies = null;
          fiber.firstEffect = null;
          fiber.lastEffect = null;
          fiber.memoizedProps = null;
          fiber.memoizedState = null;
          fiber.pendingProps = null;
          fiber.return = null;
          fiber.updateQueue = null;
          {
            fiber._debugOwner = null;
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          {
            {
              throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings:
            while (true) {
              while (node.sibling === null) {
                if (node.return === null || isHostParent(node.return)) {
                  return null;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
              while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
                if (node.flags & Placement2) {
                  continue siblings;
                }
                if (node.child === null || node.tag === HostPortal) {
                  continue siblings;
                } else {
                  node.child.return = node;
                  node = node.child;
                }
              }
              if (!(node.flags & Placement2)) {
                return node.stateNode;
              }
            }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          var parent;
          var isContainer;
          var parentStateNode = parentFiber.stateNode;
          switch (parentFiber.tag) {
            case HostComponent:
              parent = parentStateNode;
              isContainer = false;
              break;
            case HostRoot:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case HostPortal:
              parent = parentStateNode.containerInfo;
              isContainer = true;
              break;
            case FundamentalComponent:
            default: {
              {
                throw Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          if (parentFiber.flags & ContentReset) {
            resetTextContent(parent);
            parentFiber.flags &= ~ContentReset;
          }
          var before = getHostSibling(finishedWork);
          if (isContainer) {
            insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
          } else {
            insertOrAppendPlacementNode(finishedWork, before, parent);
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost || enableFundamentalAPI) {
            var stateNode = isHost ? node.stateNode : node.stateNode.instance;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal)
            ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function unmountHostComponents(finishedRoot, current2, renderPriorityLevel) {
          var node = current2;
          var currentParentIsValid = false;
          var currentParent;
          var currentParentIsContainer;
          while (true) {
            if (!currentParentIsValid) {
              var parent = node.return;
              findParent:
                while (true) {
                  if (!(parent !== null)) {
                    {
                      throw Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var parentStateNode = parent.stateNode;
                  switch (parent.tag) {
                    case HostComponent:
                      currentParent = parentStateNode;
                      currentParentIsContainer = false;
                      break findParent;
                    case HostRoot:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                    case HostPortal:
                      currentParent = parentStateNode.containerInfo;
                      currentParentIsContainer = true;
                      break findParent;
                  }
                  parent = parent.return;
                }
              currentParentIsValid = true;
            }
            if (node.tag === HostComponent || node.tag === HostText) {
              commitNestedUnmounts(finishedRoot, node);
              if (currentParentIsContainer) {
                removeChildFromContainer(currentParent, node.stateNode);
              } else {
                removeChild(currentParent, node.stateNode);
              }
            } else if (node.tag === HostPortal) {
              if (node.child !== null) {
                currentParent = node.stateNode.containerInfo;
                currentParentIsContainer = true;
                node.child.return = node;
                node = node.child;
                continue;
              }
            } else {
              commitUnmount(finishedRoot, node);
              if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
            }
            if (node === current2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === current2) {
                return;
              }
              node = node.return;
              if (node.tag === HostPortal) {
                currentParentIsValid = false;
              }
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function commitDeletion(finishedRoot, current2, renderPriorityLevel) {
          {
            unmountHostComponents(finishedRoot, current2);
          }
          var alternate = current2.alternate;
          detachFiberMutation(current2);
          if (alternate !== null) {
            detachFiberMutation(alternate);
          }
        }
        function commitWork(current2, finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
            case Block: {
              {
                commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
              }
              return;
            }
            case ClassComponent: {
              return;
            }
            case HostComponent: {
              var instance = finishedWork.stateNode;
              if (instance != null) {
                var newProps = finishedWork.memoizedProps;
                var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                var type = finishedWork.type;
                var updatePayload = finishedWork.updateQueue;
                finishedWork.updateQueue = null;
                if (updatePayload !== null) {
                  commitUpdate(instance, updatePayload, type, oldProps, newProps);
                }
              }
              return;
            }
            case HostText: {
              if (!(finishedWork.stateNode !== null)) {
                {
                  throw Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              var textInstance = finishedWork.stateNode;
              var newText = finishedWork.memoizedProps;
              var oldText = current2 !== null ? current2.memoizedProps : newText;
              commitTextUpdate(textInstance, oldText, newText);
              return;
            }
            case HostRoot: {
              {
                var _root = finishedWork.stateNode;
                if (_root.hydrate) {
                  _root.hydrate = false;
                  commitHydratedContainer(_root.containerInfo);
                }
              }
              return;
            }
            case Profiler: {
              return;
            }
            case SuspenseComponent: {
              commitSuspenseComponent(finishedWork);
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case SuspenseListComponent: {
              attachSuspenseRetryListeners(finishedWork);
              return;
            }
            case IncompleteClassComponent: {
              return;
            }
            case FundamentalComponent: {
              break;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              var newState = finishedWork.memoizedState;
              var isHidden = newState !== null;
              hideOrUnhideAllChildren(finishedWork, isHidden);
              return;
            }
          }
          {
            {
              throw Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function commitSuspenseComponent(finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState !== null) {
            markCommitTimeOfFallback();
            {
              var primaryChildParent = finishedWork.child;
              hideOrUnhideAllChildren(primaryChildParent, true);
            }
          }
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                {
                  if (wakeable.__reactDoNotTraceInteractions !== true) {
                    retry = tracing.unstable_wrap(retry);
                  }
                }
                retryCache.add(wakeable);
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function isSuspenseBoundaryBeingHidden(current2, finishedWork) {
          if (current2 !== null) {
            var oldState = current2.memoizedState;
            if (oldState === null || oldState.dehydrated !== null) {
              var newState = finishedWork.memoizedState;
              return newState !== null && newState.dehydrated === null;
            }
          }
          return false;
        }
        function commitResetTextContent(current2) {
          resetTextContent(current2.stateNode);
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor$1 = Symbol.for;
          COMPONENT_TYPE = symbolFor$1("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor$1("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor$1("selector.role");
          TEST_NAME_TYPE = symbolFor$1("selector.test_id");
          TEXT_TYPE = symbolFor$1("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
        var NoContext = 0;
        var BatchedContext = 1;
        var EventContext = 2;
        var DiscreteEventContext = 4;
        var LegacyUnbatchedContext = 8;
        var RenderContext = 16;
        var CommitContext = 32;
        var RetryAfterError = 64;
        var RootIncomplete = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootIncomplete;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var mostRecentlyUpdatedRoot = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var nextEffect = null;
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsRenderPriority = NoPriority$1;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveHookEffectsMount = [];
        var pendingPassiveHookEffectsUnmount = [];
        var rootsWithPendingDiscreteUpdates = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var spawnedWorkDuringRender = null;
        var currentEventTime = NoTimestamp;
        var currentEventWipLanes = NoLanes;
        var currentEventPendingLanes = NoLanes;
        var isFlushingPassiveEffects = false;
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (currentEventPendingLanes !== NoLanes) {
              currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
            }
            return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
          }
          var schedulerPriority = getCurrentPriorityLevel();
          var lane;
          if ((executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
            lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
          } else {
            var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);
            lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
          }
          return lane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & BlockingMode) === NoMode) {
            return SyncLane;
          } else if ((mode & ConcurrentMode) === NoMode) {
            return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
          }
          if (currentEventWipLanes === NoLanes) {
            currentEventWipLanes = workInProgressRootIncludedLanes;
          }
          return findRetryLane(currentEventWipLanes);
        }
        function scheduleUpdateOnFiber(fiber, lane, eventTime) {
          checkForNestedUpdates();
          warnAboutRenderPhaseUpdatesInDEV(fiber);
          var root2 = markUpdateLaneFromFiberToRoot(fiber, lane);
          if (root2 === null) {
            warnAboutUpdateOnUnmountedFiberInDEV(fiber);
            return null;
          }
          markRootUpdated(root2, lane, eventTime);
          if (root2 === workInProgressRoot) {
            {
              workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
            }
            if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
              markRootSuspended$1(root2, workInProgressRootRenderLanes);
            }
          }
          var priorityLevel = getCurrentPriorityLevel();
          if (lane === SyncLane) {
            if ((executionContext & LegacyUnbatchedContext) !== NoContext && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              schedulePendingInteractions(root2, lane);
              performSyncWorkOnRoot(root2);
            } else {
              ensureRootIsScheduled(root2, eventTime);
              schedulePendingInteractions(root2, lane);
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          } else {
            if ((executionContext & DiscreteEventContext) !== NoContext && (priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
              if (rootsWithPendingDiscreteUpdates === null) {
                rootsWithPendingDiscreteUpdates = /* @__PURE__ */ new Set([root2]);
              } else {
                rootsWithPendingDiscreteUpdates.add(root2);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, lane);
          }
          mostRecentlyUpdatedRoot = root2;
        }
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement2 | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement2 | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          var newCallbackPriority = returnNextLanesPriority();
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback(existingCallbackNode);
              root2.callbackNode = null;
              root2.callbackPriority = NoLanePriority;
            }
            return;
          }
          if (existingCallbackNode !== null) {
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority) {
              return;
            }
            cancelCallback(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLanePriority) {
            newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
          } else if (newCallbackPriority === SyncBatchedLanePriority) {
            newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root2));
          } else {
            var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
            newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2) {
          currentEventTime = NoTimestamp;
          currentEventWipLanes = NoLanes;
          currentEventPendingLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var exitStatus = renderRootConcurrent(root2, lanes);
          if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
            prepareFreshStack(root2, NoLanes);
          } else if (exitStatus !== RootIncomplete) {
            if (exitStatus === RootErrored) {
              executionContext |= RetryAfterError;
              if (root2.hydrate) {
                root2.hydrate = false;
                clearContainer(root2.containerInfo);
              }
              lanes = getLanesToRetrySynchronouslyOnError(root2);
              if (lanes !== NoLanes) {
                exitStatus = renderRootSync(root2, lanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            finishConcurrentRender(root2, exitStatus, lanes);
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootIncomplete:
            case RootFatalErrored: {
              {
                {
                  throw Error("Root did not complete. This is a bug in React.");
                }
              }
            }
            case RootErrored: {
              commitRoot(root2);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2);
              break;
            }
            case RootCompleted: {
              commitRoot(root2);
              break;
            }
            default: {
              {
                {
                  throw Error("Unknown root exit status.");
                }
              }
            }
          }
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          flushPassiveEffects();
          var lanes;
          var exitStatus;
          if (root2 === workInProgressRoot && includesSomeLane(root2.expiredLanes, workInProgressRootRenderLanes)) {
            lanes = workInProgressRootRenderLanes;
            exitStatus = renderRootSync(root2, lanes);
            if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
              lanes = getNextLanes(root2, lanes);
              exitStatus = renderRootSync(root2, lanes);
            }
          } else {
            lanes = getNextLanes(root2, NoLanes);
            exitStatus = renderRootSync(root2, lanes);
          }
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            executionContext |= RetryAfterError;
            if (root2.hydrate) {
              root2.hydrate = false;
              clearContainer(root2.containerInfo);
            }
            lanes = getLanesToRetrySynchronouslyOnError(root2);
            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root2, lanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushDiscreteUpdates() {
          if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                error("unstable_flushDiscreteUpdates: Cannot flush updates when React is already rendering.");
              }
            }
            return;
          }
          flushPendingDiscreteUpdates();
          flushPassiveEffects();
        }
        function flushPendingDiscreteUpdates() {
          if (rootsWithPendingDiscreteUpdates !== null) {
            var roots = rootsWithPendingDiscreteUpdates;
            rootsWithPendingDiscreteUpdates = null;
            roots.forEach(function(root2) {
              markDiscreteUpdatesExpired(root2);
              ensureRootIsScheduled(root2, now());
            });
          }
          flushSyncCallbackQueue();
        }
        function batchedUpdates$1(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function batchedEventUpdates$1(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext |= EventContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function discreteUpdates$1(fn, a2, b2, c2, d2) {
          var prevExecutionContext = executionContext;
          executionContext |= DiscreteEventContext;
          {
            try {
              return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a2, b2, c2, d2));
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext) {
                resetRenderTimer();
                flushSyncCallbackQueue();
              }
            }
          }
        }
        function unbatchedUpdates(fn, a2) {
          var prevExecutionContext = executionContext;
          executionContext &= ~BatchedContext;
          executionContext |= LegacyUnbatchedContext;
          try {
            return fn(a2);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext) {
              resetRenderTimer();
              flushSyncCallbackQueue();
            }
          }
        }
        function flushSync(fn, a2) {
          var prevExecutionContext = executionContext;
          if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
            {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
            return fn(a2);
          }
          executionContext |= BatchedContext;
          {
            try {
              if (fn) {
                return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a2));
              } else {
                return void 0;
              }
            } finally {
              executionContext = prevExecutionContext;
              flushSyncCallbackQueue();
            }
          }
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              unwindInterruptedWork(interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          workInProgress = createWorkInProgress(root2.current, null);
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootIncomplete;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          {
            spawnedWorkDuringRender = null;
          }
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function pushInteractions(root2) {
          {
            var prevInteractions = tracing.__interactionsRef.current;
            tracing.__interactionsRef.current = root2.memoizedInteractions;
            return prevInteractions;
          }
        }
        function popInteractions(prevInteractions) {
          {
            tracing.__interactionsRef.current = prevInteractions;
          }
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError() {
          if (workInProgressRootExitStatus !== RootCompleted) {
            workInProgressRootExitStatus = RootErrored;
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootIncomplete;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            prepareFreshStack(root2, lanes);
            startWorkOnPendingInteractions(root2, lanes);
          }
          var prevInteractions = pushInteractions(root2);
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            {
              {
                throw Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
            startWorkOnPendingInteractions(root2, lanes);
          }
          var prevInteractions = pushInteractions(root2);
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          {
            popInteractions(prevInteractions);
          }
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            return RootIncomplete;
          } else {
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
              resetChildLanes(completedWork);
              if (returnFiber !== null && (returnFiber.flags & Incomplete) === NoFlags) {
                if (returnFiber.firstEffect === null) {
                  returnFiber.firstEffect = completedWork.firstEffect;
                }
                if (completedWork.lastEffect !== null) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
                  }
                  returnFiber.lastEffect = completedWork.lastEffect;
                }
                var flags = completedWork.flags;
                if (flags > PerformedWork) {
                  if (returnFiber.lastEffect !== null) {
                    returnFiber.lastEffect.nextEffect = completedWork;
                  } else {
                    returnFiber.firstEffect = completedWork;
                  }
                  returnFiber.lastEffect = completedWork;
                }
              }
            } else {
              var _next = unwindWork(completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.firstEffect = returnFiber.lastEffect = null;
                returnFiber.flags |= Incomplete;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootIncomplete) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function resetChildLanes(completedWork) {
          if ((completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
            return;
          }
          var newChildLanes = NoLanes;
          if ((completedWork.mode & ProfileMode) !== NoMode) {
            var actualDuration = completedWork.actualDuration;
            var treeBaseDuration = completedWork.selfBaseDuration;
            var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
            var child = completedWork.child;
            while (child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
              if (shouldBubbleActualDurations) {
                actualDuration += child.actualDuration;
              }
              treeBaseDuration += child.treeBaseDuration;
              child = child.sibling;
            }
            var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;
            if (isTimedOutSuspense) {
              var primaryChildFragment = completedWork.child;
              if (primaryChildFragment !== null) {
                treeBaseDuration -= primaryChildFragment.treeBaseDuration;
              }
            }
            completedWork.actualDuration = actualDuration;
            completedWork.treeBaseDuration = treeBaseDuration;
          } else {
            var _child = completedWork.child;
            while (_child !== null) {
              newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
              _child = _child.sibling;
            }
          }
          completedWork.childLanes = newChildLanes;
        }
        function commitRoot(root2) {
          var renderPriorityLevel = getCurrentPriorityLevel();
          runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root2, renderPriorityLevel));
          return null;
        }
        function commitRootImpl(root2, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Should not already be working.");
            }
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          if (finishedWork === null) {
            return null;
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (!(finishedWork !== root2.current)) {
            {
              throw Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          root2.callbackNode = null;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (rootsWithPendingDiscreteUpdates !== null) {
            if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root2)) {
              rootsWithPendingDiscreteUpdates.delete(root2);
            }
          }
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          var firstEffect;
          if (finishedWork.flags > PerformedWork) {
            if (finishedWork.lastEffect !== null) {
              finishedWork.lastEffect.nextEffect = finishedWork;
              firstEffect = finishedWork.firstEffect;
            } else {
              firstEffect = finishedWork;
            }
          } else {
            firstEffect = finishedWork.firstEffect;
          }
          if (firstEffect !== null) {
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            var prevInteractions = pushInteractions(root2);
            ReactCurrentOwner$2.current = null;
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            shouldFireAfterActiveInstanceBlur = false;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitBeforeMutationEffects, null);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            focusedInstanceHandle = null;
            {
              recordCommitTime();
            }
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitMutationEffects, null, root2, renderPriorityLevel);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            nextEffect = firstEffect;
            do {
              {
                invokeGuardedCallback(null, commitLayoutEffects, null, root2, lanes);
                if (hasCaughtError()) {
                  if (!(nextEffect !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var _error2 = clearCaughtError();
                  captureCommitPhaseError(nextEffect, _error2);
                  nextEffect = nextEffect.nextEffect;
                }
              }
            } while (nextEffect !== null);
            nextEffect = null;
            requestPaint();
            {
              popInteractions(prevInteractions);
            }
            executionContext = prevExecutionContext;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
            pendingPassiveEffectsRenderPriority = renderPriorityLevel;
          } else {
            nextEffect = firstEffect;
            while (nextEffect !== null) {
              var nextNextEffect = nextEffect.nextEffect;
              nextEffect.nextEffect = null;
              if (nextEffect.flags & Deletion) {
                detachFiberAfterEffects(nextEffect);
              }
              nextEffect = nextNextEffect;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes !== NoLanes) {
            {
              if (spawnedWorkDuringRender !== null) {
                var expirationTimes = spawnedWorkDuringRender;
                spawnedWorkDuringRender = null;
                for (var i2 = 0; i2 < expirationTimes.length; i2++) {
                  scheduleInteractions(root2, expirationTimes[i2], root2.memoizedInteractions);
                }
              }
              schedulePendingInteractions(root2, remainingLanes);
            }
          } else {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              finishPendingInteractions(root2, lanes);
            }
          }
          if (remainingLanes === SyncLane) {
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var _error3 = firstUncaughtError;
            firstUncaughtError = null;
            throw _error3;
          }
          if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
            return null;
          }
          flushSyncCallbackQueue();
          return null;
        }
        function commitBeforeMutationEffects() {
          while (nextEffect !== null) {
            var current2 = nextEffect.alternate;
            if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
              if ((nextEffect.flags & Deletion) !== NoFlags) {
                if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              } else {
                if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current2, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
                  shouldFireAfterActiveInstanceBlur = true;
                }
              }
            }
            var flags = nextEffect.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(nextEffect);
              commitBeforeMutationLifeCycles(current2, nextEffect);
              resetCurrentFiber();
            }
            if ((flags & Passive) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback(NormalPriority$1, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitMutationEffects(root2, renderPriorityLevel) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & ContentReset) {
              commitResetTextContent(nextEffect);
            }
            if (flags & Ref) {
              var current2 = nextEffect.alternate;
              if (current2 !== null) {
                commitDetachRef(current2);
              }
            }
            var primaryFlags = flags & (Placement2 | Update | Deletion | Hydrating);
            switch (primaryFlags) {
              case Placement2: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement2;
                break;
              }
              case PlacementAndUpdate: {
                commitPlacement(nextEffect);
                nextEffect.flags &= ~Placement2;
                var _current = nextEffect.alternate;
                commitWork(_current, nextEffect);
                break;
              }
              case Hydrating: {
                nextEffect.flags &= ~Hydrating;
                break;
              }
              case HydratingAndUpdate: {
                nextEffect.flags &= ~Hydrating;
                var _current2 = nextEffect.alternate;
                commitWork(_current2, nextEffect);
                break;
              }
              case Update: {
                var _current3 = nextEffect.alternate;
                commitWork(_current3, nextEffect);
                break;
              }
              case Deletion: {
                commitDeletion(root2, nextEffect);
                break;
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function commitLayoutEffects(root2, committedLanes) {
          while (nextEffect !== null) {
            setCurrentFiber(nextEffect);
            var flags = nextEffect.flags;
            if (flags & (Update | Callback)) {
              var current2 = nextEffect.alternate;
              commitLifeCycles(root2, current2, nextEffect);
            }
            {
              if (flags & Ref) {
                commitAttachRef(nextEffect);
              }
            }
            resetCurrentFiber();
            nextEffect = nextEffect.nextEffect;
          }
        }
        function flushPassiveEffects() {
          if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
            var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
            pendingPassiveEffectsRenderPriority = NoPriority$1;
            {
              return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
            }
          }
          return false;
        }
        function enqueuePendingPassiveHookEffectMount(fiber, effect) {
          pendingPassiveHookEffectsMount.push(effect, fiber);
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
          pendingPassiveHookEffectsUnmount.push(effect, fiber);
          {
            fiber.flags |= PassiveUnmountPendingDev;
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.flags |= PassiveUnmountPendingDev;
            }
          }
          if (!rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = true;
            scheduleCallback(NormalPriority$1, function() {
              flushPassiveEffects();
              return null;
            });
          }
        }
        function invokePassiveEffectCreate(effect) {
          var create2 = effect.create;
          effect.destroy = create2();
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
            {
              throw Error("Cannot flush passive effects while already rendering.");
            }
          }
          {
            isFlushingPassiveEffects = true;
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          var prevInteractions = pushInteractions(root2);
          var unmountEffects = pendingPassiveHookEffectsUnmount;
          pendingPassiveHookEffectsUnmount = [];
          for (var i2 = 0; i2 < unmountEffects.length; i2 += 2) {
            var _effect = unmountEffects[i2];
            var fiber = unmountEffects[i2 + 1];
            var destroy = _effect.destroy;
            _effect.destroy = void 0;
            {
              fiber.flags &= ~PassiveUnmountPendingDev;
              var alternate = fiber.alternate;
              if (alternate !== null) {
                alternate.flags &= ~PassiveUnmountPendingDev;
              }
            }
            if (typeof destroy === "function") {
              {
                setCurrentFiber(fiber);
                {
                  invokeGuardedCallback(null, destroy, null);
                }
                if (hasCaughtError()) {
                  if (!(fiber !== null)) {
                    {
                      throw Error("Should be working on an effect.");
                    }
                  }
                  var error2 = clearCaughtError();
                  captureCommitPhaseError(fiber, error2);
                }
                resetCurrentFiber();
              }
            }
          }
          var mountEffects = pendingPassiveHookEffectsMount;
          pendingPassiveHookEffectsMount = [];
          for (var _i = 0; _i < mountEffects.length; _i += 2) {
            var _effect2 = mountEffects[_i];
            var _fiber = mountEffects[_i + 1];
            {
              setCurrentFiber(_fiber);
              {
                invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
              }
              if (hasCaughtError()) {
                if (!(_fiber !== null)) {
                  {
                    throw Error("Should be working on an effect.");
                  }
                }
                var _error4 = clearCaughtError();
                captureCommitPhaseError(_fiber, _error4);
              }
              resetCurrentFiber();
            }
          }
          var effect = root2.current.firstEffect;
          while (effect !== null) {
            var nextNextEffect = effect.nextEffect;
            effect.nextEffect = null;
            if (effect.flags & Deletion) {
              detachFiberAfterEffects(effect);
            }
            effect = nextNextEffect;
          }
          {
            popInteractions(prevInteractions);
            finishPendingInteractions(root2, lanes);
          }
          {
            isFlushingPassiveEffects = false;
          }
          executionContext = prevExecutionContext;
          flushSyncCallbackQueue();
          nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValue(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          enqueueUpdate(rootFiber, update);
          var eventTime = requestEventTime();
          var root2 = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, SyncLane);
          }
        }
        function captureCommitPhaseError(sourceFiber, error2) {
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error2);
            return;
          }
          var fiber = sourceFiber.return;
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error2);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValue(error2, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                enqueueUpdate(fiber, update);
                var eventTime = requestEventTime();
                var root2 = markUpdateLaneFromFiberToRoot(fiber, SyncLane);
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                  schedulePendingInteractions(root2, SyncLane);
                } else {
                  if (typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                    try {
                      instance.componentDidCatch(error2, errorInfo);
                    } catch (errorToIgnore) {
                    }
                  }
                }
                return;
              }
            }
            fiber = fiber.return;
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
          schedulePendingInteractions(root2, pingedLanes);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
            schedulePendingInteractions(root2, retryLane);
          }
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          {
            retryCache = boundaryFiber.stateNode;
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            {
              {
                throw Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
              }
            }
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var didWarnStateUpdateForUnmountedComponent = null;
        function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
          {
            var tag = fiber.tag;
            if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
              return;
            }
            if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
              return;
            }
            var componentName = getComponentName(fiber.type) || "ReactComponent";
            if (didWarnStateUpdateForUnmountedComponent !== null) {
              if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForUnmountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForUnmountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            if (isFlushingPassiveEffects)
              ;
            else {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in %s.", tag === ClassComponent ? "the componentWillUnmount method" : "a useEffect cleanup function");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                throw replayError;
              } else {
                throw originalError;
              }
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentName(fiber.type) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        var IsThisRendererActing = {
          current: false
        };
        function warnIfNotScopedWithMatchingAct(fiber) {
          {
            if (IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("It looks like you're using the wrong act() around your test interactions.\nBe sure to use the matching version of act() corresponding to your renderer:\n\n// for react-dom:\nimport {act} from 'react-dom/test-utils';\n// ...\nact(() => ...);\n\n// for react-test-renderer:\nimport TestRenderer from react-test-renderer';\nconst {act} = TestRenderer;\n// ...\nact(() => ...);");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
          {
            if ((fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              error("An update to %s ran an effect, but was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
            }
          }
        }
        function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
          {
            if (executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentName(fiber.type));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV;
        var didWarnAboutUnmockedScheduler = false;
        function warnIfUnmockedScheduler(fiber) {
          {
            if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === void 0) {
              if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
                didWarnAboutUnmockedScheduler = true;
                error(`In Concurrent or Sync modes, the "scheduler" module needs to be mocked to guarantee consistent behaviour across tests and browsers. For example, with jest: 
jest.mock('scheduler', () => require('scheduler/unstable_mock'));

For more info, visit https://reactjs.org/link/mock-scheduler`);
              }
            }
          }
        }
        function computeThreadID(root2, lane) {
          return lane * 1e3 + root2.interactionThreadID;
        }
        function markSpawnedWork(lane) {
          if (spawnedWorkDuringRender === null) {
            spawnedWorkDuringRender = [lane];
          } else {
            spawnedWorkDuringRender.push(lane);
          }
        }
        function scheduleInteractions(root2, lane, interactions) {
          if (interactions.size > 0) {
            var pendingInteractionMap = root2.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(lane);
            if (pendingInteractions != null) {
              interactions.forEach(function(interaction) {
                if (!pendingInteractions.has(interaction)) {
                  interaction.__count++;
                }
                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(lane, new Set(interactions));
              interactions.forEach(function(interaction) {
                interaction.__count++;
              });
            }
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, lane);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
        function schedulePendingInteractions(root2, lane) {
          scheduleInteractions(root2, lane, tracing.__interactionsRef.current);
        }
        function startWorkOnPendingInteractions(root2, lanes) {
          var interactions = /* @__PURE__ */ new Set();
          root2.pendingInteractionMap.forEach(function(scheduledInteractions, scheduledLane) {
            if (includesSomeLane(lanes, scheduledLane)) {
              scheduledInteractions.forEach(function(interaction) {
                return interactions.add(interaction);
              });
            }
          });
          root2.memoizedInteractions = interactions;
          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null) {
              var threadID = computeThreadID(root2, lanes);
              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error2) {
                scheduleCallback(ImmediatePriority$1, function() {
                  throw error2;
                });
              }
            }
          }
        }
        function finishPendingInteractions(root2, committedLanes) {
          var remainingLanesAfterCommit = root2.pendingLanes;
          var subscriber;
          try {
            subscriber = tracing.__subscriberRef.current;
            if (subscriber !== null && root2.memoizedInteractions.size > 0) {
              var threadID = computeThreadID(root2, committedLanes);
              subscriber.onWorkStopped(root2.memoizedInteractions, threadID);
            }
          } catch (error2) {
            scheduleCallback(ImmediatePriority$1, function() {
              throw error2;
            });
          } finally {
            var pendingInteractionMap = root2.pendingInteractionMap;
            pendingInteractionMap.forEach(function(scheduledInteractions, lane) {
              if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
                pendingInteractionMap.delete(lane);
                scheduledInteractions.forEach(function(interaction) {
                  interaction.__count--;
                  if (subscriber !== null && interaction.__count === 0) {
                    try {
                      subscriber.onInteractionScheduledWorkCompleted(interaction);
                    } catch (error2) {
                      scheduleCallback(ImmediatePriority$1, function() {
                        throw error2;
                      });
                    }
                  }
                });
              }
            });
          }
        }
        function shouldForceFlushFallbacksInDEV() {
          return actingUpdatesScopeDepth > 0;
        }
        var actingUpdatesScopeDepth = 0;
        function detachFiberAfterEffects(fiber) {
          fiber.sibling = null;
          fiber.stateNode = null;
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e2) {
            hasBadMapPolyfill = true;
          }
        }
        var debugCounter = 1;
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.nextEffect = null;
          this.firstEffect = null;
          this.lastEffect = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugID = debugCounter++;
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugID = current2._debugID;
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.nextEffect = null;
            workInProgress2.firstEffect = null;
            workInProgress2.lastEffect = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= Placement2;
          workInProgress2.nextEffect = null;
          workInProgress2.firstEffect = null;
          workInProgress2.lastEffect = null;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode | BlockingMode | StrictMode;
          } else if (tag === BlockingRoot) {
            mode = BlockingMode | StrictMode;
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag:
              switch (type) {
                case REACT_FRAGMENT_TYPE:
                  return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                case REACT_DEBUG_TRACING_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= DebugTracingMode;
                  break;
                case REACT_STRICT_MODE_TYPE:
                  fiberTag = Mode;
                  mode |= StrictMode;
                  break;
                case REACT_PROFILER_TYPE:
                  return createFiberFromProfiler(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_TYPE:
                  return createFiberFromSuspense(pendingProps, mode, lanes, key);
                case REACT_SUSPENSE_LIST_TYPE:
                  return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                case REACT_OFFSCREEN_TYPE:
                  return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                case REACT_LEGACY_HIDDEN_TYPE:
                  return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);
                case REACT_SCOPE_TYPE:
                default: {
                  if (typeof type === "object" && type !== null) {
                    switch (type.$$typeof) {
                      case REACT_PROVIDER_TYPE:
                        fiberTag = ContextProvider;
                        break getTag;
                      case REACT_CONTEXT_TYPE:
                        fiberTag = ContextConsumer;
                        break getTag;
                      case REACT_FORWARD_REF_TYPE:
                        fiberTag = ForwardRef;
                        {
                          resolvedType = resolveForwardRefForHotReloading(resolvedType);
                        }
                        break getTag;
                      case REACT_MEMO_TYPE:
                        fiberTag = MemoComponent;
                        break getTag;
                      case REACT_LAZY_TYPE:
                        fiberTag = LazyComponent;
                        resolvedType = null;
                        break getTag;
                      case REACT_BLOCK_TYPE:
                        fiberTag = Block;
                        break getTag;
                    }
                  }
                  var info = "";
                  {
                    if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                      info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                    }
                    var ownerName = owner ? getComponentName(owner.type) : null;
                    if (ownerName) {
                      info += "\n\nCheck the render method of `" + ownerName + "`.";
                    }
                  }
                  {
                    {
                      throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info);
                    }
                  }
                }
              }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment2, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" as a prop');
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.type = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.type = REACT_SUSPENSE_TYPE;
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_SUSPENSE_LIST_TYPE;
          }
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_OFFSCREEN_TYPE;
          }
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
          var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode);
          {
            fiber.type = REACT_LEGACY_HIDDEN_TYPE;
          }
          fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          fiber.type = "DELETED";
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.nextEffect = source.nextEffect;
          target.firstEffect = source.firstEffect;
          target.lastEffect = source.lastEffect;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugID = source._debugID;
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.hydrate = hydrate2;
          this.callbackNode = null;
          this.callbackPriority = NoLanePriority;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.interactionThreadID = tracing.unstable_getThreadID();
            this.memoizedInteractions = /* @__PURE__ */ new Set();
            this.pendingInteractionMap = /* @__PURE__ */ new Map();
          }
          {
            switch (tag) {
              case BlockingRoot:
                this._debugRootType = "createBlockingRoot()";
                break;
              case ConcurrentRoot:
                this._debugRootType = "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = "createLegacyRoot()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, hydrationCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2);
          var uninitializedFiber = createHostRootFiber(tag);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        function createPortal2(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          return {
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                {
                  {
                    throw Error("Unable to find node on an unmounted component.");
                  }
                }
              } else {
                {
                  {
                    throw Error("Argument appears to not be a ReactComponent. Keys: " + Object.keys(component));
                  }
                }
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictMode) {
              var componentName = getComponentName(fiber.type) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrate2, hydrationCallbacks) {
          return createFiberRoot(containerInfo, tag, hydrate2);
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          {
            if (typeof jest !== "undefined") {
              warnIfUnmockedScheduler(current$1);
              warnIfNotScopedWithMatchingAct(current$1);
            }
          }
          var lane = requestUpdateLane(current$1);
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentName(current.type) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          enqueueUpdate(current$1, update);
          scheduleUpdateOnFiber(current$1, lane, eventTime);
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptUserBlockingHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = InputDiscreteHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = SelectiveHydrationLane;
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(fiber);
          scheduleUpdateOnFiber(fiber, lane, eventTime);
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function runWithPriority$2(priority, fn) {
          try {
            setCurrentUpdateLanePriority(priority);
            return fn();
          } finally {
          }
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          if (hostFiber.tag === FundamentalComponent) {
            return hostFiber.stateNode.instance;
          }
          return hostFiber.stateNode;
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === path.length) {
              if (Array.isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (Array.isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index2 + 1);
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn3("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i2 = 0; i2 < newPath.length - 1; i2++) {
                if (oldPath[i2] !== newPath[i2]) {
                  warn3("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = _assign({}, fiber.memoizedProps);
              scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          scheduleUpdate = function(fiber) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            getCurrentFiber: getCurrentFiberForDevTools
          });
        }
        function ReactDOMRoot(container, options2) {
          this._internalRoot = createRootImpl(container, ConcurrentRoot, options2);
        }
        function ReactDOMBlockingRoot(container, tag, options2) {
          this._internalRoot = createRootImpl(container, tag, options2);
        }
        ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          var container = root2.containerInfo;
          updateContainer(null, root2, null, function() {
            unmarkContainerAsRoot(container);
          });
        };
        function createRootImpl(container, tag, options2) {
          var hydrate2 = options2 != null && options2.hydrate === true;
          var hydrationCallbacks = options2 != null && options2.hydrationOptions || null;
          var mutableSources = options2 != null && options2.hydrationOptions != null && options2.hydrationOptions.mutableSources || null;
          var root2 = createContainer(container, tag, hydrate2);
          markContainerAsRoot(root2.current, container);
          var containerNodeType = container.nodeType;
          {
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
          }
          if (mutableSources) {
            for (var i2 = 0; i2 < mutableSources.length; i2++) {
              var mutableSource = mutableSources[i2];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return root2;
        }
        function createLegacyRoot(container, options2) {
          return new ReactDOMBlockingRoot(container, LegacyRoot, options2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        var warnedAboutHydrateAPI = false;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function shouldHydrateDueToLegacyHeuristic(container) {
          var rootElement = getReactRootElementInContainer(container);
          return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
        }
        function legacyCreateRootFromDOMContainer(container, forceHydrate) {
          var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);
          if (!shouldHydrate) {
            var warned = false;
            var rootSibling;
            while (rootSibling = container.lastChild) {
              {
                if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
                  warned = true;
                  error("render(): Target node has markup rendered by React, but there are unrelated nodes as well. This is most commonly caused by white-space inserted around server-rendered markup.");
                }
              }
              container.removeChild(rootSibling);
            }
          }
          {
            if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
              warnedAboutHydrateAPI = true;
              warn3("render(): Calling ReactDOM.render() to hydrate server-rendered markup will stop working in React v18. Replace the ReactDOM.render() call with ReactDOM.hydrate() if you want React to attach to the server HTML.");
            }
          }
          return createLegacyRoot(container, shouldHydrate ? {
            hydrate: true
          } : void 0);
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var root2 = container._reactRootContainer;
          var fiberRoot;
          if (!root2) {
            root2 = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                originalCallback.call(instance);
              };
            }
            unbatchedUpdates(function() {
              updateContainer(children, fiberRoot, parentComponent, callback);
            });
          } else {
            fiberRoot = root2._internalRoot;
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(fiberRoot);
                _originalCallback.call(instance);
              };
            }
            updateContainer(children, fiberRoot, parentComponent, callback);
          }
          return getPublicRootInstance(fiberRoot);
        }
        function findDOMNode(componentOrElement) {
          {
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentName(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call createRoot(container, {hydrate: true}).render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render3(element, container, callback) {
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          if (!isValidContainer(containerNode)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          if (!(parentComponent != null && has(parentComponent))) {
            {
              throw Error("parentComponent must be a valid React Component");
            }
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        function unmountComponentAtNode(container) {
          if (!isValidContainer(container)) {
            {
              throw Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            unbatchedUpdates(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setAttemptHydrationAtPriority(runWithPriority$2);
        var didWarnAboutUnstableCreatePortal = false;
        {
          if (typeof Map !== "function" || Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            {
              throw Error("Target container is not a DOM element.");
            }
          }
          return createPortal2(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        function unstable_createPortal(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          {
            if (!didWarnAboutUnstableCreatePortal) {
              didWarnAboutUnstableCreatePortal = true;
              warn3('The ReactDOM.unstable_createPortal() alias has been deprecated, and will be removed in React 18+. Update your code to use ReactDOM.createPortal() instead. It has the exact same API, but without the "unstable_" prefix.');
            }
          }
          return createPortal$1(children, container, key);
        }
        var Internals = {
          Events: [
            getInstanceFromNode,
            getNodeFromInstance,
            getFiberCurrentPropsFromNode,
            enqueueStateRestore,
            restoreStateIfNeeded,
            flushPassiveEffects,
            IsThisRendererActing
          ]
        };
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync;
        exports.hydrate = hydrate;
        exports.render = render3;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_createPortal = unstable_createPortal;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
      })();
    }
  }
});

// ../../../node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "../../../node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    init_react();
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  }
});

// ../../ui/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "../../ui/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
    "use strict";
    init_react();
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i2 = 0; i2 < keys.length; ++i2) {
          var key = keys[i2];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e2) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics2;
  }
});

// ../../ui/dist/ui.es.js
init_react();

// ../../ui/node_modules/@stitches/react/dist/index.mjs
init_react();
var import_react = __toESM(require_react(), 1);
var e = "colors";
var t = "sizes";
var r = "space";
var n = { gap: r, gridGap: r, columnGap: r, gridColumnGap: r, rowGap: r, gridRowGap: r, inset: r, insetBlock: r, insetBlockEnd: r, insetBlockStart: r, insetInline: r, insetInlineEnd: r, insetInlineStart: r, margin: r, marginTop: r, marginRight: r, marginBottom: r, marginLeft: r, marginBlock: r, marginBlockEnd: r, marginBlockStart: r, marginInline: r, marginInlineEnd: r, marginInlineStart: r, padding: r, paddingTop: r, paddingRight: r, paddingBottom: r, paddingLeft: r, paddingBlock: r, paddingBlockEnd: r, paddingBlockStart: r, paddingInline: r, paddingInlineEnd: r, paddingInlineStart: r, top: r, right: r, bottom: r, left: r, scrollMargin: r, scrollMarginTop: r, scrollMarginRight: r, scrollMarginBottom: r, scrollMarginLeft: r, scrollMarginX: r, scrollMarginY: r, scrollMarginBlock: r, scrollMarginBlockEnd: r, scrollMarginBlockStart: r, scrollMarginInline: r, scrollMarginInlineEnd: r, scrollMarginInlineStart: r, scrollPadding: r, scrollPaddingTop: r, scrollPaddingRight: r, scrollPaddingBottom: r, scrollPaddingLeft: r, scrollPaddingX: r, scrollPaddingY: r, scrollPaddingBlock: r, scrollPaddingBlockEnd: r, scrollPaddingBlockStart: r, scrollPaddingInline: r, scrollPaddingInlineEnd: r, scrollPaddingInlineStart: r, fontSize: "fontSizes", background: e, backgroundColor: e, backgroundImage: e, borderImage: e, border: e, borderBlock: e, borderBlockEnd: e, borderBlockStart: e, borderBottom: e, borderBottomColor: e, borderColor: e, borderInline: e, borderInlineEnd: e, borderInlineStart: e, borderLeft: e, borderLeftColor: e, borderRight: e, borderRightColor: e, borderTop: e, borderTopColor: e, caretColor: e, color: e, columnRuleColor: e, fill: e, outline: e, outlineColor: e, stroke: e, textDecorationColor: e, fontFamily: "fonts", fontWeight: "fontWeights", lineHeight: "lineHeights", letterSpacing: "letterSpacings", blockSize: t, minBlockSize: t, maxBlockSize: t, inlineSize: t, minInlineSize: t, maxInlineSize: t, width: t, minWidth: t, maxWidth: t, height: t, minHeight: t, maxHeight: t, flexBasis: t, gridTemplateColumns: t, gridTemplateRows: t, borderWidth: "borderWidths", borderTopWidth: "borderWidths", borderRightWidth: "borderWidths", borderBottomWidth: "borderWidths", borderLeftWidth: "borderWidths", borderStyle: "borderStyles", borderTopStyle: "borderStyles", borderRightStyle: "borderStyles", borderBottomStyle: "borderStyles", borderLeftStyle: "borderStyles", borderRadius: "radii", borderTopLeftRadius: "radii", borderTopRightRadius: "radii", borderBottomRightRadius: "radii", borderBottomLeftRadius: "radii", boxShadow: "shadows", textShadow: "shadows", transition: "transitions", zIndex: "zIndices" };
var i = (e2, t2) => typeof t2 == "function" ? { "()": Function.prototype.toString.call(t2) } : t2;
var o = () => {
  const e2 = /* @__PURE__ */ Object.create(null);
  return (t2, r2, ...n2) => {
    const o2 = ((e3) => JSON.stringify(e3, i))(t2);
    return o2 in e2 ? e2[o2] : e2[o2] = r2(t2, ...n2);
  };
};
var l = Symbol.for("sxs.internal");
var s = (e2, t2) => Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2));
var a = (e2) => {
  for (const t2 in e2)
    return true;
  return false;
};
var { hasOwnProperty: c } = Object.prototype;
var d = (e2) => e2.includes("-") ? e2 : e2.replace(/[A-Z]/g, (e3) => "-" + e3.toLowerCase());
var g = /\s+(?![^()]*\))/;
var p = (e2) => (t2) => e2(...typeof t2 == "string" ? String(t2).split(g) : [t2]);
var u = { appearance: (e2) => ({ WebkitAppearance: e2, appearance: e2 }), backfaceVisibility: (e2) => ({ WebkitBackfaceVisibility: e2, backfaceVisibility: e2 }), backdropFilter: (e2) => ({ WebkitBackdropFilter: e2, backdropFilter: e2 }), backgroundClip: (e2) => ({ WebkitBackgroundClip: e2, backgroundClip: e2 }), boxDecorationBreak: (e2) => ({ WebkitBoxDecorationBreak: e2, boxDecorationBreak: e2 }), clipPath: (e2) => ({ WebkitClipPath: e2, clipPath: e2 }), content: (e2) => ({ content: e2.includes('"') || e2.includes("'") || /^([A-Za-z]+\([^]*|[^]*-quote|inherit|initial|none|normal|revert|unset)$/.test(e2) ? e2 : `"${e2}"` }), hyphens: (e2) => ({ WebkitHyphens: e2, hyphens: e2 }), maskImage: (e2) => ({ WebkitMaskImage: e2, maskImage: e2 }), maskSize: (e2) => ({ WebkitMaskSize: e2, maskSize: e2 }), tabSize: (e2) => ({ MozTabSize: e2, tabSize: e2 }), textSizeAdjust: (e2) => ({ WebkitTextSizeAdjust: e2, textSizeAdjust: e2 }), userSelect: (e2) => ({ WebkitUserSelect: e2, userSelect: e2 }), marginBlock: p((e2, t2) => ({ marginBlockStart: e2, marginBlockEnd: t2 || e2 })), marginInline: p((e2, t2) => ({ marginInlineStart: e2, marginInlineEnd: t2 || e2 })), maxSize: p((e2, t2) => ({ maxBlockSize: e2, maxInlineSize: t2 || e2 })), minSize: p((e2, t2) => ({ minBlockSize: e2, minInlineSize: t2 || e2 })), paddingBlock: p((e2, t2) => ({ paddingBlockStart: e2, paddingBlockEnd: t2 || e2 })), paddingInline: p((e2, t2) => ({ paddingInlineStart: e2, paddingInlineEnd: t2 || e2 })) };
var f = /([\d.]+)([^]*)/;
var h = (e2, t2) => e2.length ? e2.reduce((e3, r2) => (e3.push(...t2.map((e4) => e4.includes("&") ? e4.replace(/&/g, /[ +>|~]/.test(r2) && /&.*&/.test(e4) ? `:is(${r2})` : r2) : r2 + " " + e4)), e3), []) : t2;
var m = (e2, t2) => e2 in b && typeof t2 == "string" ? t2.replace(/^((?:[^]*[^\w-])?)(fit-content|stretch)((?:[^\w-][^]*)?)$/, (t3, r2, n2, i2) => r2 + (n2 === "stretch" ? `-moz-available${i2};${d(e2)}:${r2}-webkit-fill-available` : `-moz-fit-content${i2};${d(e2)}:${r2}fit-content`) + i2) : String(t2);
var b = { blockSize: 1, height: 1, inlineSize: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, width: 1 };
var S = (e2) => e2 ? e2 + "-" : "";
var y = (e2, t2, r2) => e2.replace(/([+-])?((?:\d+(?:\.\d*)?|\.\d+)(?:[Ee][+-]?\d+)?)?(\$|--)([$\w-]+)/g, (e3, n2, i2, o2, l2) => o2 == "$" == !!i2 ? e3 : (n2 || o2 == "--" ? "calc(" : "") + "var(--" + (o2 === "$" ? S(t2) + (l2.includes("$") ? "" : S(r2)) + l2.replace(/\$/g, "-") : l2) + ")" + (n2 || o2 == "--" ? "*" + (n2 || "") + (i2 || "1") + ")" : ""));
function $(e2) {
  if (!e2 || e2.length === 0)
    return e2;
  const t2 = {};
  for (const r2 in e2) {
    const n2 = r2.toLocaleLowerCase(), i2 = e2[r2], o2 = typeof i2, l2 = n2.includes("left"), s2 = n2.includes("right"), a2 = Object.keys(z).includes(n2), c2 = W[r2], d2 = l2 || s2 || a2 || c2;
    if (["number", "string"].includes(o2) && d2) {
      let e3 = "";
      if (t2["[dir='ltr'] &"] = t2["[dir='ltr'] &"] ?? {}, t2["[dir='rtl'] &"] = t2["[dir='rtl'] &"] ?? {}, c2) {
        const e4 = w(r2, i2);
        e4 === i2 ? t2[r2] = i2 : (t2["[dir='ltr'] &"][r2] = i2, t2["[dir='rtl'] &"][r2] = e4);
      } else
        l2 ? e3 = r2.replaceAll("left", "right").replaceAll("Left", "Right") : s2 ? e3 = r2.replaceAll("right", "left").replaceAll("Right", "Left") : a2 && (e3 = z[r2] ?? r2), t2["[dir='ltr'] &"][r2] = i2, t2["[dir='rtl'] &"][e3] = i2;
    } else
      o2 !== "object" || Array.isArray(i2) ? t2[r2] = i2 : t2[r2] = $(i2);
  }
  return t2;
}
var k = { padding: true, p: true, margin: true, m: true, borderStyle: true, borderWidth: true, borderColor: true };
var B = { borderRadius: true };
var x = { float: true, justifyContent: true, justifyItems: true, justifySelf: true };
var R = { offset: true };
var I = { background: true, bg: true };
var j = { backgroundPosition: true, offsetAnchor: true, offsetPosition: true };
var W = { ...k, ...B, ...x, ...R, ...I, ...j };
var z = { ml: "mr", mr: "ml", pl: "pr", pr: "pl", radiusLeft: "radiusRight", radiusRight: "radiusLeft", marginRight: "marginLeft", marginLeft: "marginRight", paddingRight: "paddingLeft", paddingLeft: "paddingRight" };
var v = { left: "right", right: "left", center: "center", top: "top", bottom: "bottom", auto: "auto", none: "none" };
var E = { ray: true, url: true, circle: true, ellipse: true, inset: true, polygon: true, path: true };
function w(e2, t2) {
  return j[e2] ? T(t2) : R[e2] ? function(e3) {
    const t3 = String(e3).trim().split("/"), r2 = t3[0].trim(), n2 = t3[1].trim(), i2 = t3[2].trim(), o2 = t3[3].trim(), l2 = t3[4].trim();
    if (t3.length === 1)
      return T(r2);
    const s2 = [T(r2), n2];
    n2 && n2.includes("(") && E[n2.substring(0, n2.indexOf("("))] ? (i2 && s2.push(i2), o2 && s2.push(T(o2)), l2 && s2.push(l2)) : (i2 && s2.push(T(i2)), o2 && s2.push(o2));
    return s2.join(" / ");
  }(t2) : k[e2] ? function(e3) {
    const t3 = String(e3).split(" ");
    if (t3.length < 4)
      return e3;
    const r2 = t3[0], n2 = t3[1], i2 = t3[2], o2 = t3[3];
    return `${r2} ${o2} ${i2} ${n2}`;
  }(t2) : B[e2] ? function(e3) {
    return String(e3).split("/").reduce((t3, r2, n2) => {
      const i2 = n2 ? " / " : "", o2 = String(r2.trim()).split(" ");
      if (o2.length < 4)
        return `${i2}${e3}`;
      const l2 = o2[0], s2 = o2[1], a2 = o2[2];
      return t3 += `${i2}${s2} ${l2} ${o2[3]} ${a2}`;
    }, "");
  }(t2) : x[e2] ? C(t2) : I[e2] ? function(e3) {
    return e3.split(",").reduce((e4, t3) => {
      const r2 = t3.indexOf("("), n2 = t3.indexOf(")"), i2 = r2 > -1 ? t3.substring(r2, n2) : "", o2 = t3.replace(i2, "\u2021\u2021\u2021"), l2 = o2.includes("left"), s2 = o2.includes("right"), a2 = (o2.match(/(\d*\.?\d+)\s?(px|em|rem|ex|ch|%|in|cn|mm|pt|pc|vw|vh|vmax|vmin+)/) || [])[0];
      let c2 = o2;
      if (l2)
        c2 = c2.replace("left", "right");
      else if (s2)
        c2 = c2.replace("right", "left");
      else if (a2 !== void 0) {
        const e5 = c2.indexOf(a2), t4 = c2.substring(e5);
        c2 = c2.replace(t4, `right ${t4}`);
      }
      return e4.push(c2.replace("\u2021\u2021\u2021", i2)), e4;
    }, []).join(", ");
  }(t2) : t2;
}
function C(e2) {
  return v[e2.toLowerCase()] || e2;
}
function T(e2) {
  if (["left", "right"].includes(e2))
    return C(e2);
  const t2 = String(e2).trim().split(" ");
  if (t2.length === 1 && !isNaN(parseInt(e2)))
    return `right ${e2} center`;
  if (t2.length === 2) {
    return !isNaN(parseInt(t2[0])) ? `right ${t2[0]} ${t2[1]}` : `${v[t2[0]]} ${t2[1]}`;
  }
  if (t2.length === 3) {
    return !isNaN(parseInt(t2[1])) ? `${v[t2[0]]} ${t2[1]} ${v[t2[2]]}` : `${v[t2[0]]} ${v[t2[1]]} ${t2[2]}`;
  }
  return t2.length === 4 ? `${v[t2[0]]} ${t2[1]} ${v[t2[2]]} ${t2[3]}` : e2;
}
var M = /\s*,\s*(?![^()]*\))/;
var P = Object.prototype.toString;
var L = (e2, t2, r2, n2, i2) => {
  let o2, l2, s2;
  const a2 = (e3, t3, r3) => {
    let c2, g2;
    const p2 = (e4) => {
      for (c2 in e4) {
        const k2 = c2.charCodeAt(0) === 64, B2 = k2 && Array.isArray(e4[c2]) ? e4[c2] : [e4[c2]];
        for (g2 of B2) {
          const e5 = /[A-Z]/.test($2 = c2) ? $2 : $2.replace(/-[^]/g, (e6) => e6[1].toUpperCase()), B3 = typeof g2 == "object" && g2 && g2.toString === P && (!n2.utils[e5] || !t3.length);
          if (e5 in n2.utils && !B3) {
            const t4 = n2.utils[e5];
            if (t4 !== l2) {
              l2 = t4, p2(t4(g2)), l2 = null;
              continue;
            }
          } else if (e5 in u) {
            const t4 = u[e5];
            if (t4 !== s2) {
              s2 = t4, p2(t4(g2)), s2 = null;
              continue;
            }
          }
          if (k2 && (b2 = c2.slice(1) in n2.media ? "@media " + n2.media[c2.slice(1)] : c2, c2 = b2.replace(/\(\s*([\w-]+)\s*(=|<|<=|>|>=)\s*([\w-]+)\s*(?:(<|<=|>|>=)\s*([\w-]+)\s*)?\)/g, (e6, t4, r4, n3, i3, o3) => {
            const l3 = f.test(t4), s3 = 0.0625 * (l3 ? -1 : 1), [a3, c3] = l3 ? [n3, t4] : [t4, n3];
            return "(" + (r4[0] === "=" ? "" : r4[0] === ">" === l3 ? "max-" : "min-") + a3 + ":" + (r4[0] !== "=" && r4.length === 1 ? c3.replace(f, (e7, t5, n4) => Number(t5) + s3 * (r4 === ">" ? 1 : -1) + n4) : c3) + (i3 ? ") and (" + (i3[0] === ">" ? "min-" : "max-") + a3 + ":" + (i3.length === 1 ? o3.replace(f, (e7, t5, r5) => Number(t5) + s3 * (i3 === ">" ? -1 : 1) + r5) : o3) : "") + ")";
          })), B3) {
            const e6 = k2 ? r3.concat(c2) : [...r3], n3 = k2 ? [...t3] : h(t3, c2.split(M));
            o2 !== void 0 && i2(O(...o2)), o2 = void 0, a2(g2, n3, e6);
          } else
            o2 === void 0 && (o2 = [[], t3, r3]), c2 = k2 || c2.charCodeAt(0) !== 36 ? c2 : `--${S(n2.prefix)}${c2.slice(1).replace(/\$/g, "-")}`, g2 = B3 ? g2 : typeof g2 == "number" ? g2 && e5 in A ? String(g2) + "px" : String(g2) : y(m(e5, g2 == null ? "" : g2), n2.prefix, n2.themeMap[e5]), o2[0].push(`${k2 ? `${c2} ` : `${d(c2)}:`}${g2}`);
        }
      }
      var b2, $2;
    };
    p2(e3), o2 !== void 0 && i2(O(...o2)), o2 = void 0;
  };
  a2($(e2), t2, r2);
};
var O = (e2, t2, r2) => `${r2.map((e3) => `${e3}{`).join("")}${t2.length ? `${t2.join(",")}{` : ""}${e2.join(";")}${t2.length ? "}" : ""}${Array(r2.length ? r2.length + 1 : 0).join("}")}`;
var A = { animationDelay: 1, animationDuration: 1, backgroundSize: 1, blockSize: 1, border: 1, borderBlock: 1, borderBlockEnd: 1, borderBlockEndWidth: 1, borderBlockStart: 1, borderBlockStartWidth: 1, borderBlockWidth: 1, borderBottom: 1, borderBottomLeftRadius: 1, borderBottomRightRadius: 1, borderBottomWidth: 1, borderEndEndRadius: 1, borderEndStartRadius: 1, borderInlineEnd: 1, borderInlineEndWidth: 1, borderInlineStart: 1, borderInlineStartWidth: 1, borderInlineWidth: 1, borderLeft: 1, borderLeftWidth: 1, borderRadius: 1, borderRight: 1, borderRightWidth: 1, borderSpacing: 1, borderStartEndRadius: 1, borderStartStartRadius: 1, borderTop: 1, borderTopLeftRadius: 1, borderTopRightRadius: 1, borderTopWidth: 1, borderWidth: 1, bottom: 1, columnGap: 1, columnRule: 1, columnRuleWidth: 1, columnWidth: 1, containIntrinsicSize: 1, flexBasis: 1, fontSize: 1, gap: 1, gridAutoColumns: 1, gridAutoRows: 1, gridTemplateColumns: 1, gridTemplateRows: 1, height: 1, inlineSize: 1, inset: 1, insetBlock: 1, insetBlockEnd: 1, insetBlockStart: 1, insetInline: 1, insetInlineEnd: 1, insetInlineStart: 1, left: 1, letterSpacing: 1, margin: 1, marginBlock: 1, marginBlockEnd: 1, marginBlockStart: 1, marginBottom: 1, marginInline: 1, marginInlineEnd: 1, marginInlineStart: 1, marginLeft: 1, marginRight: 1, marginTop: 1, maxBlockSize: 1, maxHeight: 1, maxInlineSize: 1, maxWidth: 1, minBlockSize: 1, minHeight: 1, minInlineSize: 1, minWidth: 1, offsetDistance: 1, offsetRotate: 1, outline: 1, outlineOffset: 1, outlineWidth: 1, overflowClipMargin: 1, padding: 1, paddingBlock: 1, paddingBlockEnd: 1, paddingBlockStart: 1, paddingBottom: 1, paddingInline: 1, paddingInlineEnd: 1, paddingInlineStart: 1, paddingLeft: 1, paddingRight: 1, paddingTop: 1, perspective: 1, right: 1, rowGap: 1, scrollMargin: 1, scrollMarginBlock: 1, scrollMarginBlockEnd: 1, scrollMarginBlockStart: 1, scrollMarginBottom: 1, scrollMarginInline: 1, scrollMarginInlineEnd: 1, scrollMarginInlineStart: 1, scrollMarginLeft: 1, scrollMarginRight: 1, scrollMarginTop: 1, scrollPadding: 1, scrollPaddingBlock: 1, scrollPaddingBlockEnd: 1, scrollPaddingBlockStart: 1, scrollPaddingBottom: 1, scrollPaddingInline: 1, scrollPaddingInlineEnd: 1, scrollPaddingInlineStart: 1, scrollPaddingLeft: 1, scrollPaddingRight: 1, scrollPaddingTop: 1, shapeMargin: 1, textDecoration: 1, textDecorationThickness: 1, textIndent: 1, textUnderlineOffset: 1, top: 1, transitionDelay: 1, transitionDuration: 1, verticalAlign: 1, width: 1, wordSpacing: 1 };
var N = (e2) => String.fromCharCode(e2 + (e2 > 25 ? 39 : 97));
var D = (e2) => ((e3) => {
  let t2, r2 = "";
  for (t2 = Math.abs(e3); t2 > 52; t2 = t2 / 52 | 0)
    r2 = N(t2 % 52) + r2;
  return N(t2 % 52) + r2;
})(((e3, t2) => {
  let r2 = t2.length;
  for (; r2; )
    e3 = 33 * e3 ^ t2.charCodeAt(--r2);
  return e3;
})(5381, JSON.stringify(e2)) >>> 0);
var H = ["themed", "global", "styled", "onevar", "resonevar", "allvar", "inline"];
var V = (e2) => {
  if (e2.href && !e2.href.startsWith(location.origin))
    return false;
  try {
    return e2.cssRules, true;
  } catch (e3) {
    return false;
  }
};
var G = (e2) => {
  let t2;
  const r2 = () => {
    if (t2) {
      const { rules: e3, sheet: r3 } = t2;
      if (!r3.deleteRule) {
        for (; Object(Object(r3.cssRules)[0]).type === 3; )
          r3.cssRules.splice(0, 1);
        r3.cssRules = [];
      }
      for (const t3 in e3)
        delete e3[t3];
    }
    const n2 = Object(e2).styleSheets || [];
    for (const e3 of n2)
      if (V(e3)) {
        for (let n3 = 0, i3 = e3.cssRules; i3[n3]; ++n3) {
          const o3 = Object(i3[n3]);
          if (o3.type !== 1)
            continue;
          const l2 = Object(i3[n3 + 1]);
          if (l2.type !== 4)
            continue;
          ++n3;
          const { cssText: s2 } = o3;
          if (!s2.startsWith("--sxs"))
            continue;
          const a2 = s2.slice(14, -3).trim().split(/\s+/), c2 = H[a2[0]];
          c2 && (t2 || (t2 = { sheet: e3, reset: r2, rules: {} }), t2.rules[c2] = { group: l2, index: n3, cache: new Set(a2) });
        }
        if (t2)
          break;
      }
    if (!t2) {
      const n3 = (e3, t3) => ({ type: t3, cssRules: [], insertRule(e4, t4) {
        this.cssRules.splice(t4, 0, n3(e4, { import: 3, undefined: 1 }[(e4.toLowerCase().match(/^@([a-z]+)/) || [])[1]] || 4));
      }, get cssText() {
        return e3 === "@media{}" ? `@media{${[].map.call(this.cssRules, (e4) => e4.cssText).join("")}}` : e3;
      } });
      t2 = { sheet: e2 ? (e2.head || e2).appendChild(document.createElement("style")).sheet : n3("", "text/css"), rules: {}, reset: r2, toString() {
        const { cssRules: e3 } = t2.sheet;
        return [].map.call(e3, (r3, n4) => {
          const { cssText: i3 } = r3;
          let o3 = "";
          if (i3.startsWith("--sxs"))
            return "";
          if (e3[n4 - 1] && (o3 = e3[n4 - 1].cssText).startsWith("--sxs")) {
            if (!r3.cssRules.length)
              return "";
            for (const e4 in t2.rules)
              if (t2.rules[e4].group === r3)
                return `--sxs{--sxs:${[...t2.rules[e4].cache].join(" ")}}${i3}`;
            return r3.cssRules.length ? `${o3}${i3}` : "";
          }
          return i3;
        }).join("");
      } };
    }
    const { sheet: i2, rules: o2 } = t2;
    for (let e3 = H.length - 1; e3 >= 0; --e3) {
      const t3 = H[e3];
      if (!o2[t3]) {
        const r3 = H[e3 + 1], n3 = o2[r3] ? o2[r3].index : i2.cssRules.length;
        i2.insertRule("@media{}", n3), i2.insertRule(`--sxs{--sxs:${e3}}`, n3), o2[t3] = { group: i2.cssRules[n3 + 1], index: n3, cache: /* @__PURE__ */ new Set([e3]) };
      }
      F(o2[t3]);
    }
  };
  return r2(), t2;
};
var F = (e2) => {
  const t2 = e2.group;
  let r2 = t2.cssRules.length;
  e2.apply = (e3) => {
    try {
      t2.insertRule(e3, r2), ++r2;
    } catch {
    }
  };
};
var J = Symbol();
var U = o();
var Z = (e2, t2) => U(e2, () => (...r2) => {
  const n2 = r2.length - 1, i2 = n2 > 0 && r2[n2] && typeof r2[n2] == "string" ? r2[n2].replace(/\./g, "_").replace(/\W/g, "") : null;
  let o2 = { type: null, composers: /* @__PURE__ */ new Set() };
  for (const t3 of r2)
    if (t3 != null)
      if (t3[l]) {
        o2.type == null && (o2.type = t3[l].type);
        for (const e3 of t3[l].composers)
          o2.composers.add(e3);
      } else
        t3.constructor !== Object || t3.$$typeof ? o2.type == null && (o2.type = t3) : typeof t3 != "string" && o2.composers.add(X({ componentName: i2, ...t3 }, e2));
  return o2.type == null && (o2.type = "span"), o2.composers.size || o2.composers.add(["PJLV", {}, [], [], {}, []]), Y(e2, o2, t2);
});
var X = ({ variants: e2, compoundVariants: t2, defaultVariants: r2, componentName: n2, ...i2 }, o2) => {
  const l2 = n2 && n2.length > 0 ? `${n2}-${D(i2)}` : D(i2), s2 = `${S(o2.prefix)}c-${l2}`, d2 = [], g2 = [], p2 = /* @__PURE__ */ Object.create(null), u2 = [];
  for (const e3 in r2)
    p2[e3] = String(r2[e3]);
  if (typeof e2 == "object" && e2)
    for (const t3 in e2) {
      f2 = p2, h2 = t3, c.call(f2, h2) || (p2[t3] = "undefined");
      const r3 = e2[t3];
      for (const e3 in r3) {
        const n3 = { [t3]: String(e3) };
        String(e3) === "undefined" && u2.push(t3);
        const i3 = r3[e3], o3 = [n3, i3, !a(i3)];
        d2.push(o3);
      }
    }
  var f2, h2;
  if (typeof t2 == "object" && t2)
    for (const e3 of t2) {
      let { css: t3, ...r3 } = e3;
      t3 = typeof t3 == "object" && t3 || {};
      for (const e4 in r3)
        r3[e4] = String(r3[e4]);
      const n3 = [r3, t3, !a(t3)];
      g2.push(n3);
    }
  return [s2, i2, d2, g2, p2, u2];
};
var Y = (e2, t2, r2) => {
  const [n2, i2, o2, a2] = _(t2.composers), c2 = typeof t2.type == "function" || t2.type.$$typeof ? ((e3) => {
    function t3() {
      for (let r3 = 0; r3 < t3[J].length; r3++) {
        const [n3, i3] = t3[J][r3];
        e3.rules[n3].apply(i3);
      }
      return t3[J] = [], null;
    }
    return t3[J] = [], t3.rules = {}, H.forEach((e4) => t3.rules[e4] = { apply: (r3) => t3[J].push([e4, r3]) }), t3;
  })(r2) : null, d2 = (c2 || r2).rules, g2 = `.${n2}${i2.length > 1 ? `:where(.${i2.slice(1).join(".")})` : ""}`, p2 = (l2) => {
    l2 = typeof l2 == "object" && l2 || K;
    const { css: s2, ...p3 } = l2, u2 = {};
    for (const e3 in o2)
      if (delete p3[e3], e3 in l2) {
        let t3 = l2[e3];
        typeof t3 == "object" && t3 ? u2[e3] = { "@initial": o2[e3], ...t3 } : (t3 = String(t3), u2[e3] = t3 !== "undefined" || a2.has(e3) ? t3 : o2[e3]);
      } else
        u2[e3] = o2[e3];
    const f2 = /* @__PURE__ */ new Set([...i2]);
    for (const [n3, i3, o3, l3] of t2.composers) {
      r2.rules.styled.cache.has(n3) || (r2.rules.styled.cache.add(n3), L(i3, [`.${n3}`], [], e2, (e3) => {
        d2.styled.apply(e3);
      }));
      const t3 = q(o3, u2, e2.media), s3 = q(l3, u2, e2.media, true);
      for (const i4 of t3)
        if (i4 !== void 0)
          for (const [t4, o4, l4] of i4) {
            const i5 = `${n3}-${D(o4)}-${t4}`;
            f2.add(i5);
            const s4 = (l4 ? r2.rules.resonevar : r2.rules.onevar).cache, a3 = l4 ? d2.resonevar : d2.onevar;
            s4.has(i5) || (s4.add(i5), L(o4, [`.${i5}`], [], e2, (e3) => {
              a3.apply(e3);
            }));
          }
      for (const t4 of s3)
        if (t4 !== void 0)
          for (const [i4, o4] of t4) {
            const t5 = `${n3}-${D(o4)}-${i4}`;
            f2.add(t5), r2.rules.allvar.cache.has(t5) || (r2.rules.allvar.cache.add(t5), L(o4, [`.${t5}`], [], e2, (e3) => {
              d2.allvar.apply(e3);
            }));
          }
    }
    if (typeof s2 == "object" && s2) {
      const t3 = `${n2}-i${D(s2)}-css`;
      f2.add(t3), r2.rules.inline.cache.has(t3) || (r2.rules.inline.cache.add(t3), L(s2, [`.${t3}`], [], e2, (e3) => {
        d2.inline.apply(e3);
      }));
    }
    for (const e3 of String(l2.className || "").trim().split(/\s+/))
      e3 && f2.add(e3);
    const h2 = p3.className = [...f2].join(" ");
    return { type: t2.type, className: h2, selector: g2, props: p3, toString: () => h2, deferredInjector: c2 };
  };
  return s(p2, { className: n2, selector: g2, [l]: t2, toString: () => (r2.rules.styled.cache.has(n2) || p2(), n2) });
};
var _ = (e2) => {
  let t2 = "";
  const r2 = [], n2 = {}, i2 = [];
  for (const [o2, , , , l2, s2] of e2) {
    t2 === "" && (t2 = o2), r2.push(o2), i2.push(...s2);
    for (const e3 in l2) {
      const t3 = l2[e3];
      (n2[e3] === void 0 || t3 !== "undefined" || s2.includes(t3)) && (n2[e3] = t3);
    }
  }
  return [t2, r2, n2, new Set(i2)];
};
var q = (e2, t2, r2, n2) => {
  const i2 = [];
  e:
    for (let [o2, l2, s2] of e2) {
      if (s2)
        continue;
      let e3, a2 = 0, c2 = false;
      for (e3 in o2) {
        const n3 = o2[e3];
        let i3 = t2[e3];
        if (i3 !== n3) {
          if (typeof i3 != "object" || !i3)
            continue e;
          {
            let e4, t3, o3 = 0;
            for (const l3 in i3) {
              if (n3 === String(i3[l3])) {
                if (l3 !== "@initial") {
                  const e5 = l3.slice(1);
                  (t3 = t3 || []).push(e5 in r2 ? r2[e5] : l3.replace(/^@media ?/, "")), c2 = true;
                }
                a2 += o3, e4 = true;
              }
              ++o3;
            }
            if (t3 && t3.length && (l2 = { ["@media " + t3.join(", ")]: l2 }), !e4)
              continue e;
          }
        }
      }
      (i2[a2] = i2[a2] || []).push([n2 ? "cv" : `${e3}-${o2[e3]}`, l2, c2]);
    }
  return i2;
};
var K = {};
var Q = o();
var ee = (e2, t2) => Q(e2, () => (...r2) => {
  const n2 = () => {
    for (let n3 of r2) {
      n3 = typeof n3 == "object" && n3 || {};
      let r3 = D(n3);
      if (!t2.rules.global.cache.has(r3)) {
        if (t2.rules.global.cache.add(r3), "@import" in n3) {
          let e3 = [].indexOf.call(t2.sheet.cssRules, t2.rules.themed.group) - 1;
          for (let r4 of [].concat(n3["@import"]))
            r4 = r4.includes('"') || r4.includes("'") ? r4 : `"${r4}"`, t2.sheet.insertRule(`@import ${r4};`, e3++);
          delete n3["@import"];
        }
        L(n3, [], [], e2, (e3) => {
          t2.rules.global.apply(e3);
        });
      }
    }
    return "";
  };
  return s(n2, { toString: n2 });
});
var te = o();
var re = (e2, t2) => te(e2, () => (r2) => {
  const n2 = `${S(e2.prefix)}k-${D(r2)}`, i2 = () => {
    if (!t2.rules.global.cache.has(n2)) {
      t2.rules.global.cache.add(n2);
      const i3 = [];
      L(r2, [], [], e2, (e3) => i3.push(e3));
      const o2 = `@keyframes ${n2}{${i3.join("")}}`;
      t2.rules.global.apply(o2);
    }
    return n2;
  };
  return s(i2, { get name() {
    return i2();
  }, toString: i2 });
});
var ne = class {
  constructor(e2, t2, r2, n2) {
    this.token = e2 == null ? "" : String(e2), this.value = t2 == null ? "" : String(t2), this.scale = r2 == null ? "" : String(r2), this.prefix = n2 == null ? "" : String(n2);
  }
  get computedValue() {
    return "var(" + this.variable + ")";
  }
  get variable() {
    return "--" + S(this.prefix) + S(this.scale) + this.token;
  }
  toString() {
    return this.computedValue;
  }
};
var ie = o();
var oe = (e2, t2) => ie(e2, () => (r2, n2) => {
  n2 = typeof r2 == "object" && r2 || Object(n2);
  const i2 = `.${r2 = (r2 = typeof r2 == "string" ? r2 : "") || `${S(e2.prefix)}t-${D(n2)}`}`, o2 = {}, l2 = [];
  for (const t3 in n2) {
    o2[t3] = {};
    for (const r3 in n2[t3]) {
      const i3 = `--${S(e2.prefix)}${t3}-${r3}`, s3 = y(String(n2[t3][r3]), e2.prefix, t3);
      o2[t3][r3] = new ne(r3, s3, t3, e2.prefix), l2.push(`${i3}:${s3}`);
    }
  }
  const s2 = () => {
    if (l2.length && !t2.rules.themed.cache.has(r2)) {
      t2.rules.themed.cache.add(r2);
      const i3 = `${n2 === e2.theme ? ":root," : ""}.${r2}{${l2.join(";")}}`;
      t2.rules.themed.apply(i3);
    }
    return r2;
  };
  return { ...o2, get className() {
    return s2();
  }, selector: i2, toString: s2 };
});
var le = o();
var ce = o();
var de = (e2) => {
  const t2 = ((e3) => {
    let t3 = false;
    const r2 = le(e3, (e4) => {
      t3 = true;
      const r3 = "prefix" in (e4 = typeof e4 == "object" && e4 || {}) ? String(e4.prefix) : "", i2 = typeof e4.media == "object" && e4.media || {}, o2 = typeof e4.root == "object" ? e4.root || null : globalThis.document || null, l2 = typeof e4.theme == "object" && e4.theme || {}, s2 = { prefix: r3, media: i2, theme: l2, themeMap: typeof e4.themeMap == "object" && e4.themeMap || { ...n }, utils: typeof e4.utils == "object" && e4.utils || {} }, a2 = G(o2), c2 = { css: Z(s2, a2), globalCss: ee(s2, a2), keyframes: re(s2, a2), createTheme: oe(s2, a2), reset() {
        a2.reset(), c2.theme.toString();
      }, theme: {}, sheet: a2, config: s2, prefix: r3, getCssText: a2.toString, toString: a2.toString };
      return String(c2.theme = c2.createTheme(l2)), c2;
    });
    return t3 || r2.reset(), r2;
  })(e2);
  return t2.styled = (({ config: e3, sheet: t3 }) => ce(e3, () => {
    const r2 = Z(e3, t3);
    return (...e4) => {
      const t4 = r2(...e4), n2 = t4[l].type, i2 = e4.length - 1, o2 = i2 > 0 && e4[i2] && typeof e4[i2] == "string" ? e4[i2].replace(/\./g, "_").replace(/\W/g, "") : n2.displayName || n2.name || n2, s2 = import_react.default.forwardRef((e5, r3) => {
        const i3 = e5 && e5.as || n2, { props: o3, deferredInjector: l2 } = t4(e5);
        return delete o3.as, o3.ref = r3, l2 ? import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(i3, o3), import_react.default.createElement(l2, null)) : import_react.default.createElement(i3, o3);
      });
      return s2.className = t4.className, s2.displayName = `Styled.${o2}`, s2.selector = t4.selector, s2.toString = () => t4.selector, s2[l] = t4[l], s2;
    };
  }))(t2), t2;
};

// ../../ui/dist/ui.es.js
var import_locale_enum = __toESM(require_locale_enum());
var import_locale_enum2 = __toESM(require_locale_enum());
var React4 = __toESM(require_react());
var import_react18 = __toESM(require_react());

// ../../ui/node_modules/@react-aria/i18n/dist/module.js
init_react();
var import_react3 = __toESM(require_react());

// ../../ui/node_modules/@react-aria/ssr/dist/module.js
init_react();
var import_react2 = __toESM(require_react());
function $parcel$export(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $9d939cbc98267846$exports = {};
$parcel$export($9d939cbc98267846$exports, "SSRProvider", () => $9d939cbc98267846$export$9f8ac96af4b1b2ae);
$parcel$export($9d939cbc98267846$exports, "useSSRSafeId", () => $9d939cbc98267846$export$619500959fc48b26);
$parcel$export($9d939cbc98267846$exports, "useIsSSR", () => $9d939cbc98267846$export$535bd6ca7f90a273);
var $9d939cbc98267846$var$defaultContext = {
  prefix: String(Math.round(Math.random() * 1e10)),
  current: 0
};
var $9d939cbc98267846$var$SSRContext = /* @__PURE__ */ import_react2.default.createContext($9d939cbc98267846$var$defaultContext);
function $9d939cbc98267846$export$9f8ac96af4b1b2ae(props) {
  let cur = (0, import_react2.useContext)($9d939cbc98267846$var$SSRContext);
  let value = (0, import_react2.useMemo)(() => ({
    prefix: cur === $9d939cbc98267846$var$defaultContext ? "" : `${cur.prefix}-${++cur.current}`,
    current: 0
  }), [
    cur
  ]);
  return /* @__PURE__ */ import_react2.default.createElement($9d939cbc98267846$var$SSRContext.Provider, {
    value
  }, props.children);
}
var $9d939cbc98267846$var$canUseDOM = Boolean(typeof window !== "undefined" && window.document && window.document.createElement);
function $9d939cbc98267846$export$619500959fc48b26(defaultId) {
  let ctx = (0, import_react2.useContext)($9d939cbc98267846$var$SSRContext);
  if (ctx === $9d939cbc98267846$var$defaultContext && !$9d939cbc98267846$var$canUseDOM)
    console.warn("When server rendering, you must wrap your application in an <SSRProvider> to ensure consistent ids are generated between the client and server.");
  return (0, import_react2.useMemo)(() => defaultId || `react-aria${ctx.prefix}-${++ctx.current}`, [
    defaultId
  ]);
}
function $9d939cbc98267846$export$535bd6ca7f90a273() {
  let cur = (0, import_react2.useContext)($9d939cbc98267846$var$SSRContext);
  let isInSSRContext = cur !== $9d939cbc98267846$var$defaultContext;
  let [isSSR2, setIsSSR] = (0, import_react2.useState)(isInSSRContext);
  if (typeof window !== "undefined" && isInSSRContext)
    (0, import_react2.useLayoutEffect)(() => {
      setIsSSR(false);
    }, []);
  return isSSR2;
}

// ../../ui/node_modules/@internationalized/message/dist/module.js
init_react();

// ../../ui/node_modules/intl-messageformat/lib/index.js
init_react();

// ../../ui/node_modules/intl-messageformat/lib/src/core.js
init_react();

// ../../ui/node_modules/tslib/modules/index.js
init_react();
var import_tslib = __toESM(require_tslib(), 1);
var {
  __extends,
  __assign,
  __rest,
  __decorate,
  __param,
  __metadata,
  __awaiter,
  __generator,
  __exportStar,
  __createBinding,
  __values,
  __read,
  __spread,
  __spreadArrays,
  __spreadArray,
  __await,
  __asyncGenerator,
  __asyncDelegator,
  __asyncValues,
  __makeTemplateObject,
  __importStar,
  __importDefault,
  __classPrivateFieldGet,
  __classPrivateFieldSet
} = import_tslib.default;

// ../../ui/node_modules/@formatjs/icu-messageformat-parser/lib/index.js
init_react();

// ../../ui/node_modules/@formatjs/icu-messageformat-parser/lib/error.js
init_react();
var ErrorKind;
(function(ErrorKind2) {
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_CLOSING_BRACE"] = 1] = "EXPECT_ARGUMENT_CLOSING_BRACE";
  ErrorKind2[ErrorKind2["EMPTY_ARGUMENT"] = 2] = "EMPTY_ARGUMENT";
  ErrorKind2[ErrorKind2["MALFORMED_ARGUMENT"] = 3] = "MALFORMED_ARGUMENT";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_TYPE"] = 4] = "EXPECT_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["INVALID_ARGUMENT_TYPE"] = 5] = "INVALID_ARGUMENT_TYPE";
  ErrorKind2[ErrorKind2["EXPECT_ARGUMENT_STYLE"] = 6] = "EXPECT_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["INVALID_NUMBER_SKELETON"] = 7] = "INVALID_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["INVALID_DATE_TIME_SKELETON"] = 8] = "INVALID_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_NUMBER_SKELETON"] = 9] = "EXPECT_NUMBER_SKELETON";
  ErrorKind2[ErrorKind2["EXPECT_DATE_TIME_SKELETON"] = 10] = "EXPECT_DATE_TIME_SKELETON";
  ErrorKind2[ErrorKind2["UNCLOSED_QUOTE_IN_ARGUMENT_STYLE"] = 11] = "UNCLOSED_QUOTE_IN_ARGUMENT_STYLE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_OPTIONS"] = 12] = "EXPECT_SELECT_ARGUMENT_OPTIONS";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE"] = 13] = "EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_OFFSET_VALUE"] = 14] = "INVALID_PLURAL_ARGUMENT_OFFSET_VALUE";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR"] = 15] = "EXPECT_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR"] = 16] = "EXPECT_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT"] = 17] = "EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT"] = 18] = "EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT";
  ErrorKind2[ErrorKind2["INVALID_PLURAL_ARGUMENT_SELECTOR"] = 19] = "INVALID_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_PLURAL_ARGUMENT_SELECTOR"] = 20] = "DUPLICATE_PLURAL_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["DUPLICATE_SELECT_ARGUMENT_SELECTOR"] = 21] = "DUPLICATE_SELECT_ARGUMENT_SELECTOR";
  ErrorKind2[ErrorKind2["MISSING_OTHER_CLAUSE"] = 22] = "MISSING_OTHER_CLAUSE";
  ErrorKind2[ErrorKind2["INVALID_TAG"] = 23] = "INVALID_TAG";
  ErrorKind2[ErrorKind2["INVALID_TAG_NAME"] = 25] = "INVALID_TAG_NAME";
  ErrorKind2[ErrorKind2["UNMATCHED_CLOSING_TAG"] = 26] = "UNMATCHED_CLOSING_TAG";
  ErrorKind2[ErrorKind2["UNCLOSED_TAG"] = 27] = "UNCLOSED_TAG";
})(ErrorKind || (ErrorKind = {}));

// ../../ui/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
init_react();

// ../../ui/node_modules/@formatjs/icu-messageformat-parser/lib/types.js
init_react();
var TYPE;
(function(TYPE2) {
  TYPE2[TYPE2["literal"] = 0] = "literal";
  TYPE2[TYPE2["argument"] = 1] = "argument";
  TYPE2[TYPE2["number"] = 2] = "number";
  TYPE2[TYPE2["date"] = 3] = "date";
  TYPE2[TYPE2["time"] = 4] = "time";
  TYPE2[TYPE2["select"] = 5] = "select";
  TYPE2[TYPE2["plural"] = 6] = "plural";
  TYPE2[TYPE2["pound"] = 7] = "pound";
  TYPE2[TYPE2["tag"] = 8] = "tag";
})(TYPE || (TYPE = {}));
var SKELETON_TYPE;
(function(SKELETON_TYPE2) {
  SKELETON_TYPE2[SKELETON_TYPE2["number"] = 0] = "number";
  SKELETON_TYPE2[SKELETON_TYPE2["dateTime"] = 1] = "dateTime";
})(SKELETON_TYPE || (SKELETON_TYPE = {}));
function isLiteralElement(el) {
  return el.type === TYPE.literal;
}
function isArgumentElement(el) {
  return el.type === TYPE.argument;
}
function isNumberElement(el) {
  return el.type === TYPE.number;
}
function isDateElement(el) {
  return el.type === TYPE.date;
}
function isTimeElement(el) {
  return el.type === TYPE.time;
}
function isSelectElement(el) {
  return el.type === TYPE.select;
}
function isPluralElement(el) {
  return el.type === TYPE.plural;
}
function isPoundElement(el) {
  return el.type === TYPE.pound;
}
function isTagElement(el) {
  return el.type === TYPE.tag;
}
function isNumberSkeleton(el) {
  return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.number);
}
function isDateTimeSkeleton(el) {
  return !!(el && typeof el === "object" && el.type === SKELETON_TYPE.dateTime);
}

// ../../ui/node_modules/@formatjs/icu-messageformat-parser/lib/regex.generated.js
init_react();
var SPACE_SEPARATOR_REGEX = /[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/;

// ../../ui/node_modules/@formatjs/icu-skeleton-parser/lib/index.js
init_react();

// ../../ui/node_modules/@formatjs/icu-skeleton-parser/lib/date-time.js
init_react();
var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g;
function parseDateTimeSkeleton(skeleton) {
  var result = {};
  skeleton.replace(DATE_TIME_REGEX, function(match) {
    var len = match.length;
    switch (match[0]) {
      case "G":
        result.era = len === 4 ? "long" : len === 5 ? "narrow" : "short";
        break;
      case "y":
        result.year = len === 2 ? "2-digit" : "numeric";
        break;
      case "Y":
      case "u":
      case "U":
      case "r":
        throw new RangeError("`Y/u/U/r` (year) patterns are not supported, use `y` instead");
      case "q":
      case "Q":
        throw new RangeError("`q/Q` (quarter) patterns are not supported");
      case "M":
      case "L":
        result.month = ["numeric", "2-digit", "short", "long", "narrow"][len - 1];
        break;
      case "w":
      case "W":
        throw new RangeError("`w/W` (week) patterns are not supported");
      case "d":
        result.day = ["numeric", "2-digit"][len - 1];
        break;
      case "D":
      case "F":
      case "g":
        throw new RangeError("`D/F/g` (day) patterns are not supported, use `d` instead");
      case "E":
        result.weekday = len === 4 ? "short" : len === 5 ? "narrow" : "short";
        break;
      case "e":
        if (len < 4) {
          throw new RangeError("`e..eee` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "c":
        if (len < 4) {
          throw new RangeError("`c..ccc` (weekday) patterns are not supported");
        }
        result.weekday = ["short", "long", "narrow", "short"][len - 4];
        break;
      case "a":
        result.hour12 = true;
        break;
      case "b":
      case "B":
        throw new RangeError("`b/B` (period) patterns are not supported, use `a` instead");
      case "h":
        result.hourCycle = "h12";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "H":
        result.hourCycle = "h23";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "K":
        result.hourCycle = "h11";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "k":
        result.hourCycle = "h24";
        result.hour = ["numeric", "2-digit"][len - 1];
        break;
      case "j":
      case "J":
      case "C":
        throw new RangeError("`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead");
      case "m":
        result.minute = ["numeric", "2-digit"][len - 1];
        break;
      case "s":
        result.second = ["numeric", "2-digit"][len - 1];
        break;
      case "S":
      case "A":
        throw new RangeError("`S/A` (second) patterns are not supported, use `s` instead");
      case "z":
        result.timeZoneName = len < 4 ? "short" : "long";
        break;
      case "Z":
      case "O":
      case "v":
      case "V":
      case "X":
      case "x":
        throw new RangeError("`Z/O/v/V/X/x` (timeZone) patterns are not supported, use `z` instead");
    }
    return "";
  });
  return result;
}

// ../../ui/node_modules/@formatjs/icu-skeleton-parser/lib/number.js
init_react();

// ../../ui/node_modules/@formatjs/icu-skeleton-parser/lib/regex.generated.js
init_react();
var WHITE_SPACE_REGEX = /[\t-\r \x85\u200E\u200F\u2028\u2029]/i;

// ../../ui/node_modules/@formatjs/icu-skeleton-parser/lib/number.js
function parseNumberSkeletonFromString(skeleton) {
  if (skeleton.length === 0) {
    throw new Error("Number skeleton cannot be empty");
  }
  var stringTokens = skeleton.split(WHITE_SPACE_REGEX).filter(function(x2) {
    return x2.length > 0;
  });
  var tokens = [];
  for (var _i = 0, stringTokens_1 = stringTokens; _i < stringTokens_1.length; _i++) {
    var stringToken = stringTokens_1[_i];
    var stemAndOptions = stringToken.split("/");
    if (stemAndOptions.length === 0) {
      throw new Error("Invalid number skeleton");
    }
    var stem = stemAndOptions[0], options = stemAndOptions.slice(1);
    for (var _a3 = 0, options_1 = options; _a3 < options_1.length; _a3++) {
      var option = options_1[_a3];
      if (option.length === 0) {
        throw new Error("Invalid number skeleton");
      }
    }
    tokens.push({ stem, options });
  }
  return tokens;
}
function icuUnitToEcma(unit) {
  return unit.replace(/^(.*?)-/, "");
}
var FRACTION_PRECISION_REGEX = /^\.(?:(0+)(\*)?|(#+)|(0+)(#+))$/g;
var SIGNIFICANT_PRECISION_REGEX = /^(@+)?(\+|#+)?[rs]?$/g;
var INTEGER_WIDTH_REGEX = /(\*)(0+)|(#+)(0+)|(0+)/g;
var CONCISE_INTEGER_WIDTH_REGEX = /^(0+)$/;
function parseSignificantPrecision(str) {
  var result = {};
  if (str[str.length - 1] === "r") {
    result.roundingPriority = "morePrecision";
  } else if (str[str.length - 1] === "s") {
    result.roundingPriority = "lessPrecision";
  }
  str.replace(SIGNIFICANT_PRECISION_REGEX, function(_2, g1, g2) {
    if (typeof g2 !== "string") {
      result.minimumSignificantDigits = g1.length;
      result.maximumSignificantDigits = g1.length;
    } else if (g2 === "+") {
      result.minimumSignificantDigits = g1.length;
    } else if (g1[0] === "#") {
      result.maximumSignificantDigits = g1.length;
    } else {
      result.minimumSignificantDigits = g1.length;
      result.maximumSignificantDigits = g1.length + (typeof g2 === "string" ? g2.length : 0);
    }
    return "";
  });
  return result;
}
function parseSign(str) {
  switch (str) {
    case "sign-auto":
      return {
        signDisplay: "auto"
      };
    case "sign-accounting":
    case "()":
      return {
        currencySign: "accounting"
      };
    case "sign-always":
    case "+!":
      return {
        signDisplay: "always"
      };
    case "sign-accounting-always":
    case "()!":
      return {
        signDisplay: "always",
        currencySign: "accounting"
      };
    case "sign-except-zero":
    case "+?":
      return {
        signDisplay: "exceptZero"
      };
    case "sign-accounting-except-zero":
    case "()?":
      return {
        signDisplay: "exceptZero",
        currencySign: "accounting"
      };
    case "sign-never":
    case "+_":
      return {
        signDisplay: "never"
      };
  }
}
function parseConciseScientificAndEngineeringStem(stem) {
  var result;
  if (stem[0] === "E" && stem[1] === "E") {
    result = {
      notation: "engineering"
    };
    stem = stem.slice(2);
  } else if (stem[0] === "E") {
    result = {
      notation: "scientific"
    };
    stem = stem.slice(1);
  }
  if (result) {
    var signDisplay = stem.slice(0, 2);
    if (signDisplay === "+!") {
      result.signDisplay = "always";
      stem = stem.slice(2);
    } else if (signDisplay === "+?") {
      result.signDisplay = "exceptZero";
      stem = stem.slice(2);
    }
    if (!CONCISE_INTEGER_WIDTH_REGEX.test(stem)) {
      throw new Error("Malformed concise eng/scientific notation");
    }
    result.minimumIntegerDigits = stem.length;
  }
  return result;
}
function parseNotationOptions(opt) {
  var result = {};
  var signOpts = parseSign(opt);
  if (signOpts) {
    return signOpts;
  }
  return result;
}
function parseNumberSkeleton(tokens) {
  var result = {};
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    switch (token.stem) {
      case "percent":
      case "%":
        result.style = "percent";
        continue;
      case "%x100":
        result.style = "percent";
        result.scale = 100;
        continue;
      case "currency":
        result.style = "currency";
        result.currency = token.options[0];
        continue;
      case "group-off":
      case ",_":
        result.useGrouping = false;
        continue;
      case "precision-integer":
      case ".":
        result.maximumFractionDigits = 0;
        continue;
      case "measure-unit":
      case "unit":
        result.style = "unit";
        result.unit = icuUnitToEcma(token.options[0]);
        continue;
      case "compact-short":
      case "K":
        result.notation = "compact";
        result.compactDisplay = "short";
        continue;
      case "compact-long":
      case "KK":
        result.notation = "compact";
        result.compactDisplay = "long";
        continue;
      case "scientific":
        result = __assign(__assign(__assign({}, result), { notation: "scientific" }), token.options.reduce(function(all, opt2) {
          return __assign(__assign({}, all), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "engineering":
        result = __assign(__assign(__assign({}, result), { notation: "engineering" }), token.options.reduce(function(all, opt2) {
          return __assign(__assign({}, all), parseNotationOptions(opt2));
        }, {}));
        continue;
      case "notation-simple":
        result.notation = "standard";
        continue;
      case "unit-width-narrow":
        result.currencyDisplay = "narrowSymbol";
        result.unitDisplay = "narrow";
        continue;
      case "unit-width-short":
        result.currencyDisplay = "code";
        result.unitDisplay = "short";
        continue;
      case "unit-width-full-name":
        result.currencyDisplay = "name";
        result.unitDisplay = "long";
        continue;
      case "unit-width-iso-code":
        result.currencyDisplay = "symbol";
        continue;
      case "scale":
        result.scale = parseFloat(token.options[0]);
        continue;
      case "integer-width":
        if (token.options.length > 1) {
          throw new RangeError("integer-width stems only accept a single optional option");
        }
        token.options[0].replace(INTEGER_WIDTH_REGEX, function(_2, g1, g2, g3, g4, g5) {
          if (g1) {
            result.minimumIntegerDigits = g2.length;
          } else if (g3 && g4) {
            throw new Error("We currently do not support maximum integer digits");
          } else if (g5) {
            throw new Error("We currently do not support exact integer digits");
          }
          return "";
        });
        continue;
    }
    if (CONCISE_INTEGER_WIDTH_REGEX.test(token.stem)) {
      result.minimumIntegerDigits = token.stem.length;
      continue;
    }
    if (FRACTION_PRECISION_REGEX.test(token.stem)) {
      if (token.options.length > 1) {
        throw new RangeError("Fraction-precision stems only accept a single optional option");
      }
      token.stem.replace(FRACTION_PRECISION_REGEX, function(_2, g1, g2, g3, g4, g5) {
        if (g2 === "*") {
          result.minimumFractionDigits = g1.length;
        } else if (g3 && g3[0] === "#") {
          result.maximumFractionDigits = g3.length;
        } else if (g4 && g5) {
          result.minimumFractionDigits = g4.length;
          result.maximumFractionDigits = g4.length + g5.length;
        } else {
          result.minimumFractionDigits = g1.length;
          result.maximumFractionDigits = g1.length;
        }
        return "";
      });
      var opt = token.options[0];
      if (opt === "w") {
        result = __assign(__assign({}, result), { trailingZeroDisplay: "stripIfInteger" });
      } else if (opt) {
        result = __assign(__assign({}, result), parseSignificantPrecision(opt));
      }
      continue;
    }
    if (SIGNIFICANT_PRECISION_REGEX.test(token.stem)) {
      result = __assign(__assign({}, result), parseSignificantPrecision(token.stem));
      continue;
    }
    var signOpts = parseSign(token.stem);
    if (signOpts) {
      result = __assign(__assign({}, result), signOpts);
    }
    var conciseScientificAndEngineeringOpts = parseConciseScientificAndEngineeringStem(token.stem);
    if (conciseScientificAndEngineeringOpts) {
      result = __assign(__assign({}, result), conciseScientificAndEngineeringOpts);
    }
  }
  return result;
}

// ../../ui/node_modules/@formatjs/icu-messageformat-parser/lib/parser.js
var _a;
var SPACE_SEPARATOR_START_REGEX = new RegExp("^".concat(SPACE_SEPARATOR_REGEX.source, "*"));
var SPACE_SEPARATOR_END_REGEX = new RegExp("".concat(SPACE_SEPARATOR_REGEX.source, "*$"));
function createLocation(start, end) {
  return { start, end };
}
var hasNativeStartsWith = !!String.prototype.startsWith;
var hasNativeFromCodePoint = !!String.fromCodePoint;
var hasNativeFromEntries = !!Object.fromEntries;
var hasNativeCodePointAt = !!String.prototype.codePointAt;
var hasTrimStart = !!String.prototype.trimStart;
var hasTrimEnd = !!String.prototype.trimEnd;
var hasNativeIsSafeInteger = !!Number.isSafeInteger;
var isSafeInteger = hasNativeIsSafeInteger ? Number.isSafeInteger : function(n2) {
  return typeof n2 === "number" && isFinite(n2) && Math.floor(n2) === n2 && Math.abs(n2) <= 9007199254740991;
};
var REGEX_SUPPORTS_U_AND_Y = true;
try {
  re2 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  REGEX_SUPPORTS_U_AND_Y = ((_a = re2.exec("a")) === null || _a === void 0 ? void 0 : _a[0]) === "a";
} catch (_2) {
  REGEX_SUPPORTS_U_AND_Y = false;
}
var re2;
var startsWith = hasNativeStartsWith ? function startsWith2(s2, search, position) {
  return s2.startsWith(search, position);
} : function startsWith3(s2, search, position) {
  return s2.slice(position, position + search.length) === search;
};
var fromCodePoint = hasNativeFromCodePoint ? String.fromCodePoint : function fromCodePoint2() {
  var codePoints = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    codePoints[_i] = arguments[_i];
  }
  var elements = "";
  var length = codePoints.length;
  var i2 = 0;
  var code;
  while (length > i2) {
    code = codePoints[i2++];
    if (code > 1114111)
      throw RangeError(code + " is not a valid code point");
    elements += code < 65536 ? String.fromCharCode(code) : String.fromCharCode(((code -= 65536) >> 10) + 55296, code % 1024 + 56320);
  }
  return elements;
};
var fromEntries = hasNativeFromEntries ? Object.fromEntries : function fromEntries2(entries) {
  var obj = {};
  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
    var _a3 = entries_1[_i], k2 = _a3[0], v2 = _a3[1];
    obj[k2] = v2;
  }
  return obj;
};
var codePointAt = hasNativeCodePointAt ? function codePointAt2(s2, index) {
  return s2.codePointAt(index);
} : function codePointAt3(s2, index) {
  var size = s2.length;
  if (index < 0 || index >= size) {
    return void 0;
  }
  var first = s2.charCodeAt(index);
  var second;
  return first < 55296 || first > 56319 || index + 1 === size || (second = s2.charCodeAt(index + 1)) < 56320 || second > 57343 ? first : (first - 55296 << 10) + (second - 56320) + 65536;
};
var trimStart = hasTrimStart ? function trimStart2(s2) {
  return s2.trimStart();
} : function trimStart3(s2) {
  return s2.replace(SPACE_SEPARATOR_START_REGEX, "");
};
var trimEnd = hasTrimEnd ? function trimEnd2(s2) {
  return s2.trimEnd();
} : function trimEnd3(s2) {
  return s2.replace(SPACE_SEPARATOR_END_REGEX, "");
};
function RE(s2, flag) {
  return new RegExp(s2, flag);
}
var matchIdentifierAtIndex;
if (REGEX_SUPPORTS_U_AND_Y) {
  IDENTIFIER_PREFIX_RE_1 = RE("([^\\p{White_Space}\\p{Pattern_Syntax}]*)", "yu");
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s2, index) {
    var _a3;
    IDENTIFIER_PREFIX_RE_1.lastIndex = index;
    var match = IDENTIFIER_PREFIX_RE_1.exec(s2);
    return (_a3 = match[1]) !== null && _a3 !== void 0 ? _a3 : "";
  };
} else {
  matchIdentifierAtIndex = function matchIdentifierAtIndex2(s2, index) {
    var match = [];
    while (true) {
      var c2 = codePointAt(s2, index);
      if (c2 === void 0 || _isWhiteSpace(c2) || _isPatternSyntax(c2)) {
        break;
      }
      match.push(c2);
      index += c2 >= 65536 ? 2 : 1;
    }
    return fromCodePoint.apply(void 0, match);
  };
}
var IDENTIFIER_PREFIX_RE_1;
var Parser = function() {
  function Parser2(message, options) {
    if (options === void 0) {
      options = {};
    }
    this.message = message;
    this.position = { offset: 0, line: 1, column: 1 };
    this.ignoreTag = !!options.ignoreTag;
    this.requiresOtherClause = !!options.requiresOtherClause;
    this.shouldParseSkeletons = !!options.shouldParseSkeletons;
  }
  Parser2.prototype.parse = function() {
    if (this.offset() !== 0) {
      throw Error("parser can only be used once");
    }
    return this.parseMessage(0, "", false);
  };
  Parser2.prototype.parseMessage = function(nestingLevel, parentArgType, expectingCloseTag) {
    var elements = [];
    while (!this.isEOF()) {
      var char = this.char();
      if (char === 123) {
        var result = this.parseArgument(nestingLevel, expectingCloseTag);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      } else if (char === 125 && nestingLevel > 0) {
        break;
      } else if (char === 35 && (parentArgType === "plural" || parentArgType === "selectordinal")) {
        var position = this.clonePosition();
        this.bump();
        elements.push({
          type: TYPE.pound,
          location: createLocation(position, this.clonePosition())
        });
      } else if (char === 60 && !this.ignoreTag && this.peek() === 47) {
        if (expectingCloseTag) {
          break;
        } else {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(this.clonePosition(), this.clonePosition()));
        }
      } else if (char === 60 && !this.ignoreTag && _isAlpha(this.peek() || 0)) {
        var result = this.parseTag(nestingLevel, parentArgType);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      } else {
        var result = this.parseLiteral(nestingLevel, parentArgType);
        if (result.err) {
          return result;
        }
        elements.push(result.val);
      }
    }
    return { val: elements, err: null };
  };
  Parser2.prototype.parseTag = function(nestingLevel, parentArgType) {
    var startPosition = this.clonePosition();
    this.bump();
    var tagName = this.parseTagName();
    this.bumpSpace();
    if (this.bumpIf("/>")) {
      return {
        val: {
          type: TYPE.literal,
          value: "<".concat(tagName, "/>"),
          location: createLocation(startPosition, this.clonePosition())
        },
        err: null
      };
    } else if (this.bumpIf(">")) {
      var childrenResult = this.parseMessage(nestingLevel + 1, parentArgType, true);
      if (childrenResult.err) {
        return childrenResult;
      }
      var children = childrenResult.val;
      var endTagStartPosition = this.clonePosition();
      if (this.bumpIf("</")) {
        if (this.isEOF() || !_isAlpha(this.char())) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }
        var closingTagNameStartPosition = this.clonePosition();
        var closingTagName = this.parseTagName();
        if (tagName !== closingTagName) {
          return this.error(ErrorKind.UNMATCHED_CLOSING_TAG, createLocation(closingTagNameStartPosition, this.clonePosition()));
        }
        this.bumpSpace();
        if (!this.bumpIf(">")) {
          return this.error(ErrorKind.INVALID_TAG, createLocation(endTagStartPosition, this.clonePosition()));
        }
        return {
          val: {
            type: TYPE.tag,
            value: tagName,
            children,
            location: createLocation(startPosition, this.clonePosition())
          },
          err: null
        };
      } else {
        return this.error(ErrorKind.UNCLOSED_TAG, createLocation(startPosition, this.clonePosition()));
      }
    } else {
      return this.error(ErrorKind.INVALID_TAG, createLocation(startPosition, this.clonePosition()));
    }
  };
  Parser2.prototype.parseTagName = function() {
    var startOffset = this.offset();
    this.bump();
    while (!this.isEOF() && _isPotentialElementNameChar(this.char())) {
      this.bump();
    }
    return this.message.slice(startOffset, this.offset());
  };
  Parser2.prototype.parseLiteral = function(nestingLevel, parentArgType) {
    var start = this.clonePosition();
    var value = "";
    while (true) {
      var parseQuoteResult = this.tryParseQuote(parentArgType);
      if (parseQuoteResult) {
        value += parseQuoteResult;
        continue;
      }
      var parseUnquotedResult = this.tryParseUnquoted(nestingLevel, parentArgType);
      if (parseUnquotedResult) {
        value += parseUnquotedResult;
        continue;
      }
      var parseLeftAngleResult = this.tryParseLeftAngleBracket();
      if (parseLeftAngleResult) {
        value += parseLeftAngleResult;
        continue;
      }
      break;
    }
    var location2 = createLocation(start, this.clonePosition());
    return {
      val: { type: TYPE.literal, value, location: location2 },
      err: null
    };
  };
  Parser2.prototype.tryParseLeftAngleBracket = function() {
    if (!this.isEOF() && this.char() === 60 && (this.ignoreTag || !_isAlphaOrSlash(this.peek() || 0))) {
      this.bump();
      return "<";
    }
    return null;
  };
  Parser2.prototype.tryParseQuote = function(parentArgType) {
    if (this.isEOF() || this.char() !== 39) {
      return null;
    }
    switch (this.peek()) {
      case 39:
        this.bump();
        this.bump();
        return "'";
      case 123:
      case 60:
      case 62:
      case 125:
        break;
      case 35:
        if (parentArgType === "plural" || parentArgType === "selectordinal") {
          break;
        }
        return null;
      default:
        return null;
    }
    this.bump();
    var codePoints = [this.char()];
    this.bump();
    while (!this.isEOF()) {
      var ch = this.char();
      if (ch === 39) {
        if (this.peek() === 39) {
          codePoints.push(39);
          this.bump();
        } else {
          this.bump();
          break;
        }
      } else {
        codePoints.push(ch);
      }
      this.bump();
    }
    return fromCodePoint.apply(void 0, codePoints);
  };
  Parser2.prototype.tryParseUnquoted = function(nestingLevel, parentArgType) {
    if (this.isEOF()) {
      return null;
    }
    var ch = this.char();
    if (ch === 60 || ch === 123 || ch === 35 && (parentArgType === "plural" || parentArgType === "selectordinal") || ch === 125 && nestingLevel > 0) {
      return null;
    } else {
      this.bump();
      return fromCodePoint(ch);
    }
  };
  Parser2.prototype.parseArgument = function(nestingLevel, expectingCloseTag) {
    var openingBracePosition = this.clonePosition();
    this.bump();
    this.bumpSpace();
    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    if (this.char() === 125) {
      this.bump();
      return this.error(ErrorKind.EMPTY_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
    var value = this.parseIdentifierIfPossible().value;
    if (!value) {
      return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
    this.bumpSpace();
    if (this.isEOF()) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    switch (this.char()) {
      case 125: {
        this.bump();
        return {
          val: {
            type: TYPE.argument,
            value,
            location: createLocation(openingBracePosition, this.clonePosition())
          },
          err: null
        };
      }
      case 44: {
        this.bump();
        this.bumpSpace();
        if (this.isEOF()) {
          return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
        }
        return this.parseArgumentOptions(nestingLevel, expectingCloseTag, value, openingBracePosition);
      }
      default:
        return this.error(ErrorKind.MALFORMED_ARGUMENT, createLocation(openingBracePosition, this.clonePosition()));
    }
  };
  Parser2.prototype.parseIdentifierIfPossible = function() {
    var startingPosition = this.clonePosition();
    var startOffset = this.offset();
    var value = matchIdentifierAtIndex(this.message, startOffset);
    var endOffset = startOffset + value.length;
    this.bumpTo(endOffset);
    var endPosition = this.clonePosition();
    var location2 = createLocation(startingPosition, endPosition);
    return { value, location: location2 };
  };
  Parser2.prototype.parseArgumentOptions = function(nestingLevel, expectingCloseTag, value, openingBracePosition) {
    var _a3;
    var typeStartPosition = this.clonePosition();
    var argType = this.parseIdentifierIfPossible().value;
    var typeEndPosition = this.clonePosition();
    switch (argType) {
      case "":
        return this.error(ErrorKind.EXPECT_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
      case "number":
      case "date":
      case "time": {
        this.bumpSpace();
        var styleAndLocation = null;
        if (this.bumpIf(",")) {
          this.bumpSpace();
          var styleStartPosition = this.clonePosition();
          var result = this.parseSimpleArgStyleIfPossible();
          if (result.err) {
            return result;
          }
          var style = trimEnd(result.val);
          if (style.length === 0) {
            return this.error(ErrorKind.EXPECT_ARGUMENT_STYLE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          var styleLocation = createLocation(styleStartPosition, this.clonePosition());
          styleAndLocation = { style, styleLocation };
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        var location_1 = createLocation(openingBracePosition, this.clonePosition());
        if (styleAndLocation && startsWith(styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style, "::", 0)) {
          var skeleton = trimStart(styleAndLocation.style.slice(2));
          if (argType === "number") {
            var result = this.parseNumberSkeletonFromString(skeleton, styleAndLocation.styleLocation);
            if (result.err) {
              return result;
            }
            return {
              val: { type: TYPE.number, value, location: location_1, style: result.val },
              err: null
            };
          } else {
            if (skeleton.length === 0) {
              return this.error(ErrorKind.EXPECT_DATE_TIME_SKELETON, location_1);
            }
            var style = {
              type: SKELETON_TYPE.dateTime,
              pattern: skeleton,
              location: styleAndLocation.styleLocation,
              parsedOptions: this.shouldParseSkeletons ? parseDateTimeSkeleton(skeleton) : {}
            };
            var type = argType === "date" ? TYPE.date : TYPE.time;
            return {
              val: { type, value, location: location_1, style },
              err: null
            };
          }
        }
        return {
          val: {
            type: argType === "number" ? TYPE.number : argType === "date" ? TYPE.date : TYPE.time,
            value,
            location: location_1,
            style: (_a3 = styleAndLocation === null || styleAndLocation === void 0 ? void 0 : styleAndLocation.style) !== null && _a3 !== void 0 ? _a3 : null
          },
          err: null
        };
      }
      case "plural":
      case "selectordinal":
      case "select": {
        var typeEndPosition_1 = this.clonePosition();
        this.bumpSpace();
        if (!this.bumpIf(",")) {
          return this.error(ErrorKind.EXPECT_SELECT_ARGUMENT_OPTIONS, createLocation(typeEndPosition_1, __assign({}, typeEndPosition_1)));
        }
        this.bumpSpace();
        var identifierAndLocation = this.parseIdentifierIfPossible();
        var pluralOffset = 0;
        if (argType !== "select" && identifierAndLocation.value === "offset") {
          if (!this.bumpIf(":")) {
            return this.error(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, createLocation(this.clonePosition(), this.clonePosition()));
          }
          this.bumpSpace();
          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_OFFSET_VALUE, ErrorKind.INVALID_PLURAL_ARGUMENT_OFFSET_VALUE);
          if (result.err) {
            return result;
          }
          this.bumpSpace();
          identifierAndLocation = this.parseIdentifierIfPossible();
          pluralOffset = result.val;
        }
        var optionsResult = this.tryParsePluralOrSelectOptions(nestingLevel, argType, expectingCloseTag, identifierAndLocation);
        if (optionsResult.err) {
          return optionsResult;
        }
        var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
        if (argCloseResult.err) {
          return argCloseResult;
        }
        var location_2 = createLocation(openingBracePosition, this.clonePosition());
        if (argType === "select") {
          return {
            val: {
              type: TYPE.select,
              value,
              options: fromEntries(optionsResult.val),
              location: location_2
            },
            err: null
          };
        } else {
          return {
            val: {
              type: TYPE.plural,
              value,
              options: fromEntries(optionsResult.val),
              offset: pluralOffset,
              pluralType: argType === "plural" ? "cardinal" : "ordinal",
              location: location_2
            },
            err: null
          };
        }
      }
      default:
        return this.error(ErrorKind.INVALID_ARGUMENT_TYPE, createLocation(typeStartPosition, typeEndPosition));
    }
  };
  Parser2.prototype.tryParseArgumentClose = function(openingBracePosition) {
    if (this.isEOF() || this.char() !== 125) {
      return this.error(ErrorKind.EXPECT_ARGUMENT_CLOSING_BRACE, createLocation(openingBracePosition, this.clonePosition()));
    }
    this.bump();
    return { val: true, err: null };
  };
  Parser2.prototype.parseSimpleArgStyleIfPossible = function() {
    var nestedBraces = 0;
    var startPosition = this.clonePosition();
    while (!this.isEOF()) {
      var ch = this.char();
      switch (ch) {
        case 39: {
          this.bump();
          var apostrophePosition = this.clonePosition();
          if (!this.bumpUntil("'")) {
            return this.error(ErrorKind.UNCLOSED_QUOTE_IN_ARGUMENT_STYLE, createLocation(apostrophePosition, this.clonePosition()));
          }
          this.bump();
          break;
        }
        case 123: {
          nestedBraces += 1;
          this.bump();
          break;
        }
        case 125: {
          if (nestedBraces > 0) {
            nestedBraces -= 1;
          } else {
            return {
              val: this.message.slice(startPosition.offset, this.offset()),
              err: null
            };
          }
          break;
        }
        default:
          this.bump();
          break;
      }
    }
    return {
      val: this.message.slice(startPosition.offset, this.offset()),
      err: null
    };
  };
  Parser2.prototype.parseNumberSkeletonFromString = function(skeleton, location2) {
    var tokens = [];
    try {
      tokens = parseNumberSkeletonFromString(skeleton);
    } catch (e2) {
      return this.error(ErrorKind.INVALID_NUMBER_SKELETON, location2);
    }
    return {
      val: {
        type: SKELETON_TYPE.number,
        tokens,
        location: location2,
        parsedOptions: this.shouldParseSkeletons ? parseNumberSkeleton(tokens) : {}
      },
      err: null
    };
  };
  Parser2.prototype.tryParsePluralOrSelectOptions = function(nestingLevel, parentArgType, expectCloseTag, parsedFirstIdentifier) {
    var _a3;
    var hasOtherClause = false;
    var options = [];
    var parsedSelectors = /* @__PURE__ */ new Set();
    var selector = parsedFirstIdentifier.value, selectorLocation = parsedFirstIdentifier.location;
    while (true) {
      if (selector.length === 0) {
        var startPosition = this.clonePosition();
        if (parentArgType !== "select" && this.bumpIf("=")) {
          var result = this.tryParseDecimalInteger(ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, ErrorKind.INVALID_PLURAL_ARGUMENT_SELECTOR);
          if (result.err) {
            return result;
          }
          selectorLocation = createLocation(startPosition, this.clonePosition());
          selector = this.message.slice(startPosition.offset, this.offset());
        } else {
          break;
        }
      }
      if (parsedSelectors.has(selector)) {
        return this.error(parentArgType === "select" ? ErrorKind.DUPLICATE_SELECT_ARGUMENT_SELECTOR : ErrorKind.DUPLICATE_PLURAL_ARGUMENT_SELECTOR, selectorLocation);
      }
      if (selector === "other") {
        hasOtherClause = true;
      }
      this.bumpSpace();
      var openingBracePosition = this.clonePosition();
      if (!this.bumpIf("{")) {
        return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR_FRAGMENT : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR_FRAGMENT, createLocation(this.clonePosition(), this.clonePosition()));
      }
      var fragmentResult = this.parseMessage(nestingLevel + 1, parentArgType, expectCloseTag);
      if (fragmentResult.err) {
        return fragmentResult;
      }
      var argCloseResult = this.tryParseArgumentClose(openingBracePosition);
      if (argCloseResult.err) {
        return argCloseResult;
      }
      options.push([
        selector,
        {
          value: fragmentResult.val,
          location: createLocation(openingBracePosition, this.clonePosition())
        }
      ]);
      parsedSelectors.add(selector);
      this.bumpSpace();
      _a3 = this.parseIdentifierIfPossible(), selector = _a3.value, selectorLocation = _a3.location;
    }
    if (options.length === 0) {
      return this.error(parentArgType === "select" ? ErrorKind.EXPECT_SELECT_ARGUMENT_SELECTOR : ErrorKind.EXPECT_PLURAL_ARGUMENT_SELECTOR, createLocation(this.clonePosition(), this.clonePosition()));
    }
    if (this.requiresOtherClause && !hasOtherClause) {
      return this.error(ErrorKind.MISSING_OTHER_CLAUSE, createLocation(this.clonePosition(), this.clonePosition()));
    }
    return { val: options, err: null };
  };
  Parser2.prototype.tryParseDecimalInteger = function(expectNumberError, invalidNumberError) {
    var sign = 1;
    var startingPosition = this.clonePosition();
    if (this.bumpIf("+")) {
    } else if (this.bumpIf("-")) {
      sign = -1;
    }
    var hasDigits = false;
    var decimal = 0;
    while (!this.isEOF()) {
      var ch = this.char();
      if (ch >= 48 && ch <= 57) {
        hasDigits = true;
        decimal = decimal * 10 + (ch - 48);
        this.bump();
      } else {
        break;
      }
    }
    var location2 = createLocation(startingPosition, this.clonePosition());
    if (!hasDigits) {
      return this.error(expectNumberError, location2);
    }
    decimal *= sign;
    if (!isSafeInteger(decimal)) {
      return this.error(invalidNumberError, location2);
    }
    return { val: decimal, err: null };
  };
  Parser2.prototype.offset = function() {
    return this.position.offset;
  };
  Parser2.prototype.isEOF = function() {
    return this.offset() === this.message.length;
  };
  Parser2.prototype.clonePosition = function() {
    return {
      offset: this.position.offset,
      line: this.position.line,
      column: this.position.column
    };
  };
  Parser2.prototype.char = function() {
    var offset = this.position.offset;
    if (offset >= this.message.length) {
      throw Error("out of bound");
    }
    var code = codePointAt(this.message, offset);
    if (code === void 0) {
      throw Error("Offset ".concat(offset, " is at invalid UTF-16 code unit boundary"));
    }
    return code;
  };
  Parser2.prototype.error = function(kind, location2) {
    return {
      val: null,
      err: {
        kind,
        message: this.message,
        location: location2
      }
    };
  };
  Parser2.prototype.bump = function() {
    if (this.isEOF()) {
      return;
    }
    var code = this.char();
    if (code === 10) {
      this.position.line += 1;
      this.position.column = 1;
      this.position.offset += 1;
    } else {
      this.position.column += 1;
      this.position.offset += code < 65536 ? 1 : 2;
    }
  };
  Parser2.prototype.bumpIf = function(prefix) {
    if (startsWith(this.message, prefix, this.offset())) {
      for (var i2 = 0; i2 < prefix.length; i2++) {
        this.bump();
      }
      return true;
    }
    return false;
  };
  Parser2.prototype.bumpUntil = function(pattern) {
    var currentOffset = this.offset();
    var index = this.message.indexOf(pattern, currentOffset);
    if (index >= 0) {
      this.bumpTo(index);
      return true;
    } else {
      this.bumpTo(this.message.length);
      return false;
    }
  };
  Parser2.prototype.bumpTo = function(targetOffset) {
    if (this.offset() > targetOffset) {
      throw Error("targetOffset ".concat(targetOffset, " must be greater than or equal to the current offset ").concat(this.offset()));
    }
    targetOffset = Math.min(targetOffset, this.message.length);
    while (true) {
      var offset = this.offset();
      if (offset === targetOffset) {
        break;
      }
      if (offset > targetOffset) {
        throw Error("targetOffset ".concat(targetOffset, " is at invalid UTF-16 code unit boundary"));
      }
      this.bump();
      if (this.isEOF()) {
        break;
      }
    }
  };
  Parser2.prototype.bumpSpace = function() {
    while (!this.isEOF() && _isWhiteSpace(this.char())) {
      this.bump();
    }
  };
  Parser2.prototype.peek = function() {
    if (this.isEOF()) {
      return null;
    }
    var code = this.char();
    var offset = this.offset();
    var nextCode = this.message.charCodeAt(offset + (code >= 65536 ? 2 : 1));
    return nextCode !== null && nextCode !== void 0 ? nextCode : null;
  };
  return Parser2;
}();
function _isAlpha(codepoint) {
  return codepoint >= 97 && codepoint <= 122 || codepoint >= 65 && codepoint <= 90;
}
function _isAlphaOrSlash(codepoint) {
  return _isAlpha(codepoint) || codepoint === 47;
}
function _isPotentialElementNameChar(c2) {
  return c2 === 45 || c2 === 46 || c2 >= 48 && c2 <= 57 || c2 === 95 || c2 >= 97 && c2 <= 122 || c2 >= 65 && c2 <= 90 || c2 == 183 || c2 >= 192 && c2 <= 214 || c2 >= 216 && c2 <= 246 || c2 >= 248 && c2 <= 893 || c2 >= 895 && c2 <= 8191 || c2 >= 8204 && c2 <= 8205 || c2 >= 8255 && c2 <= 8256 || c2 >= 8304 && c2 <= 8591 || c2 >= 11264 && c2 <= 12271 || c2 >= 12289 && c2 <= 55295 || c2 >= 63744 && c2 <= 64975 || c2 >= 65008 && c2 <= 65533 || c2 >= 65536 && c2 <= 983039;
}
function _isWhiteSpace(c2) {
  return c2 >= 9 && c2 <= 13 || c2 === 32 || c2 === 133 || c2 >= 8206 && c2 <= 8207 || c2 === 8232 || c2 === 8233;
}
function _isPatternSyntax(c2) {
  return c2 >= 33 && c2 <= 35 || c2 === 36 || c2 >= 37 && c2 <= 39 || c2 === 40 || c2 === 41 || c2 === 42 || c2 === 43 || c2 === 44 || c2 === 45 || c2 >= 46 && c2 <= 47 || c2 >= 58 && c2 <= 59 || c2 >= 60 && c2 <= 62 || c2 >= 63 && c2 <= 64 || c2 === 91 || c2 === 92 || c2 === 93 || c2 === 94 || c2 === 96 || c2 === 123 || c2 === 124 || c2 === 125 || c2 === 126 || c2 === 161 || c2 >= 162 && c2 <= 165 || c2 === 166 || c2 === 167 || c2 === 169 || c2 === 171 || c2 === 172 || c2 === 174 || c2 === 176 || c2 === 177 || c2 === 182 || c2 === 187 || c2 === 191 || c2 === 215 || c2 === 247 || c2 >= 8208 && c2 <= 8213 || c2 >= 8214 && c2 <= 8215 || c2 === 8216 || c2 === 8217 || c2 === 8218 || c2 >= 8219 && c2 <= 8220 || c2 === 8221 || c2 === 8222 || c2 === 8223 || c2 >= 8224 && c2 <= 8231 || c2 >= 8240 && c2 <= 8248 || c2 === 8249 || c2 === 8250 || c2 >= 8251 && c2 <= 8254 || c2 >= 8257 && c2 <= 8259 || c2 === 8260 || c2 === 8261 || c2 === 8262 || c2 >= 8263 && c2 <= 8273 || c2 === 8274 || c2 === 8275 || c2 >= 8277 && c2 <= 8286 || c2 >= 8592 && c2 <= 8596 || c2 >= 8597 && c2 <= 8601 || c2 >= 8602 && c2 <= 8603 || c2 >= 8604 && c2 <= 8607 || c2 === 8608 || c2 >= 8609 && c2 <= 8610 || c2 === 8611 || c2 >= 8612 && c2 <= 8613 || c2 === 8614 || c2 >= 8615 && c2 <= 8621 || c2 === 8622 || c2 >= 8623 && c2 <= 8653 || c2 >= 8654 && c2 <= 8655 || c2 >= 8656 && c2 <= 8657 || c2 === 8658 || c2 === 8659 || c2 === 8660 || c2 >= 8661 && c2 <= 8691 || c2 >= 8692 && c2 <= 8959 || c2 >= 8960 && c2 <= 8967 || c2 === 8968 || c2 === 8969 || c2 === 8970 || c2 === 8971 || c2 >= 8972 && c2 <= 8991 || c2 >= 8992 && c2 <= 8993 || c2 >= 8994 && c2 <= 9e3 || c2 === 9001 || c2 === 9002 || c2 >= 9003 && c2 <= 9083 || c2 === 9084 || c2 >= 9085 && c2 <= 9114 || c2 >= 9115 && c2 <= 9139 || c2 >= 9140 && c2 <= 9179 || c2 >= 9180 && c2 <= 9185 || c2 >= 9186 && c2 <= 9254 || c2 >= 9255 && c2 <= 9279 || c2 >= 9280 && c2 <= 9290 || c2 >= 9291 && c2 <= 9311 || c2 >= 9472 && c2 <= 9654 || c2 === 9655 || c2 >= 9656 && c2 <= 9664 || c2 === 9665 || c2 >= 9666 && c2 <= 9719 || c2 >= 9720 && c2 <= 9727 || c2 >= 9728 && c2 <= 9838 || c2 === 9839 || c2 >= 9840 && c2 <= 10087 || c2 === 10088 || c2 === 10089 || c2 === 10090 || c2 === 10091 || c2 === 10092 || c2 === 10093 || c2 === 10094 || c2 === 10095 || c2 === 10096 || c2 === 10097 || c2 === 10098 || c2 === 10099 || c2 === 10100 || c2 === 10101 || c2 >= 10132 && c2 <= 10175 || c2 >= 10176 && c2 <= 10180 || c2 === 10181 || c2 === 10182 || c2 >= 10183 && c2 <= 10213 || c2 === 10214 || c2 === 10215 || c2 === 10216 || c2 === 10217 || c2 === 10218 || c2 === 10219 || c2 === 10220 || c2 === 10221 || c2 === 10222 || c2 === 10223 || c2 >= 10224 && c2 <= 10239 || c2 >= 10240 && c2 <= 10495 || c2 >= 10496 && c2 <= 10626 || c2 === 10627 || c2 === 10628 || c2 === 10629 || c2 === 10630 || c2 === 10631 || c2 === 10632 || c2 === 10633 || c2 === 10634 || c2 === 10635 || c2 === 10636 || c2 === 10637 || c2 === 10638 || c2 === 10639 || c2 === 10640 || c2 === 10641 || c2 === 10642 || c2 === 10643 || c2 === 10644 || c2 === 10645 || c2 === 10646 || c2 === 10647 || c2 === 10648 || c2 >= 10649 && c2 <= 10711 || c2 === 10712 || c2 === 10713 || c2 === 10714 || c2 === 10715 || c2 >= 10716 && c2 <= 10747 || c2 === 10748 || c2 === 10749 || c2 >= 10750 && c2 <= 11007 || c2 >= 11008 && c2 <= 11055 || c2 >= 11056 && c2 <= 11076 || c2 >= 11077 && c2 <= 11078 || c2 >= 11079 && c2 <= 11084 || c2 >= 11085 && c2 <= 11123 || c2 >= 11124 && c2 <= 11125 || c2 >= 11126 && c2 <= 11157 || c2 === 11158 || c2 >= 11159 && c2 <= 11263 || c2 >= 11776 && c2 <= 11777 || c2 === 11778 || c2 === 11779 || c2 === 11780 || c2 === 11781 || c2 >= 11782 && c2 <= 11784 || c2 === 11785 || c2 === 11786 || c2 === 11787 || c2 === 11788 || c2 === 11789 || c2 >= 11790 && c2 <= 11798 || c2 === 11799 || c2 >= 11800 && c2 <= 11801 || c2 === 11802 || c2 === 11803 || c2 === 11804 || c2 === 11805 || c2 >= 11806 && c2 <= 11807 || c2 === 11808 || c2 === 11809 || c2 === 11810 || c2 === 11811 || c2 === 11812 || c2 === 11813 || c2 === 11814 || c2 === 11815 || c2 === 11816 || c2 === 11817 || c2 >= 11818 && c2 <= 11822 || c2 === 11823 || c2 >= 11824 && c2 <= 11833 || c2 >= 11834 && c2 <= 11835 || c2 >= 11836 && c2 <= 11839 || c2 === 11840 || c2 === 11841 || c2 === 11842 || c2 >= 11843 && c2 <= 11855 || c2 >= 11856 && c2 <= 11857 || c2 === 11858 || c2 >= 11859 && c2 <= 11903 || c2 >= 12289 && c2 <= 12291 || c2 === 12296 || c2 === 12297 || c2 === 12298 || c2 === 12299 || c2 === 12300 || c2 === 12301 || c2 === 12302 || c2 === 12303 || c2 === 12304 || c2 === 12305 || c2 >= 12306 && c2 <= 12307 || c2 === 12308 || c2 === 12309 || c2 === 12310 || c2 === 12311 || c2 === 12312 || c2 === 12313 || c2 === 12314 || c2 === 12315 || c2 === 12316 || c2 === 12317 || c2 >= 12318 && c2 <= 12319 || c2 === 12320 || c2 === 12336 || c2 === 64830 || c2 === 64831 || c2 >= 65093 && c2 <= 65094;
}

// ../../ui/node_modules/@formatjs/icu-messageformat-parser/lib/index.js
function pruneLocation(els) {
  els.forEach(function(el) {
    delete el.location;
    if (isSelectElement(el) || isPluralElement(el)) {
      for (var k2 in el.options) {
        delete el.options[k2].location;
        pruneLocation(el.options[k2].value);
      }
    } else if (isNumberElement(el) && isNumberSkeleton(el.style)) {
      delete el.style.location;
    } else if ((isDateElement(el) || isTimeElement(el)) && isDateTimeSkeleton(el.style)) {
      delete el.style.location;
    } else if (isTagElement(el)) {
      pruneLocation(el.children);
    }
  });
}
function parse(message, opts) {
  if (opts === void 0) {
    opts = {};
  }
  opts = __assign({ shouldParseSkeletons: true, requiresOtherClause: true }, opts);
  var result = new Parser(message, opts).parse();
  if (result.err) {
    var error = SyntaxError(ErrorKind[result.err.kind]);
    error.location = result.err.location;
    error.originalMessage = result.err.message;
    throw error;
  }
  if (!(opts === null || opts === void 0 ? void 0 : opts.captureLocation)) {
    pruneLocation(result.val);
  }
  return result.val;
}

// ../../ui/node_modules/@formatjs/fast-memoize/lib/index.js
init_react();
function memoize(fn, options) {
  var cache = options && options.cache ? options.cache : cacheDefault;
  var serializer = options && options.serializer ? options.serializer : serializerDefault;
  var strategy = options && options.strategy ? options.strategy : strategyDefault;
  return strategy(fn, {
    cache,
    serializer
  });
}
function isPrimitive(value) {
  return value == null || typeof value === "number" || typeof value === "boolean";
}
function monadic(fn, cache, serializer, arg) {
  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.call(this, arg);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function variadic(fn, cache, serializer) {
  var args = Array.prototype.slice.call(arguments, 3);
  var cacheKey = serializer(args);
  var computedValue = cache.get(cacheKey);
  if (typeof computedValue === "undefined") {
    computedValue = fn.apply(this, args);
    cache.set(cacheKey, computedValue);
  }
  return computedValue;
}
function assemble(fn, context, strategy, cache, serialize) {
  return strategy.bind(context, fn, cache, serialize);
}
function strategyDefault(fn, options) {
  var strategy = fn.length === 1 ? monadic : variadic;
  return assemble(fn, this, strategy, options.cache.create(), options.serializer);
}
function strategyVariadic(fn, options) {
  return assemble(fn, this, variadic, options.cache.create(), options.serializer);
}
function strategyMonadic(fn, options) {
  return assemble(fn, this, monadic, options.cache.create(), options.serializer);
}
var serializerDefault = function() {
  return JSON.stringify(arguments);
};
function ObjectWithoutPrototypeCache() {
  this.cache = /* @__PURE__ */ Object.create(null);
}
ObjectWithoutPrototypeCache.prototype.get = function(key) {
  return this.cache[key];
};
ObjectWithoutPrototypeCache.prototype.set = function(key, value) {
  this.cache[key] = value;
};
var cacheDefault = {
  create: function create() {
    return new ObjectWithoutPrototypeCache();
  }
};
var strategies = {
  variadic: strategyVariadic,
  monadic: strategyMonadic
};

// ../../ui/node_modules/intl-messageformat/lib/src/formatters.js
init_react();

// ../../ui/node_modules/intl-messageformat/lib/src/error.js
init_react();
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2["MISSING_VALUE"] = "MISSING_VALUE";
  ErrorCode2["INVALID_VALUE"] = "INVALID_VALUE";
  ErrorCode2["MISSING_INTL_API"] = "MISSING_INTL_API";
})(ErrorCode || (ErrorCode = {}));
var FormatError = function(_super) {
  __extends(FormatError2, _super);
  function FormatError2(msg, code, originalMessage) {
    var _this = _super.call(this, msg) || this;
    _this.code = code;
    _this.originalMessage = originalMessage;
    return _this;
  }
  FormatError2.prototype.toString = function() {
    return "[formatjs Error: ".concat(this.code, "] ").concat(this.message);
  };
  return FormatError2;
}(Error);
var InvalidValueError = function(_super) {
  __extends(InvalidValueError2, _super);
  function InvalidValueError2(variableId, value, options, originalMessage) {
    return _super.call(this, 'Invalid values for "'.concat(variableId, '": "').concat(value, '". Options are "').concat(Object.keys(options).join('", "'), '"'), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }
  return InvalidValueError2;
}(FormatError);
var InvalidValueTypeError = function(_super) {
  __extends(InvalidValueTypeError2, _super);
  function InvalidValueTypeError2(value, type, originalMessage) {
    return _super.call(this, 'Value for "'.concat(value, '" must be of type ').concat(type), ErrorCode.INVALID_VALUE, originalMessage) || this;
  }
  return InvalidValueTypeError2;
}(FormatError);
var MissingValueError = function(_super) {
  __extends(MissingValueError2, _super);
  function MissingValueError2(variableId, originalMessage) {
    return _super.call(this, 'The intl string context variable "'.concat(variableId, '" was not provided to the string "').concat(originalMessage, '"'), ErrorCode.MISSING_VALUE, originalMessage) || this;
  }
  return MissingValueError2;
}(FormatError);

// ../../ui/node_modules/intl-messageformat/lib/src/formatters.js
var PART_TYPE;
(function(PART_TYPE2) {
  PART_TYPE2[PART_TYPE2["literal"] = 0] = "literal";
  PART_TYPE2[PART_TYPE2["object"] = 1] = "object";
})(PART_TYPE || (PART_TYPE = {}));
function mergeLiteral(parts) {
  if (parts.length < 2) {
    return parts;
  }
  return parts.reduce(function(all, part) {
    var lastPart = all[all.length - 1];
    if (!lastPart || lastPart.type !== PART_TYPE.literal || part.type !== PART_TYPE.literal) {
      all.push(part);
    } else {
      lastPart.value += part.value;
    }
    return all;
  }, []);
}
function isFormatXMLElementFn(el) {
  return typeof el === "function";
}
function formatToParts(els, locales, formatters, formats, values, currentPluralValue, originalMessage) {
  if (els.length === 1 && isLiteralElement(els[0])) {
    return [
      {
        type: PART_TYPE.literal,
        value: els[0].value
      }
    ];
  }
  var result = [];
  for (var _i = 0, els_1 = els; _i < els_1.length; _i++) {
    var el = els_1[_i];
    if (isLiteralElement(el)) {
      result.push({
        type: PART_TYPE.literal,
        value: el.value
      });
      continue;
    }
    if (isPoundElement(el)) {
      if (typeof currentPluralValue === "number") {
        result.push({
          type: PART_TYPE.literal,
          value: formatters.getNumberFormat(locales).format(currentPluralValue)
        });
      }
      continue;
    }
    var varName = el.value;
    if (!(values && varName in values)) {
      throw new MissingValueError(varName, originalMessage);
    }
    var value = values[varName];
    if (isArgumentElement(el)) {
      if (!value || typeof value === "string" || typeof value === "number") {
        value = typeof value === "string" || typeof value === "number" ? String(value) : "";
      }
      result.push({
        type: typeof value === "string" ? PART_TYPE.literal : PART_TYPE.object,
        value
      });
      continue;
    }
    if (isDateElement(el)) {
      var style = typeof el.style === "string" ? formats.date[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : void 0;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTimeElement(el)) {
      var style = typeof el.style === "string" ? formats.time[el.style] : isDateTimeSkeleton(el.style) ? el.style.parsedOptions : formats.time.medium;
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getDateTimeFormat(locales, style).format(value)
      });
      continue;
    }
    if (isNumberElement(el)) {
      var style = typeof el.style === "string" ? formats.number[el.style] : isNumberSkeleton(el.style) ? el.style.parsedOptions : void 0;
      if (style && style.scale) {
        value = value * (style.scale || 1);
      }
      result.push({
        type: PART_TYPE.literal,
        value: formatters.getNumberFormat(locales, style).format(value)
      });
      continue;
    }
    if (isTagElement(el)) {
      var children = el.children, value_1 = el.value;
      var formatFn = values[value_1];
      if (!isFormatXMLElementFn(formatFn)) {
        throw new InvalidValueTypeError(value_1, "function", originalMessage);
      }
      var parts = formatToParts(children, locales, formatters, formats, values, currentPluralValue);
      var chunks = formatFn(parts.map(function(p2) {
        return p2.value;
      }));
      if (!Array.isArray(chunks)) {
        chunks = [chunks];
      }
      result.push.apply(result, chunks.map(function(c2) {
        return {
          type: typeof c2 === "string" ? PART_TYPE.literal : PART_TYPE.object,
          value: c2
        };
      }));
    }
    if (isSelectElement(el)) {
      var opt = el.options[value] || el.options.other;
      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values));
      continue;
    }
    if (isPluralElement(el)) {
      var opt = el.options["=".concat(value)];
      if (!opt) {
        if (!Intl.PluralRules) {
          throw new FormatError('Intl.PluralRules is not available in this environment.\nTry polyfilling it using "@formatjs/intl-pluralrules"\n', ErrorCode.MISSING_INTL_API, originalMessage);
        }
        var rule = formatters.getPluralRules(locales, { type: el.pluralType }).select(value - (el.offset || 0));
        opt = el.options[rule] || el.options.other;
      }
      if (!opt) {
        throw new InvalidValueError(el.value, value, Object.keys(el.options), originalMessage);
      }
      result.push.apply(result, formatToParts(opt.value, locales, formatters, formats, values, value - (el.offset || 0)));
      continue;
    }
  }
  return mergeLiteral(result);
}

// ../../ui/node_modules/intl-messageformat/lib/src/core.js
function mergeConfig(c1, c2) {
  if (!c2) {
    return c1;
  }
  return __assign(__assign(__assign({}, c1 || {}), c2 || {}), Object.keys(c1).reduce(function(all, k2) {
    all[k2] = __assign(__assign({}, c1[k2]), c2[k2] || {});
    return all;
  }, {}));
}
function mergeConfigs(defaultConfig, configs) {
  if (!configs) {
    return defaultConfig;
  }
  return Object.keys(defaultConfig).reduce(function(all, k2) {
    all[k2] = mergeConfig(defaultConfig[k2], configs[k2]);
    return all;
  }, __assign({}, defaultConfig));
}
function createFastMemoizeCache(store) {
  return {
    create: function() {
      return {
        get: function(key) {
          return store[key];
        },
        set: function(key, value) {
          store[key] = value;
        }
      };
    }
  };
}
function createDefaultFormatters(cache) {
  if (cache === void 0) {
    cache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
  }
  return {
    getNumberFormat: memoize(function() {
      var _a3;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a3 = Intl.NumberFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.number),
      strategy: strategies.variadic
    }),
    getDateTimeFormat: memoize(function() {
      var _a3;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a3 = Intl.DateTimeFormat).bind.apply(_a3, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.dateTime),
      strategy: strategies.variadic
    }),
    getPluralRules: memoize(function() {
      var _a3;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return new ((_a3 = Intl.PluralRules).bind.apply(_a3, __spreadArray([void 0], args, false)))();
    }, {
      cache: createFastMemoizeCache(cache.pluralRules),
      strategy: strategies.variadic
    })
  };
}
var IntlMessageFormat = function() {
  function IntlMessageFormat2(message, locales, overrideFormats, opts) {
    var _this = this;
    if (locales === void 0) {
      locales = IntlMessageFormat2.defaultLocale;
    }
    this.formatterCache = {
      number: {},
      dateTime: {},
      pluralRules: {}
    };
    this.format = function(values) {
      var parts = _this.formatToParts(values);
      if (parts.length === 1) {
        return parts[0].value;
      }
      var result = parts.reduce(function(all, part) {
        if (!all.length || part.type !== PART_TYPE.literal || typeof all[all.length - 1] !== "string") {
          all.push(part.value);
        } else {
          all[all.length - 1] += part.value;
        }
        return all;
      }, []);
      if (result.length <= 1) {
        return result[0] || "";
      }
      return result;
    };
    this.formatToParts = function(values) {
      return formatToParts(_this.ast, _this.locales, _this.formatters, _this.formats, values, void 0, _this.message);
    };
    this.resolvedOptions = function() {
      return {
        locale: Intl.NumberFormat.supportedLocalesOf(_this.locales)[0]
      };
    };
    this.getAst = function() {
      return _this.ast;
    };
    if (typeof message === "string") {
      this.message = message;
      if (!IntlMessageFormat2.__parse) {
        throw new TypeError("IntlMessageFormat.__parse must be set to process `message` of type `string`");
      }
      this.ast = IntlMessageFormat2.__parse(message, {
        ignoreTag: opts === null || opts === void 0 ? void 0 : opts.ignoreTag
      });
    } else {
      this.ast = message;
    }
    if (!Array.isArray(this.ast)) {
      throw new TypeError("A message must be provided as a String or AST.");
    }
    this.formats = mergeConfigs(IntlMessageFormat2.formats, overrideFormats);
    this.locales = locales;
    this.formatters = opts && opts.formatters || createDefaultFormatters(this.formatterCache);
  }
  Object.defineProperty(IntlMessageFormat2, "defaultLocale", {
    get: function() {
      if (!IntlMessageFormat2.memoizedDefaultLocale) {
        IntlMessageFormat2.memoizedDefaultLocale = new Intl.NumberFormat().resolvedOptions().locale;
      }
      return IntlMessageFormat2.memoizedDefaultLocale;
    },
    enumerable: false,
    configurable: true
  });
  IntlMessageFormat2.memoizedDefaultLocale = null;
  IntlMessageFormat2.__parse = parse;
  IntlMessageFormat2.formats = {
    number: {
      integer: {
        maximumFractionDigits: 0
      },
      currency: {
        style: "currency"
      },
      percent: {
        style: "percent"
      }
    },
    date: {
      short: {
        month: "numeric",
        day: "numeric",
        year: "2-digit"
      },
      medium: {
        month: "short",
        day: "numeric",
        year: "numeric"
      },
      long: {
        month: "long",
        day: "numeric",
        year: "numeric"
      },
      full: {
        weekday: "long",
        month: "long",
        day: "numeric",
        year: "numeric"
      }
    },
    time: {
      short: {
        hour: "numeric",
        minute: "numeric"
      },
      medium: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric"
      },
      long: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        timeZoneName: "short"
      },
      full: {
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        timeZoneName: "short"
      }
    }
  };
  return IntlMessageFormat2;
}();

// ../../ui/node_modules/intl-messageformat/lib/index.js
var lib_default = IntlMessageFormat;

// ../../ui/node_modules/@internationalized/message/dist/module.js
function $parcel$export2(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $70eee6030fd7c1a1$exports = {};
$parcel$export2($70eee6030fd7c1a1$exports, "MessageDictionary", () => $70eee6030fd7c1a1$export$64839e615120df17);
var $70eee6030fd7c1a1$export$64839e615120df17 = class {
  getStringForLocale(key, locale) {
    let strings = this.messages[locale];
    if (!strings) {
      strings = $70eee6030fd7c1a1$var$getStringsForLocale(locale, this.messages, this.defaultLocale);
      this.messages[locale] = strings;
    }
    let string = strings[key];
    if (!string)
      throw new Error(`Could not find intl message ${key} in ${locale} locale`);
    return string;
  }
  constructor(messages, defaultLocale = "en-US") {
    this.messages = {
      ...messages
    };
    this.defaultLocale = defaultLocale;
  }
};
function $70eee6030fd7c1a1$var$getStringsForLocale(locale, strings, defaultLocale = "en-US") {
  if (strings[locale])
    return strings[locale];
  let language = $70eee6030fd7c1a1$var$getLanguage(locale);
  for (let key in strings) {
    if (key.startsWith(language + "-"))
      return strings[key];
  }
  return strings[defaultLocale];
}
function $70eee6030fd7c1a1$var$getLanguage(locale) {
  if (Intl.Locale)
    return new Intl.Locale(locale).language;
  return locale.split("-")[0];
}
var $a96338b8d4eb3cb0$exports = {};
$parcel$export2($a96338b8d4eb3cb0$exports, "MessageFormatter", () => $a96338b8d4eb3cb0$export$526ebc05ff964723);
var $a96338b8d4eb3cb0$export$526ebc05ff964723 = class {
  format(key, variables) {
    let message = this.cache[key];
    if (!message) {
      let msg = this.messages.getStringForLocale(key, this.locale);
      if (!msg)
        throw new Error(`Could not find intl message ${key} in ${this.locale} locale`);
      message = new lib_default(msg, this.locale);
      this.cache[key] = message;
    }
    let varCopy;
    if (variables)
      varCopy = Object.keys(variables).reduce((acc, key2) => {
        acc[key2] = variables[key2] == null ? false : variables[key2];
        return acc;
      }, {});
    return message.format(varCopy);
  }
  constructor(locale, messages) {
    this.locale = locale;
    this.messages = messages;
    this.cache = {};
  }
};

// ../../ui/node_modules/@internationalized/date/dist/module.js
init_react();
var $7c5f6fbf42389787$var$HOUR_PARTS = 1080;
var $7c5f6fbf42389787$var$DAY_PARTS = 24 * $7c5f6fbf42389787$var$HOUR_PARTS;
var $7c5f6fbf42389787$var$MONTH_DAYS = 29;
var $7c5f6fbf42389787$var$MONTH_FRACT = 12 * $7c5f6fbf42389787$var$HOUR_PARTS + 793;
var $7c5f6fbf42389787$var$MONTH_PARTS = $7c5f6fbf42389787$var$MONTH_DAYS * $7c5f6fbf42389787$var$DAY_PARTS + $7c5f6fbf42389787$var$MONTH_FRACT;
var $fb18d541ea1ad717$var$formatterCache = /* @__PURE__ */ new Map();
var $fb18d541ea1ad717$export$ad991b66133851cf = class {
  format(value) {
    return this.formatter.format(value);
  }
  formatToParts(value) {
    return this.formatter.formatToParts(value);
  }
  formatRange(start, end) {
    if (typeof this.formatter.formatRange === "function")
      return this.formatter.formatRange(start, end);
    if (end < start)
      throw new RangeError("End date must be >= start date");
    return `${this.formatter.format(start)} \u2013 ${this.formatter.format(end)}`;
  }
  formatRangeToParts(start, end) {
    if (typeof this.formatter.formatRangeToParts === "function")
      return this.formatter.formatRangeToParts(start, end);
    if (end < start)
      throw new RangeError("End date must be >= start date");
    let startParts = this.formatter.formatToParts(start);
    let endParts = this.formatter.formatToParts(end);
    return [
      ...startParts.map((p2) => ({
        ...p2,
        source: "startRange"
      })),
      {
        type: "literal",
        value: " \u2013 ",
        source: "shared"
      },
      ...endParts.map((p2) => ({
        ...p2,
        source: "endRange"
      }))
    ];
  }
  resolvedOptions() {
    let resolvedOptions = this.formatter.resolvedOptions();
    if ($fb18d541ea1ad717$var$hasBuggyResolvedHourCycle()) {
      if (!this.resolvedHourCycle)
        this.resolvedHourCycle = $fb18d541ea1ad717$var$getResolvedHourCycle(resolvedOptions.locale, this.options);
      resolvedOptions.hourCycle = this.resolvedHourCycle;
      resolvedOptions.hour12 = this.resolvedHourCycle === "h11" || this.resolvedHourCycle === "h12";
    }
    return resolvedOptions;
  }
  constructor(locale, options = {}) {
    this.formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options);
    this.options = options;
  }
};
var $fb18d541ea1ad717$var$hour12Preferences = {
  true: {
    ja: "h11"
  },
  false: {}
};
function $fb18d541ea1ad717$var$getCachedDateFormatter(locale, options = {}) {
  if (typeof options.hour12 === "boolean" && $fb18d541ea1ad717$var$hasBuggyHour12Behavior()) {
    options = {
      ...options
    };
    let pref = $fb18d541ea1ad717$var$hour12Preferences[String(options.hour12)][locale.split("-")[0]];
    let defaultHourCycle = options.hour12 ? "h12" : "h23";
    options.hourCycle = pref !== null && pref !== void 0 ? pref : defaultHourCycle;
    delete options.hour12;
  }
  let cacheKey = locale + (options ? Object.entries(options).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
  if ($fb18d541ea1ad717$var$formatterCache.has(cacheKey))
    return $fb18d541ea1ad717$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.DateTimeFormat(locale, options);
  $fb18d541ea1ad717$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}
var $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = null;
function $fb18d541ea1ad717$var$hasBuggyHour12Behavior() {
  if ($fb18d541ea1ad717$var$_hasBuggyHour12Behavior == null)
    $fb18d541ea1ad717$var$_hasBuggyHour12Behavior = new Intl.DateTimeFormat("en-US", {
      hour: "numeric",
      hour12: false
    }).format(new Date(2020, 2, 3, 0)) === "24";
  return $fb18d541ea1ad717$var$_hasBuggyHour12Behavior;
}
var $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = null;
function $fb18d541ea1ad717$var$hasBuggyResolvedHourCycle() {
  if ($fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle == null)
    $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle = new Intl.DateTimeFormat("fr", {
      hour: "numeric",
      hour12: false
    }).resolvedOptions().hourCycle === "h12";
  return $fb18d541ea1ad717$var$_hasBuggyResolvedHourCycle;
}
function $fb18d541ea1ad717$var$getResolvedHourCycle(locale, options) {
  if (!options.timeStyle && !options.hour)
    return void 0;
  locale = locale.replace(/(-u-)?-nu-[a-zA-Z0-9]+/, "");
  locale += (locale.includes("-u-") ? "" : "-u") + "-nu-latn";
  let formatter = $fb18d541ea1ad717$var$getCachedDateFormatter(locale, {
    ...options,
    timeZone: void 0
  });
  let min = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 0)).find((p2) => p2.type === "hour").value, 10);
  let max = parseInt(formatter.formatToParts(new Date(2020, 2, 3, 23)).find((p2) => p2.type === "hour").value, 10);
  if (min === 0 && max === 23)
    return "h23";
  if (min === 24 && max === 23)
    return "h24";
  if (min === 0 && max === 11)
    return "h11";
  if (min === 12 && max === 11)
    return "h12";
  throw new Error("Unexpected hour cycle result");
}

// ../../ui/node_modules/@internationalized/number/dist/module.js
init_react();
var $488c6ddbf4ef74c2$var$formatterCache = /* @__PURE__ */ new Map();
var $488c6ddbf4ef74c2$var$supportsSignDisplay = false;
try {
  $488c6ddbf4ef74c2$var$supportsSignDisplay = new Intl.NumberFormat("de-DE", {
    signDisplay: "exceptZero"
  }).resolvedOptions().signDisplay === "exceptZero";
} catch (e2) {
}
var $488c6ddbf4ef74c2$var$supportsUnit = false;
try {
  $488c6ddbf4ef74c2$var$supportsUnit = new Intl.NumberFormat("de-DE", {
    style: "unit",
    unit: "degree"
  }).resolvedOptions().style === "unit";
} catch (e1) {
}
var $488c6ddbf4ef74c2$var$UNITS = {
  degree: {
    narrow: {
      default: "\xB0",
      "ja-JP": " \u5EA6",
      "zh-TW": "\u5EA6",
      "sl-SI": " \xB0"
    }
  }
};
var $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5 = class {
  format(value) {
    let res = "";
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
      res = $488c6ddbf4ef74c2$export$711b50b3c525e0f2(this.numberFormatter, this.options.signDisplay, value);
    else
      res = this.numberFormatter.format(value);
    if (this.options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
      var ref;
      let { unit, unitDisplay = "short", locale } = this.resolvedOptions();
      let values = (ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay];
      res += values[locale] || values.default;
    }
    return res;
  }
  formatToParts(value) {
    return this.numberFormatter.formatToParts(value);
  }
  resolvedOptions() {
    let options = this.numberFormatter.resolvedOptions();
    if (!$488c6ddbf4ef74c2$var$supportsSignDisplay && this.options.signDisplay != null)
      options = {
        ...options,
        signDisplay: this.options.signDisplay
      };
    if (!$488c6ddbf4ef74c2$var$supportsUnit && this.options.style === "unit")
      options = {
        ...options,
        style: "unit",
        unit: this.options.unit,
        unitDisplay: this.options.unitDisplay
      };
    return options;
  }
  constructor(locale, options = {}) {
    this.numberFormatter = $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options);
    this.options = options;
  }
};
function $488c6ddbf4ef74c2$var$getCachedNumberFormatter(locale, options = {}) {
  let { numberingSystem } = options;
  if (numberingSystem && locale.indexOf("-u-nu-") === -1)
    locale = `${locale}-u-nu-${numberingSystem}`;
  if (options.style === "unit" && !$488c6ddbf4ef74c2$var$supportsUnit) {
    var ref;
    let { unit, unitDisplay = "short" } = options;
    if (!unit)
      throw new Error('unit option must be provided with style: "unit"');
    if (!((ref = $488c6ddbf4ef74c2$var$UNITS[unit]) === null || ref === void 0 ? void 0 : ref[unitDisplay]))
      throw new Error(`Unsupported unit ${unit} with unitDisplay = ${unitDisplay}`);
    options = {
      ...options,
      style: "decimal"
    };
  }
  let cacheKey = locale + (options ? Object.entries(options).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
  if ($488c6ddbf4ef74c2$var$formatterCache.has(cacheKey))
    return $488c6ddbf4ef74c2$var$formatterCache.get(cacheKey);
  let numberFormatter = new Intl.NumberFormat(locale, options);
  $488c6ddbf4ef74c2$var$formatterCache.set(cacheKey, numberFormatter);
  return numberFormatter;
}
function $488c6ddbf4ef74c2$export$711b50b3c525e0f2(numberFormat, signDisplay, num) {
  if (signDisplay === "auto")
    return numberFormat.format(num);
  else if (signDisplay === "never")
    return numberFormat.format(Math.abs(num));
  else {
    let needsPositiveSign = false;
    if (signDisplay === "always")
      needsPositiveSign = num > 0 || Object.is(num, 0);
    else if (signDisplay === "exceptZero") {
      if (Object.is(num, -0) || Object.is(num, 0))
        num = Math.abs(num);
      else
        needsPositiveSign = num > 0;
    }
    if (needsPositiveSign) {
      let negative = numberFormat.format(-num);
      let noSign = numberFormat.format(num);
      let minus = negative.replace(noSign, "").replace(/\u200e|\u061C/, "");
      if ([
        ...minus
      ].length !== 1)
        console.warn("@react-aria/i18n polyfill for NumberFormat signDisplay: Unsupported case");
      let positive = negative.replace(noSign, "!!!").replace(minus, "+").replace("!!!", noSign);
      return positive;
    } else
      return numberFormat.format(num);
  }
}
var $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX = new RegExp("^.*\\(.*\\).*$");
var $6c7bd7858deea686$var$NUMBERING_SYSTEMS = [
  "latn",
  "arab",
  "hanidec"
];
var $6c7bd7858deea686$export$cd11ab140839f11d = class {
  parse(value) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).parse(value);
  }
  isValidPartialNumber(value, minValue, maxValue) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).isValidPartialNumber(value, minValue, maxValue);
  }
  getNumberingSystem(value) {
    return $6c7bd7858deea686$var$getNumberParserImpl(this.locale, this.options, value).options.numberingSystem;
  }
  constructor(locale, options = {}) {
    this.locale = locale;
    this.options = options;
  }
};
var $6c7bd7858deea686$var$numberParserCache = /* @__PURE__ */ new Map();
function $6c7bd7858deea686$var$getNumberParserImpl(locale, options, value) {
  let defaultParser = $6c7bd7858deea686$var$getCachedNumberParser(locale, options);
  if (!locale.includes("-nu-") && !defaultParser.isValidPartialNumber(value)) {
    for (let numberingSystem of $6c7bd7858deea686$var$NUMBERING_SYSTEMS)
      if (numberingSystem !== defaultParser.options.numberingSystem) {
        let parser = $6c7bd7858deea686$var$getCachedNumberParser(locale + (locale.includes("-u-") ? "-nu-" : "-u-nu-") + numberingSystem, options);
        if (parser.isValidPartialNumber(value))
          return parser;
      }
  }
  return defaultParser;
}
function $6c7bd7858deea686$var$getCachedNumberParser(locale, options) {
  let cacheKey = locale + (options ? Object.entries(options).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
  let parser = $6c7bd7858deea686$var$numberParserCache.get(cacheKey);
  if (!parser) {
    parser = new $6c7bd7858deea686$var$NumberParserImpl(locale, options);
    $6c7bd7858deea686$var$numberParserCache.set(cacheKey, parser);
  }
  return parser;
}
var $6c7bd7858deea686$var$NumberParserImpl = class {
  parse(value) {
    let fullySanitizedValue = this.sanitize(value);
    fullySanitizedValue = $6c7bd7858deea686$var$replaceAll(fullySanitizedValue, this.symbols.group, "").replace(this.symbols.decimal, ".").replace(this.symbols.minusSign, "-").replace(this.symbols.numeral, this.symbols.index);
    let newValue = fullySanitizedValue ? +fullySanitizedValue : NaN;
    if (isNaN(newValue))
      return NaN;
    if (this.options.currencySign === "accounting" && $6c7bd7858deea686$var$CURRENCY_SIGN_REGEX.test(value))
      newValue = -1 * newValue;
    if (this.options.style === "percent") {
      newValue /= 100;
      var _maximumFractionDigits;
      newValue = +newValue.toFixed(((_maximumFractionDigits = this.options.maximumFractionDigits) !== null && _maximumFractionDigits !== void 0 ? _maximumFractionDigits : 0) + 2);
    }
    return newValue;
  }
  sanitize(value) {
    value = value.replace(this.symbols.literals, "");
    value = value.replace("-", this.symbols.minusSign);
    if (this.options.numberingSystem === "arab") {
      value = value.replace(",", this.symbols.decimal);
      value = value.replace(String.fromCharCode(1548), this.symbols.decimal);
      value = $6c7bd7858deea686$var$replaceAll(value, ".", this.symbols.group);
    }
    if (this.options.locale === "fr-FR")
      value = $6c7bd7858deea686$var$replaceAll(value, ".", String.fromCharCode(8239));
    return value;
  }
  isValidPartialNumber(value, minValue = -Infinity, maxValue = Infinity) {
    value = this.sanitize(value);
    if (value.startsWith(this.symbols.minusSign) && minValue < 0)
      value = value.slice(this.symbols.minusSign.length);
    else if (this.symbols.plusSign && value.startsWith(this.symbols.plusSign) && maxValue > 0)
      value = value.slice(this.symbols.plusSign.length);
    if (value.startsWith(this.symbols.group))
      return false;
    value = $6c7bd7858deea686$var$replaceAll(value, this.symbols.group, "").replace(this.symbols.numeral, "").replace(this.symbols.decimal, "");
    return value.length === 0;
  }
  constructor(locale, options = {}) {
    this.formatter = new Intl.NumberFormat(locale, options);
    this.options = this.formatter.resolvedOptions();
    this.symbols = $6c7bd7858deea686$var$getSymbols(this.formatter, this.options, options);
  }
};
var $6c7bd7858deea686$var$nonLiteralParts = /* @__PURE__ */ new Set([
  "decimal",
  "fraction",
  "integer",
  "minusSign",
  "plusSign",
  "group"
]);
function $6c7bd7858deea686$var$getSymbols(formatter, intlOptions, originalOptions) {
  var ref, ref1, ref2, ref3;
  let allParts = formatter.formatToParts(-10000.111);
  let posAllParts = formatter.formatToParts(10000.111);
  let singularParts = formatter.formatToParts(1);
  var ref4;
  let minusSign = (ref4 = (ref = allParts.find((p2) => p2.type === "minusSign")) === null || ref === void 0 ? void 0 : ref.value) !== null && ref4 !== void 0 ? ref4 : "-";
  let plusSign = (ref1 = posAllParts.find((p2) => p2.type === "plusSign")) === null || ref1 === void 0 ? void 0 : ref1.value;
  if (!plusSign && ((originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "exceptZero" || (originalOptions === null || originalOptions === void 0 ? void 0 : originalOptions.signDisplay) === "always"))
    plusSign = "+";
  let decimal = (ref2 = allParts.find((p2) => p2.type === "decimal")) === null || ref2 === void 0 ? void 0 : ref2.value;
  let group = (ref3 = allParts.find((p2) => p2.type === "group")) === null || ref3 === void 0 ? void 0 : ref3.value;
  let pluralLiterals = allParts.filter((p2) => !$6c7bd7858deea686$var$nonLiteralParts.has(p2.type)).map((p2) => $6c7bd7858deea686$var$escapeRegex(p2.value));
  let singularLiterals = singularParts.filter((p2) => !$6c7bd7858deea686$var$nonLiteralParts.has(p2.type)).map((p2) => $6c7bd7858deea686$var$escapeRegex(p2.value));
  let sortedLiterals = [
    .../* @__PURE__ */ new Set([
      ...singularLiterals,
      ...pluralLiterals
    ])
  ].sort((a2, b2) => b2.length - a2.length);
  let literals = new RegExp(`${sortedLiterals.join("|")}|[\\p{White_Space}]`, "gu");
  let numerals = [
    ...new Intl.NumberFormat(intlOptions.locale, {
      useGrouping: false
    }).format(9876543210)
  ].reverse();
  let indexes = new Map(numerals.map((d2, i2) => [
    d2,
    i2
  ]));
  let numeral = new RegExp(`[${numerals.join("")}]`, "g");
  let index = (d2) => String(indexes.get(d2));
  return {
    minusSign,
    plusSign,
    decimal,
    group,
    literals,
    numeral,
    index
  };
}
function $6c7bd7858deea686$var$replaceAll(str, find, replace) {
  if (str.replaceAll)
    return str.replaceAll(find, replace);
  return str.split(find).join(replace);
}
function $6c7bd7858deea686$var$escapeRegex(string) {
  return string.replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&");
}

// ../../ui/node_modules/@react-aria/i18n/dist/module.js
function $parcel$export3(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $18f2051aff69b9bf$exports = {};
$parcel$export3($18f2051aff69b9bf$exports, "I18nProvider", () => $18f2051aff69b9bf$export$a54013f0d02a8f82);
$parcel$export3($18f2051aff69b9bf$exports, "useLocale", () => $18f2051aff69b9bf$export$43bb16f9c6d9e3f7);
var $148a7a147e38ea7f$var$RTL_SCRIPTS = /* @__PURE__ */ new Set([
  "Arab",
  "Syrc",
  "Samr",
  "Mand",
  "Thaa",
  "Mend",
  "Nkoo",
  "Adlm",
  "Rohg",
  "Hebr"
]);
var $148a7a147e38ea7f$var$RTL_LANGS = /* @__PURE__ */ new Set([
  "ae",
  "ar",
  "arc",
  "bcc",
  "bqi",
  "ckb",
  "dv",
  "fa",
  "glk",
  "he",
  "ku",
  "mzn",
  "nqo",
  "pnb",
  "ps",
  "sd",
  "ug",
  "ur",
  "yi"
]);
function $148a7a147e38ea7f$export$702d680b21cbd764(locale) {
  if (Intl.Locale) {
    let script = new Intl.Locale(locale).maximize().script;
    return $148a7a147e38ea7f$var$RTL_SCRIPTS.has(script);
  }
  let lang = locale.split("-")[0];
  return $148a7a147e38ea7f$var$RTL_LANGS.has(lang);
}
function $1e5a04cdaf7d1af8$export$f09106e7c6677ec5() {
  let locale = typeof navigator !== "undefined" && (navigator.language || navigator.userLanguage) || "en-US";
  return {
    locale,
    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? "rtl" : "ltr"
  };
}
var $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
var $1e5a04cdaf7d1af8$var$listeners = /* @__PURE__ */ new Set();
function $1e5a04cdaf7d1af8$var$updateLocale() {
  $1e5a04cdaf7d1af8$var$currentLocale = $1e5a04cdaf7d1af8$export$f09106e7c6677ec5();
  for (let listener of $1e5a04cdaf7d1af8$var$listeners)
    listener($1e5a04cdaf7d1af8$var$currentLocale);
}
function $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a() {
  let isSSR2 = $9d939cbc98267846$export$535bd6ca7f90a273();
  let [defaultLocale, setDefaultLocale] = (0, import_react3.useState)($1e5a04cdaf7d1af8$var$currentLocale);
  (0, import_react3.useEffect)(() => {
    if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
      window.addEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
    $1e5a04cdaf7d1af8$var$listeners.add(setDefaultLocale);
    return () => {
      $1e5a04cdaf7d1af8$var$listeners.delete(setDefaultLocale);
      if ($1e5a04cdaf7d1af8$var$listeners.size === 0)
        window.removeEventListener("languagechange", $1e5a04cdaf7d1af8$var$updateLocale);
    };
  }, []);
  if (isSSR2)
    return {
      locale: "en-US",
      direction: "ltr"
    };
  return defaultLocale;
}
var $18f2051aff69b9bf$var$I18nContext = /* @__PURE__ */ import_react3.default.createContext(null);
function $18f2051aff69b9bf$export$a54013f0d02a8f82(props) {
  let { locale, children } = props;
  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
  let value = locale ? {
    locale,
    direction: $148a7a147e38ea7f$export$702d680b21cbd764(locale) ? "rtl" : "ltr"
  } : defaultLocale;
  return /* @__PURE__ */ import_react3.default.createElement($18f2051aff69b9bf$var$I18nContext.Provider, {
    value
  }, children);
}
function $18f2051aff69b9bf$export$43bb16f9c6d9e3f7() {
  let defaultLocale = $1e5a04cdaf7d1af8$export$188ec29ebc2bdc3a();
  let context = (0, import_react3.useContext)($18f2051aff69b9bf$var$I18nContext);
  return context || defaultLocale;
}
var $321bc95feeb923dd$exports = {};
$parcel$export3($321bc95feeb923dd$exports, "useMessageFormatter", () => $321bc95feeb923dd$export$ec23bf898b1eed85);
var $321bc95feeb923dd$var$cache = /* @__PURE__ */ new WeakMap();
function $321bc95feeb923dd$var$getCachedDictionary(strings) {
  let dictionary = $321bc95feeb923dd$var$cache.get(strings);
  if (!dictionary) {
    dictionary = new $70eee6030fd7c1a1$export$64839e615120df17(strings);
    $321bc95feeb923dd$var$cache.set(strings, dictionary);
  }
  return dictionary;
}
function $321bc95feeb923dd$export$ec23bf898b1eed85(strings) {
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let dictionary = (0, import_react3.useMemo)(() => $321bc95feeb923dd$var$getCachedDictionary(strings), [
    strings
  ]);
  let formatter = (0, import_react3.useMemo)(() => new $a96338b8d4eb3cb0$export$526ebc05ff964723(locale, dictionary), [
    locale,
    dictionary
  ]);
  return (0, import_react3.useCallback)((key, variables) => formatter.format(key, variables), [
    formatter
  ]);
}
var $896ba0a80a8f4d36$exports = {};
$parcel$export3($896ba0a80a8f4d36$exports, "useDateFormatter", () => $896ba0a80a8f4d36$export$85fd5fdf27bacc79);
function $896ba0a80a8f4d36$export$85fd5fdf27bacc79(options) {
  let lastOptions = (0, import_react3.useRef)(null);
  if (options && lastOptions.current && $896ba0a80a8f4d36$var$isEqual(options, lastOptions.current))
    options = lastOptions.current;
  lastOptions.current = options;
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  return (0, import_react3.useMemo)(() => new $fb18d541ea1ad717$export$ad991b66133851cf(locale, options), [
    locale,
    options
  ]);
}
function $896ba0a80a8f4d36$var$isEqual(a2, b2) {
  if (a2 === b2)
    return true;
  let aKeys = Object.keys(a2);
  let bKeys = Object.keys(b2);
  if (aKeys.length !== bKeys.length)
    return false;
  for (let key of aKeys) {
    if (b2[key] !== a2[key])
      return false;
  }
  return true;
}
var $a916eb452884faea$exports = {};
$parcel$export3($a916eb452884faea$exports, "useNumberFormatter", () => $a916eb452884faea$export$b7a616150fdb9f44);
function $a916eb452884faea$export$b7a616150fdb9f44(options = {}) {
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  return (0, import_react3.useMemo)(() => new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, options), [
    locale,
    options
  ]);
}
var $325a3faab7a68acd$exports = {};
$parcel$export3($325a3faab7a68acd$exports, "useCollator", () => $325a3faab7a68acd$export$a16aca283550c30d);
var $325a3faab7a68acd$var$cache = /* @__PURE__ */ new Map();
function $325a3faab7a68acd$export$a16aca283550c30d(options) {
  let { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  let cacheKey = locale + (options ? Object.entries(options).sort((a2, b2) => a2[0] < b2[0] ? -1 : 1).join() : "");
  if ($325a3faab7a68acd$var$cache.has(cacheKey))
    return $325a3faab7a68acd$var$cache.get(cacheKey);
  let formatter = new Intl.Collator(locale, options);
  $325a3faab7a68acd$var$cache.set(cacheKey, formatter);
  return formatter;
}
var $bb77f239b46e8c72$exports = {};
$parcel$export3($bb77f239b46e8c72$exports, "useFilter", () => $bb77f239b46e8c72$export$3274cf84b703fff);
function $bb77f239b46e8c72$export$3274cf84b703fff(options) {
  let collator = $325a3faab7a68acd$export$a16aca283550c30d({
    usage: "search",
    ...options
  });
  return {
    startsWith(string, substring) {
      if (substring.length === 0)
        return true;
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      return collator.compare(string.slice(0, substring.length), substring) === 0;
    },
    endsWith(string, substring) {
      if (substring.length === 0)
        return true;
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      return collator.compare(string.slice(-substring.length), substring) === 0;
    },
    contains(string, substring) {
      if (substring.length === 0)
        return true;
      string = string.normalize("NFC");
      substring = substring.normalize("NFC");
      let scan = 0;
      let sliceLen = substring.length;
      for (; scan + sliceLen <= string.length; scan++) {
        let slice = string.slice(scan, scan + sliceLen);
        if (collator.compare(substring, slice) === 0)
          return true;
      }
      return false;
    }
  };
}

// ../../ui/node_modules/react-helmet/es/Helmet.js
init_react();
var import_prop_types = __toESM(require_prop_types());
var import_react_side_effect = __toESM(require_lib());
var import_react_fast_compare = __toESM(require_react_fast_compare());
var import_react4 = __toESM(require_react());
var import_object_assign = __toESM(require_object_assign());
var ATTRIBUTE_NAMES = {
  BODY: "bodyAttributes",
  HTML: "htmlAttributes",
  TITLE: "titleAttributes"
};
var TAG_NAMES = {
  BASE: "base",
  BODY: "body",
  HEAD: "head",
  HTML: "html",
  LINK: "link",
  META: "meta",
  NOSCRIPT: "noscript",
  SCRIPT: "script",
  STYLE: "style",
  TITLE: "title"
};
var VALID_TAG_NAMES = Object.keys(TAG_NAMES).map(function(name) {
  return TAG_NAMES[name];
});
var TAG_PROPERTIES = {
  CHARSET: "charset",
  CSS_TEXT: "cssText",
  HREF: "href",
  HTTPEQUIV: "http-equiv",
  INNER_HTML: "innerHTML",
  ITEM_PROP: "itemprop",
  NAME: "name",
  PROPERTY: "property",
  REL: "rel",
  SRC: "src",
  TARGET: "target"
};
var REACT_TAG_MAP = {
  accesskey: "accessKey",
  charset: "charSet",
  class: "className",
  contenteditable: "contentEditable",
  contextmenu: "contextMenu",
  "http-equiv": "httpEquiv",
  itemprop: "itemProp",
  tabindex: "tabIndex"
};
var HELMET_PROPS = {
  DEFAULT_TITLE: "defaultTitle",
  DEFER: "defer",
  ENCODE_SPECIAL_CHARACTERS: "encodeSpecialCharacters",
  ON_CHANGE_CLIENT_STATE: "onChangeClientState",
  TITLE_TEMPLATE: "titleTemplate"
};
var HTML_TAG_MAP = Object.keys(REACT_TAG_MAP).reduce(function(obj, key) {
  obj[REACT_TAG_MAP[key]] = key;
  return obj;
}, {});
var SELF_CLOSING_TAGS = [TAG_NAMES.NOSCRIPT, TAG_NAMES.SCRIPT, TAG_NAMES.STYLE];
var HELMET_ATTRIBUTE = "data-react-helmet";
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
  return typeof obj;
} : function(obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var classCallCheck = function(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};
var createClass = function() {
  function defineProperties(target, props) {
    for (var i2 = 0; i2 < props.length; i2++) {
      var descriptor = props[i2];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
  return function(Constructor, protoProps, staticProps) {
    if (protoProps)
      defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();
var _extends = Object.assign || function(target) {
  for (var i2 = 1; i2 < arguments.length; i2++) {
    var source = arguments[i2];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
};
var inherits = function(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass)
    Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};
var objectWithoutProperties = function(obj, keys) {
  var target = {};
  for (var i2 in obj) {
    if (keys.indexOf(i2) >= 0)
      continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i2))
      continue;
    target[i2] = obj[i2];
  }
  return target;
};
var possibleConstructorReturn = function(self2, call) {
  if (!self2) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return call && (typeof call === "object" || typeof call === "function") ? call : self2;
};
var encodeSpecialCharacters = function encodeSpecialCharacters2(str) {
  var encode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  if (encode === false) {
    return String(str);
  }
  return String(str).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#x27;");
};
var getTitleFromPropsList = function getTitleFromPropsList2(propsList) {
  var innermostTitle = getInnermostProperty(propsList, TAG_NAMES.TITLE);
  var innermostTemplate = getInnermostProperty(propsList, HELMET_PROPS.TITLE_TEMPLATE);
  if (innermostTemplate && innermostTitle) {
    return innermostTemplate.replace(/%s/g, function() {
      return Array.isArray(innermostTitle) ? innermostTitle.join("") : innermostTitle;
    });
  }
  var innermostDefaultTitle = getInnermostProperty(propsList, HELMET_PROPS.DEFAULT_TITLE);
  return innermostTitle || innermostDefaultTitle || void 0;
};
var getOnChangeClientState = function getOnChangeClientState2(propsList) {
  return getInnermostProperty(propsList, HELMET_PROPS.ON_CHANGE_CLIENT_STATE) || function() {
  };
};
var getAttributesFromPropsList = function getAttributesFromPropsList2(tagType, propsList) {
  return propsList.filter(function(props) {
    return typeof props[tagType] !== "undefined";
  }).map(function(props) {
    return props[tagType];
  }).reduce(function(tagAttrs, current) {
    return _extends({}, tagAttrs, current);
  }, {});
};
var getBaseTagFromPropsList = function getBaseTagFromPropsList2(primaryAttributes, propsList) {
  return propsList.filter(function(props) {
    return typeof props[TAG_NAMES.BASE] !== "undefined";
  }).map(function(props) {
    return props[TAG_NAMES.BASE];
  }).reverse().reduce(function(innermostBaseTag, tag) {
    if (!innermostBaseTag.length) {
      var keys = Object.keys(tag);
      for (var i2 = 0; i2 < keys.length; i2++) {
        var attributeKey = keys[i2];
        var lowerCaseAttributeKey = attributeKey.toLowerCase();
        if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 && tag[lowerCaseAttributeKey]) {
          return innermostBaseTag.concat(tag);
        }
      }
    }
    return innermostBaseTag;
  }, []);
};
var getTagsFromPropsList = function getTagsFromPropsList2(tagName, primaryAttributes, propsList) {
  var approvedSeenTags = {};
  return propsList.filter(function(props) {
    if (Array.isArray(props[tagName])) {
      return true;
    }
    if (typeof props[tagName] !== "undefined") {
      warn("Helmet: " + tagName + ' should be of type "Array". Instead found type "' + _typeof(props[tagName]) + '"');
    }
    return false;
  }).map(function(props) {
    return props[tagName];
  }).reverse().reduce(function(approvedTags, instanceTags) {
    var instanceSeenTags = {};
    instanceTags.filter(function(tag) {
      var primaryAttributeKey = void 0;
      var keys2 = Object.keys(tag);
      for (var i3 = 0; i3 < keys2.length; i3++) {
        var attributeKey2 = keys2[i3];
        var lowerCaseAttributeKey = attributeKey2.toLowerCase();
        if (primaryAttributes.indexOf(lowerCaseAttributeKey) !== -1 && !(primaryAttributeKey === TAG_PROPERTIES.REL && tag[primaryAttributeKey].toLowerCase() === "canonical") && !(lowerCaseAttributeKey === TAG_PROPERTIES.REL && tag[lowerCaseAttributeKey].toLowerCase() === "stylesheet")) {
          primaryAttributeKey = lowerCaseAttributeKey;
        }
        if (primaryAttributes.indexOf(attributeKey2) !== -1 && (attributeKey2 === TAG_PROPERTIES.INNER_HTML || attributeKey2 === TAG_PROPERTIES.CSS_TEXT || attributeKey2 === TAG_PROPERTIES.ITEM_PROP)) {
          primaryAttributeKey = attributeKey2;
        }
      }
      if (!primaryAttributeKey || !tag[primaryAttributeKey]) {
        return false;
      }
      var value = tag[primaryAttributeKey].toLowerCase();
      if (!approvedSeenTags[primaryAttributeKey]) {
        approvedSeenTags[primaryAttributeKey] = {};
      }
      if (!instanceSeenTags[primaryAttributeKey]) {
        instanceSeenTags[primaryAttributeKey] = {};
      }
      if (!approvedSeenTags[primaryAttributeKey][value]) {
        instanceSeenTags[primaryAttributeKey][value] = true;
        return true;
      }
      return false;
    }).reverse().forEach(function(tag) {
      return approvedTags.push(tag);
    });
    var keys = Object.keys(instanceSeenTags);
    for (var i2 = 0; i2 < keys.length; i2++) {
      var attributeKey = keys[i2];
      var tagUnion = (0, import_object_assign.default)({}, approvedSeenTags[attributeKey], instanceSeenTags[attributeKey]);
      approvedSeenTags[attributeKey] = tagUnion;
    }
    return approvedTags;
  }, []).reverse();
};
var getInnermostProperty = function getInnermostProperty2(propsList, property) {
  for (var i2 = propsList.length - 1; i2 >= 0; i2--) {
    var props = propsList[i2];
    if (props.hasOwnProperty(property)) {
      return props[property];
    }
  }
  return null;
};
var reducePropsToState = function reducePropsToState2(propsList) {
  return {
    baseTag: getBaseTagFromPropsList([TAG_PROPERTIES.HREF, TAG_PROPERTIES.TARGET], propsList),
    bodyAttributes: getAttributesFromPropsList(ATTRIBUTE_NAMES.BODY, propsList),
    defer: getInnermostProperty(propsList, HELMET_PROPS.DEFER),
    encode: getInnermostProperty(propsList, HELMET_PROPS.ENCODE_SPECIAL_CHARACTERS),
    htmlAttributes: getAttributesFromPropsList(ATTRIBUTE_NAMES.HTML, propsList),
    linkTags: getTagsFromPropsList(TAG_NAMES.LINK, [TAG_PROPERTIES.REL, TAG_PROPERTIES.HREF], propsList),
    metaTags: getTagsFromPropsList(TAG_NAMES.META, [TAG_PROPERTIES.NAME, TAG_PROPERTIES.CHARSET, TAG_PROPERTIES.HTTPEQUIV, TAG_PROPERTIES.PROPERTY, TAG_PROPERTIES.ITEM_PROP], propsList),
    noscriptTags: getTagsFromPropsList(TAG_NAMES.NOSCRIPT, [TAG_PROPERTIES.INNER_HTML], propsList),
    onChangeClientState: getOnChangeClientState(propsList),
    scriptTags: getTagsFromPropsList(TAG_NAMES.SCRIPT, [TAG_PROPERTIES.SRC, TAG_PROPERTIES.INNER_HTML], propsList),
    styleTags: getTagsFromPropsList(TAG_NAMES.STYLE, [TAG_PROPERTIES.CSS_TEXT], propsList),
    title: getTitleFromPropsList(propsList),
    titleAttributes: getAttributesFromPropsList(ATTRIBUTE_NAMES.TITLE, propsList)
  };
};
var rafPolyfill = function() {
  var clock = Date.now();
  return function(callback) {
    var currentTime = Date.now();
    if (currentTime - clock > 16) {
      clock = currentTime;
      callback(currentTime);
    } else {
      setTimeout(function() {
        rafPolyfill(callback);
      }, 0);
    }
  };
}();
var cafPolyfill = function cafPolyfill2(id) {
  return clearTimeout(id);
};
var requestAnimationFrame2 = typeof window !== "undefined" ? window.requestAnimationFrame && window.requestAnimationFrame.bind(window) || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || rafPolyfill : globalThis.requestAnimationFrame || rafPolyfill;
var cancelAnimationFrame2 = typeof window !== "undefined" ? window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || cafPolyfill : globalThis.cancelAnimationFrame || cafPolyfill;
var warn = function warn2(msg) {
  return console && typeof console.warn === "function" && console.warn(msg);
};
var _helmetCallback = null;
var handleClientStateChange = function handleClientStateChange2(newState) {
  if (_helmetCallback) {
    cancelAnimationFrame2(_helmetCallback);
  }
  if (newState.defer) {
    _helmetCallback = requestAnimationFrame2(function() {
      commitTagChanges(newState, function() {
        _helmetCallback = null;
      });
    });
  } else {
    commitTagChanges(newState);
    _helmetCallback = null;
  }
};
var commitTagChanges = function commitTagChanges2(newState, cb) {
  var baseTag = newState.baseTag, bodyAttributes = newState.bodyAttributes, htmlAttributes = newState.htmlAttributes, linkTags = newState.linkTags, metaTags = newState.metaTags, noscriptTags = newState.noscriptTags, onChangeClientState = newState.onChangeClientState, scriptTags = newState.scriptTags, styleTags = newState.styleTags, title = newState.title, titleAttributes = newState.titleAttributes;
  updateAttributes(TAG_NAMES.BODY, bodyAttributes);
  updateAttributes(TAG_NAMES.HTML, htmlAttributes);
  updateTitle(title, titleAttributes);
  var tagUpdates = {
    baseTag: updateTags(TAG_NAMES.BASE, baseTag),
    linkTags: updateTags(TAG_NAMES.LINK, linkTags),
    metaTags: updateTags(TAG_NAMES.META, metaTags),
    noscriptTags: updateTags(TAG_NAMES.NOSCRIPT, noscriptTags),
    scriptTags: updateTags(TAG_NAMES.SCRIPT, scriptTags),
    styleTags: updateTags(TAG_NAMES.STYLE, styleTags)
  };
  var addedTags = {};
  var removedTags = {};
  Object.keys(tagUpdates).forEach(function(tagType) {
    var _tagUpdates$tagType = tagUpdates[tagType], newTags = _tagUpdates$tagType.newTags, oldTags = _tagUpdates$tagType.oldTags;
    if (newTags.length) {
      addedTags[tagType] = newTags;
    }
    if (oldTags.length) {
      removedTags[tagType] = tagUpdates[tagType].oldTags;
    }
  });
  cb && cb();
  onChangeClientState(newState, addedTags, removedTags);
};
var flattenArray = function flattenArray2(possibleArray) {
  return Array.isArray(possibleArray) ? possibleArray.join("") : possibleArray;
};
var updateTitle = function updateTitle2(title, attributes) {
  if (typeof title !== "undefined" && document.title !== title) {
    document.title = flattenArray(title);
  }
  updateAttributes(TAG_NAMES.TITLE, attributes);
};
var updateAttributes = function updateAttributes2(tagName, attributes) {
  var elementTag = document.getElementsByTagName(tagName)[0];
  if (!elementTag) {
    return;
  }
  var helmetAttributeString = elementTag.getAttribute(HELMET_ATTRIBUTE);
  var helmetAttributes = helmetAttributeString ? helmetAttributeString.split(",") : [];
  var attributesToRemove = [].concat(helmetAttributes);
  var attributeKeys = Object.keys(attributes);
  for (var i2 = 0; i2 < attributeKeys.length; i2++) {
    var attribute = attributeKeys[i2];
    var value = attributes[attribute] || "";
    if (elementTag.getAttribute(attribute) !== value) {
      elementTag.setAttribute(attribute, value);
    }
    if (helmetAttributes.indexOf(attribute) === -1) {
      helmetAttributes.push(attribute);
    }
    var indexToSave = attributesToRemove.indexOf(attribute);
    if (indexToSave !== -1) {
      attributesToRemove.splice(indexToSave, 1);
    }
  }
  for (var _i = attributesToRemove.length - 1; _i >= 0; _i--) {
    elementTag.removeAttribute(attributesToRemove[_i]);
  }
  if (helmetAttributes.length === attributesToRemove.length) {
    elementTag.removeAttribute(HELMET_ATTRIBUTE);
  } else if (elementTag.getAttribute(HELMET_ATTRIBUTE) !== attributeKeys.join(",")) {
    elementTag.setAttribute(HELMET_ATTRIBUTE, attributeKeys.join(","));
  }
};
var updateTags = function updateTags2(type, tags) {
  var headElement = document.head || document.querySelector(TAG_NAMES.HEAD);
  var tagNodes = headElement.querySelectorAll(type + "[" + HELMET_ATTRIBUTE + "]");
  var oldTags = Array.prototype.slice.call(tagNodes);
  var newTags = [];
  var indexToDelete = void 0;
  if (tags && tags.length) {
    tags.forEach(function(tag) {
      var newElement = document.createElement(type);
      for (var attribute in tag) {
        if (tag.hasOwnProperty(attribute)) {
          if (attribute === TAG_PROPERTIES.INNER_HTML) {
            newElement.innerHTML = tag.innerHTML;
          } else if (attribute === TAG_PROPERTIES.CSS_TEXT) {
            if (newElement.styleSheet) {
              newElement.styleSheet.cssText = tag.cssText;
            } else {
              newElement.appendChild(document.createTextNode(tag.cssText));
            }
          } else {
            var value = typeof tag[attribute] === "undefined" ? "" : tag[attribute];
            newElement.setAttribute(attribute, value);
          }
        }
      }
      newElement.setAttribute(HELMET_ATTRIBUTE, "true");
      if (oldTags.some(function(existingTag, index) {
        indexToDelete = index;
        return newElement.isEqualNode(existingTag);
      })) {
        oldTags.splice(indexToDelete, 1);
      } else {
        newTags.push(newElement);
      }
    });
  }
  oldTags.forEach(function(tag) {
    return tag.parentNode.removeChild(tag);
  });
  newTags.forEach(function(tag) {
    return headElement.appendChild(tag);
  });
  return {
    oldTags,
    newTags
  };
};
var generateElementAttributesAsString = function generateElementAttributesAsString2(attributes) {
  return Object.keys(attributes).reduce(function(str, key) {
    var attr = typeof attributes[key] !== "undefined" ? key + '="' + attributes[key] + '"' : "" + key;
    return str ? str + " " + attr : attr;
  }, "");
};
var generateTitleAsString = function generateTitleAsString2(type, title, attributes, encode) {
  var attributeString = generateElementAttributesAsString(attributes);
  var flattenedTitle = flattenArray(title);
  return attributeString ? "<" + type + " " + HELMET_ATTRIBUTE + '="true" ' + attributeString + ">" + encodeSpecialCharacters(flattenedTitle, encode) + "</" + type + ">" : "<" + type + " " + HELMET_ATTRIBUTE + '="true">' + encodeSpecialCharacters(flattenedTitle, encode) + "</" + type + ">";
};
var generateTagsAsString = function generateTagsAsString2(type, tags, encode) {
  return tags.reduce(function(str, tag) {
    var attributeHtml = Object.keys(tag).filter(function(attribute) {
      return !(attribute === TAG_PROPERTIES.INNER_HTML || attribute === TAG_PROPERTIES.CSS_TEXT);
    }).reduce(function(string, attribute) {
      var attr = typeof tag[attribute] === "undefined" ? attribute : attribute + '="' + encodeSpecialCharacters(tag[attribute], encode) + '"';
      return string ? string + " " + attr : attr;
    }, "");
    var tagContent = tag.innerHTML || tag.cssText || "";
    var isSelfClosing = SELF_CLOSING_TAGS.indexOf(type) === -1;
    return str + "<" + type + " " + HELMET_ATTRIBUTE + '="true" ' + attributeHtml + (isSelfClosing ? "/>" : ">" + tagContent + "</" + type + ">");
  }, "");
};
var convertElementAttributestoReactProps = function convertElementAttributestoReactProps2(attributes) {
  var initProps = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return Object.keys(attributes).reduce(function(obj, key) {
    obj[REACT_TAG_MAP[key] || key] = attributes[key];
    return obj;
  }, initProps);
};
var convertReactPropstoHtmlAttributes = function convertReactPropstoHtmlAttributes2(props) {
  var initAttributes = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  return Object.keys(props).reduce(function(obj, key) {
    obj[HTML_TAG_MAP[key] || key] = props[key];
    return obj;
  }, initAttributes);
};
var generateTitleAsReactComponent = function generateTitleAsReactComponent2(type, title, attributes) {
  var _initProps;
  var initProps = (_initProps = {
    key: title
  }, _initProps[HELMET_ATTRIBUTE] = true, _initProps);
  var props = convertElementAttributestoReactProps(attributes, initProps);
  return [import_react4.default.createElement(TAG_NAMES.TITLE, props, title)];
};
var generateTagsAsReactComponent = function generateTagsAsReactComponent2(type, tags) {
  return tags.map(function(tag, i2) {
    var _mappedTag;
    var mappedTag = (_mappedTag = {
      key: i2
    }, _mappedTag[HELMET_ATTRIBUTE] = true, _mappedTag);
    Object.keys(tag).forEach(function(attribute) {
      var mappedAttribute = REACT_TAG_MAP[attribute] || attribute;
      if (mappedAttribute === TAG_PROPERTIES.INNER_HTML || mappedAttribute === TAG_PROPERTIES.CSS_TEXT) {
        var content = tag.innerHTML || tag.cssText;
        mappedTag.dangerouslySetInnerHTML = { __html: content };
      } else {
        mappedTag[mappedAttribute] = tag[attribute];
      }
    });
    return import_react4.default.createElement(type, mappedTag);
  });
};
var getMethodsForTag = function getMethodsForTag2(type, tags, encode) {
  switch (type) {
    case TAG_NAMES.TITLE:
      return {
        toComponent: function toComponent() {
          return generateTitleAsReactComponent(type, tags.title, tags.titleAttributes, encode);
        },
        toString: function toString() {
          return generateTitleAsString(type, tags.title, tags.titleAttributes, encode);
        }
      };
    case ATTRIBUTE_NAMES.BODY:
    case ATTRIBUTE_NAMES.HTML:
      return {
        toComponent: function toComponent() {
          return convertElementAttributestoReactProps(tags);
        },
        toString: function toString() {
          return generateElementAttributesAsString(tags);
        }
      };
    default:
      return {
        toComponent: function toComponent() {
          return generateTagsAsReactComponent(type, tags);
        },
        toString: function toString() {
          return generateTagsAsString(type, tags, encode);
        }
      };
  }
};
var mapStateOnServer = function mapStateOnServer2(_ref) {
  var baseTag = _ref.baseTag, bodyAttributes = _ref.bodyAttributes, encode = _ref.encode, htmlAttributes = _ref.htmlAttributes, linkTags = _ref.linkTags, metaTags = _ref.metaTags, noscriptTags = _ref.noscriptTags, scriptTags = _ref.scriptTags, styleTags = _ref.styleTags, _ref$title = _ref.title, title = _ref$title === void 0 ? "" : _ref$title, titleAttributes = _ref.titleAttributes;
  return {
    base: getMethodsForTag(TAG_NAMES.BASE, baseTag, encode),
    bodyAttributes: getMethodsForTag(ATTRIBUTE_NAMES.BODY, bodyAttributes, encode),
    htmlAttributes: getMethodsForTag(ATTRIBUTE_NAMES.HTML, htmlAttributes, encode),
    link: getMethodsForTag(TAG_NAMES.LINK, linkTags, encode),
    meta: getMethodsForTag(TAG_NAMES.META, metaTags, encode),
    noscript: getMethodsForTag(TAG_NAMES.NOSCRIPT, noscriptTags, encode),
    script: getMethodsForTag(TAG_NAMES.SCRIPT, scriptTags, encode),
    style: getMethodsForTag(TAG_NAMES.STYLE, styleTags, encode),
    title: getMethodsForTag(TAG_NAMES.TITLE, { title, titleAttributes }, encode)
  };
};
var Helmet = function Helmet2(Component) {
  var _class, _temp;
  return _temp = _class = function(_React$Component) {
    inherits(HelmetWrapper, _React$Component);
    function HelmetWrapper() {
      classCallCheck(this, HelmetWrapper);
      return possibleConstructorReturn(this, _React$Component.apply(this, arguments));
    }
    HelmetWrapper.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps) {
      return !(0, import_react_fast_compare.default)(this.props, nextProps);
    };
    HelmetWrapper.prototype.mapNestedChildrenToProps = function mapNestedChildrenToProps(child, nestedChildren) {
      if (!nestedChildren) {
        return null;
      }
      switch (child.type) {
        case TAG_NAMES.SCRIPT:
        case TAG_NAMES.NOSCRIPT:
          return {
            innerHTML: nestedChildren
          };
        case TAG_NAMES.STYLE:
          return {
            cssText: nestedChildren
          };
      }
      throw new Error("<" + child.type + " /> elements are self-closing and can not contain children. Refer to our API for more information.");
    };
    HelmetWrapper.prototype.flattenArrayTypeChildren = function flattenArrayTypeChildren(_ref) {
      var _babelHelpers$extends;
      var child = _ref.child, arrayTypeChildren = _ref.arrayTypeChildren, newChildProps = _ref.newChildProps, nestedChildren = _ref.nestedChildren;
      return _extends({}, arrayTypeChildren, (_babelHelpers$extends = {}, _babelHelpers$extends[child.type] = [].concat(arrayTypeChildren[child.type] || [], [_extends({}, newChildProps, this.mapNestedChildrenToProps(child, nestedChildren))]), _babelHelpers$extends));
    };
    HelmetWrapper.prototype.mapObjectTypeChildren = function mapObjectTypeChildren(_ref2) {
      var _babelHelpers$extends2, _babelHelpers$extends3;
      var child = _ref2.child, newProps = _ref2.newProps, newChildProps = _ref2.newChildProps, nestedChildren = _ref2.nestedChildren;
      switch (child.type) {
        case TAG_NAMES.TITLE:
          return _extends({}, newProps, (_babelHelpers$extends2 = {}, _babelHelpers$extends2[child.type] = nestedChildren, _babelHelpers$extends2.titleAttributes = _extends({}, newChildProps), _babelHelpers$extends2));
        case TAG_NAMES.BODY:
          return _extends({}, newProps, {
            bodyAttributes: _extends({}, newChildProps)
          });
        case TAG_NAMES.HTML:
          return _extends({}, newProps, {
            htmlAttributes: _extends({}, newChildProps)
          });
      }
      return _extends({}, newProps, (_babelHelpers$extends3 = {}, _babelHelpers$extends3[child.type] = _extends({}, newChildProps), _babelHelpers$extends3));
    };
    HelmetWrapper.prototype.mapArrayTypeChildrenToProps = function mapArrayTypeChildrenToProps(arrayTypeChildren, newProps) {
      var newFlattenedProps = _extends({}, newProps);
      Object.keys(arrayTypeChildren).forEach(function(arrayChildName) {
        var _babelHelpers$extends4;
        newFlattenedProps = _extends({}, newFlattenedProps, (_babelHelpers$extends4 = {}, _babelHelpers$extends4[arrayChildName] = arrayTypeChildren[arrayChildName], _babelHelpers$extends4));
      });
      return newFlattenedProps;
    };
    HelmetWrapper.prototype.warnOnInvalidChildren = function warnOnInvalidChildren(child, nestedChildren) {
      if (true) {
        if (!VALID_TAG_NAMES.some(function(name) {
          return child.type === name;
        })) {
          if (typeof child.type === "function") {
            return warn("You may be attempting to nest <Helmet> components within each other, which is not allowed. Refer to our API for more information.");
          }
          return warn("Only elements types " + VALID_TAG_NAMES.join(", ") + " are allowed. Helmet does not support rendering <" + child.type + "> elements. Refer to our API for more information.");
        }
        if (nestedChildren && typeof nestedChildren !== "string" && (!Array.isArray(nestedChildren) || nestedChildren.some(function(nestedChild) {
          return typeof nestedChild !== "string";
        }))) {
          throw new Error("Helmet expects a string as a child of <" + child.type + ">. Did you forget to wrap your children in braces? ( <" + child.type + ">{``}</" + child.type + "> ) Refer to our API for more information.");
        }
      }
      return true;
    };
    HelmetWrapper.prototype.mapChildrenToProps = function mapChildrenToProps(children, newProps) {
      var _this2 = this;
      var arrayTypeChildren = {};
      import_react4.default.Children.forEach(children, function(child) {
        if (!child || !child.props) {
          return;
        }
        var _child$props = child.props, nestedChildren = _child$props.children, childProps = objectWithoutProperties(_child$props, ["children"]);
        var newChildProps = convertReactPropstoHtmlAttributes(childProps);
        _this2.warnOnInvalidChildren(child, nestedChildren);
        switch (child.type) {
          case TAG_NAMES.LINK:
          case TAG_NAMES.META:
          case TAG_NAMES.NOSCRIPT:
          case TAG_NAMES.SCRIPT:
          case TAG_NAMES.STYLE:
            arrayTypeChildren = _this2.flattenArrayTypeChildren({
              child,
              arrayTypeChildren,
              newChildProps,
              nestedChildren
            });
            break;
          default:
            newProps = _this2.mapObjectTypeChildren({
              child,
              newProps,
              newChildProps,
              nestedChildren
            });
            break;
        }
      });
      newProps = this.mapArrayTypeChildrenToProps(arrayTypeChildren, newProps);
      return newProps;
    };
    HelmetWrapper.prototype.render = function render3() {
      var _props = this.props, children = _props.children, props = objectWithoutProperties(_props, ["children"]);
      var newProps = _extends({}, props);
      if (children) {
        newProps = this.mapChildrenToProps(children, newProps);
      }
      return import_react4.default.createElement(Component, newProps);
    };
    createClass(HelmetWrapper, null, [{
      key: "canUseDOM",
      set: function set$$1(canUseDOM) {
        Component.canUseDOM = canUseDOM;
      }
    }]);
    return HelmetWrapper;
  }(import_react4.default.Component), _class.propTypes = {
    base: import_prop_types.default.object,
    bodyAttributes: import_prop_types.default.object,
    children: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.node), import_prop_types.default.node]),
    defaultTitle: import_prop_types.default.string,
    defer: import_prop_types.default.bool,
    encodeSpecialCharacters: import_prop_types.default.bool,
    htmlAttributes: import_prop_types.default.object,
    link: import_prop_types.default.arrayOf(import_prop_types.default.object),
    meta: import_prop_types.default.arrayOf(import_prop_types.default.object),
    noscript: import_prop_types.default.arrayOf(import_prop_types.default.object),
    onChangeClientState: import_prop_types.default.func,
    script: import_prop_types.default.arrayOf(import_prop_types.default.object),
    style: import_prop_types.default.arrayOf(import_prop_types.default.object),
    title: import_prop_types.default.string,
    titleAttributes: import_prop_types.default.object,
    titleTemplate: import_prop_types.default.string
  }, _class.defaultProps = {
    defer: true,
    encodeSpecialCharacters: true
  }, _class.peek = Component.peek, _class.rewind = function() {
    var mappedState = Component.rewind();
    if (!mappedState) {
      mappedState = mapStateOnServer({
        baseTag: [],
        bodyAttributes: {},
        encodeSpecialCharacters: true,
        htmlAttributes: {},
        linkTags: [],
        metaTags: [],
        noscriptTags: [],
        scriptTags: [],
        styleTags: [],
        title: "",
        titleAttributes: {}
      });
    }
    return mappedState;
  }, _temp;
};
var NullComponent = function NullComponent2() {
  return null;
};
var HelmetSideEffects = (0, import_react_side_effect.default)(reducePropsToState, handleClientStateChange, mapStateOnServer)(NullComponent);
var HelmetExport = Helmet(HelmetSideEffects);
HelmetExport.renderStatic = HelmetExport.rewind;

// ../../ui/node_modules/@react-aria/interactions/dist/module.js
init_react();

// ../../ui/node_modules/@react-aria/utils/dist/module.js
init_react();
var import_react6 = __toESM(require_react());

// ../../ui/node_modules/clsx/dist/clsx.m.js
init_react();
function toVal(mix) {
  var k2, y2, str = "";
  if (typeof mix === "string" || typeof mix === "number") {
    str += mix;
  } else if (typeof mix === "object") {
    if (Array.isArray(mix)) {
      for (k2 = 0; k2 < mix.length; k2++) {
        if (mix[k2]) {
          if (y2 = toVal(mix[k2])) {
            str && (str += " ");
            str += y2;
          }
        }
      }
    } else {
      for (k2 in mix) {
        if (mix[k2]) {
          str && (str += " ");
          str += k2;
        }
      }
    }
  }
  return str;
}
function clsx_m_default() {
  var i2 = 0, tmp, x2, str = "";
  while (i2 < arguments.length) {
    if (tmp = arguments[i2++]) {
      if (x2 = toVal(tmp)) {
        str && (str += " ");
        str += x2;
      }
    }
  }
  return str;
}

// ../../ui/node_modules/@react-stately/utils/dist/module.js
init_react();
var import_react5 = __toESM(require_react());
function $parcel$export4(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $bfee1151ccb0650f$exports = {};
$parcel$export4($bfee1151ccb0650f$exports, "useControlledState", () => $bfee1151ccb0650f$export$40bfa8c7b0832715);
function $bfee1151ccb0650f$export$40bfa8c7b0832715(value1, defaultValue, onChange) {
  let [stateValue, setStateValue] = (0, import_react5.useState)(value1 || defaultValue);
  let ref = (0, import_react5.useRef)(value1 !== void 0);
  let wasControlled = ref.current;
  let isControlled = value1 !== void 0;
  let stateRef = (0, import_react5.useRef)(stateValue);
  if (wasControlled !== isControlled)
    console.warn(`WARN: A component changed from ${wasControlled ? "controlled" : "uncontrolled"} to ${isControlled ? "controlled" : "uncontrolled"}.`);
  ref.current = isControlled;
  let setValue = (0, import_react5.useCallback)((value2, ...args) => {
    let onChangeCaller = (value, ...onChangeArgs) => {
      if (onChange) {
        if (!Object.is(stateRef.current, value))
          onChange(value, ...onChangeArgs);
      }
      if (!isControlled)
        stateRef.current = value;
    };
    if (typeof value2 === "function") {
      console.warn("We can not support a function callback. See Github Issues for details https://github.com/adobe/react-spectrum/issues/2320");
      let updateFunction = (oldValue, ...functionArgs) => {
        let interceptedValue = value2(isControlled ? stateRef.current : oldValue, ...functionArgs);
        onChangeCaller(interceptedValue, ...args);
        if (!isControlled)
          return interceptedValue;
        return oldValue;
      };
      setStateValue(updateFunction);
    } else {
      if (!isControlled)
        setStateValue(value2);
      onChangeCaller(value2, ...args);
    }
  }, [
    isControlled,
    onChange
  ]);
  if (isControlled)
    stateRef.current = value1;
  else
    value1 = stateValue;
  return [
    value1,
    setValue
  ];
}
var $48d9f1d165180307$exports = {};
$parcel$export4($48d9f1d165180307$exports, "clamp", () => $48d9f1d165180307$export$7d15b64cf5a3a4c4);
$parcel$export4($48d9f1d165180307$exports, "snapValueToStep", () => $48d9f1d165180307$export$cb6e0bb50bc19463);
$parcel$export4($48d9f1d165180307$exports, "toFixedNumber", () => $48d9f1d165180307$export$b6268554fba451f);
function $48d9f1d165180307$export$7d15b64cf5a3a4c4(value, min = -Infinity, max = Infinity) {
  let newValue = Math.min(Math.max(value, min), max);
  return newValue;
}
function $48d9f1d165180307$export$cb6e0bb50bc19463(value, min, max, step) {
  let remainder = (value - (isNaN(min) ? 0 : min)) % step;
  let snappedValue = Math.abs(remainder) * 2 >= step ? value + Math.sign(remainder) * (step - Math.abs(remainder)) : value - remainder;
  if (!isNaN(min)) {
    if (snappedValue < min)
      snappedValue = min;
    else if (!isNaN(max) && snappedValue > max)
      snappedValue = min + Math.floor((max - min) / step) * step;
  } else if (!isNaN(max) && snappedValue > max)
    snappedValue = Math.floor(max / step) * step;
  let string = step.toString();
  let index = string.indexOf(".");
  let precision = index >= 0 ? string.length - index : 0;
  if (precision > 0) {
    let pow = Math.pow(10, precision);
    snappedValue = Math.round(snappedValue * pow) / pow;
  }
  return snappedValue;
}
function $48d9f1d165180307$export$b6268554fba451f(value, digits, base = 10) {
  const pow = Math.pow(base, digits);
  return Math.round(value * pow) / pow;
}

// ../../ui/node_modules/@react-aria/utils/dist/module.js
function $parcel$export5(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $bdb11010cef70236$exports = {};
$parcel$export5($bdb11010cef70236$exports, "useId", () => $bdb11010cef70236$export$f680877a34711e37);
$parcel$export5($bdb11010cef70236$exports, "mergeIds", () => $bdb11010cef70236$export$cd8c9cb68f842629);
$parcel$export5($bdb11010cef70236$exports, "useSlotId", () => $bdb11010cef70236$export$b4cc09c592e8fdb8);
var $f0a04ccd8dbdd83b$exports = {};
$parcel$export5($f0a04ccd8dbdd83b$exports, "useLayoutEffect", () => $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c);
var $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c = typeof window !== "undefined" ? import_react6.default.useLayoutEffect : () => {
};
var $bdb11010cef70236$var$idsUpdaterMap = /* @__PURE__ */ new Map();
function $bdb11010cef70236$export$f680877a34711e37(defaultId) {
  let isRendering = (0, import_react6.useRef)(true);
  isRendering.current = true;
  let [value, setValue] = (0, import_react6.useState)(defaultId);
  let nextId = (0, import_react6.useRef)(null);
  let res = $9d939cbc98267846$export$619500959fc48b26(value);
  let updateValue = (val) => {
    if (!isRendering.current)
      setValue(val);
    else
      nextId.current = val;
  };
  $bdb11010cef70236$var$idsUpdaterMap.set(res, updateValue);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    isRendering.current = false;
  }, [
    updateValue
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let r2 = res;
    return () => {
      $bdb11010cef70236$var$idsUpdaterMap.delete(r2);
    };
  }, [
    res
  ]);
  (0, import_react6.useEffect)(() => {
    let newId = nextId.current;
    if (newId) {
      setValue(newId);
      nextId.current = null;
    }
  }, [
    setValue,
    updateValue
  ]);
  return res;
}
function $bdb11010cef70236$export$cd8c9cb68f842629(idA, idB) {
  if (idA === idB)
    return idA;
  let setIdA = $bdb11010cef70236$var$idsUpdaterMap.get(idA);
  if (setIdA) {
    setIdA(idB);
    return idB;
  }
  let setIdB = $bdb11010cef70236$var$idsUpdaterMap.get(idB);
  if (setIdB) {
    setIdB(idA);
    return idA;
  }
  return idB;
}
function $bdb11010cef70236$export$b4cc09c592e8fdb8(depArray = []) {
  let id = $bdb11010cef70236$export$f680877a34711e37();
  let [resolvedId, setResolvedId] = $1dbecbe27a04f9af$export$14d238f342723f25(id);
  let updateId = (0, import_react6.useCallback)(() => {
    setResolvedId(function* () {
      yield id;
      yield document.getElementById(id) ? id : null;
    });
  }, [
    id,
    setResolvedId
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(updateId, [
    id,
    updateId,
    ...depArray
  ]);
  return resolvedId;
}
var $ff5963eb1fccf552$exports = {};
$parcel$export5($ff5963eb1fccf552$exports, "chain", () => $ff5963eb1fccf552$export$e08e3b67e392101e);
function $ff5963eb1fccf552$export$e08e3b67e392101e(...callbacks) {
  return (...args) => {
    for (let callback of callbacks)
      if (typeof callback === "function")
        callback(...args);
  };
}
var $3ef42575df84b30b$exports = {};
$parcel$export5($3ef42575df84b30b$exports, "mergeProps", () => $3ef42575df84b30b$export$9d1611c77c2fe928);
function $3ef42575df84b30b$export$9d1611c77c2fe928(...args) {
  let result = {
    ...args[0]
  };
  for (let i2 = 1; i2 < args.length; i2++) {
    let props = args[i2];
    for (let key in props) {
      let a2 = result[key];
      let b2 = props[key];
      if (typeof a2 === "function" && typeof b2 === "function" && key[0] === "o" && key[1] === "n" && key.charCodeAt(2) >= 65 && key.charCodeAt(2) <= 90)
        result[key] = $ff5963eb1fccf552$export$e08e3b67e392101e(a2, b2);
      else if ((key === "className" || key === "UNSAFE_className") && typeof a2 === "string" && typeof b2 === "string")
        result[key] = clsx_m_default(a2, b2);
      else if (key === "id" && a2 && b2)
        result.id = $bdb11010cef70236$export$cd8c9cb68f842629(a2, b2);
      else
        result[key] = b2 !== void 0 ? b2 : a2;
    }
  }
  return result;
}
var $65484d02dcb7eb3e$exports = {};
$parcel$export5($65484d02dcb7eb3e$exports, "filterDOMProps", () => $65484d02dcb7eb3e$export$457c3d6518dd4c6f);
var $65484d02dcb7eb3e$var$DOMPropNames = /* @__PURE__ */ new Set([
  "id"
]);
var $65484d02dcb7eb3e$var$labelablePropNames = /* @__PURE__ */ new Set([
  "aria-label",
  "aria-labelledby",
  "aria-describedby",
  "aria-details"
]);
var $65484d02dcb7eb3e$var$propRe = /^(data-.*)$/;
function $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, opts = {}) {
  let { labelable, propNames } = opts;
  let filteredProps = {};
  for (const prop in props)
    if (Object.prototype.hasOwnProperty.call(props, prop) && ($65484d02dcb7eb3e$var$DOMPropNames.has(prop) || labelable && $65484d02dcb7eb3e$var$labelablePropNames.has(prop) || (propNames === null || propNames === void 0 ? void 0 : propNames.has(prop)) || $65484d02dcb7eb3e$var$propRe.test(prop)))
      filteredProps[prop] = props[prop];
  return filteredProps;
}
var $7215afc6de606d6b$exports = {};
$parcel$export5($7215afc6de606d6b$exports, "focusWithoutScrolling", () => $7215afc6de606d6b$export$de79e2c695e052f3);
function $7215afc6de606d6b$export$de79e2c695e052f3(element) {
  if ($7215afc6de606d6b$var$supportsPreventScroll())
    element.focus({
      preventScroll: true
    });
  else {
    let scrollableElements = $7215afc6de606d6b$var$getScrollableElements(element);
    element.focus();
    $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements);
  }
}
var $7215afc6de606d6b$var$supportsPreventScrollCached = null;
function $7215afc6de606d6b$var$supportsPreventScroll() {
  if ($7215afc6de606d6b$var$supportsPreventScrollCached == null) {
    $7215afc6de606d6b$var$supportsPreventScrollCached = false;
    try {
      var focusElem = document.createElement("div");
      focusElem.focus({
        get preventScroll() {
          $7215afc6de606d6b$var$supportsPreventScrollCached = true;
          return true;
        }
      });
    } catch (e2) {
    }
  }
  return $7215afc6de606d6b$var$supportsPreventScrollCached;
}
function $7215afc6de606d6b$var$getScrollableElements(element) {
  var parent = element.parentNode;
  var scrollableElements = [];
  var rootScrollingElement = document.scrollingElement || document.documentElement;
  while (parent instanceof HTMLElement && parent !== rootScrollingElement) {
    if (parent.offsetHeight < parent.scrollHeight || parent.offsetWidth < parent.scrollWidth)
      scrollableElements.push({
        element: parent,
        scrollTop: parent.scrollTop,
        scrollLeft: parent.scrollLeft
      });
    parent = parent.parentNode;
  }
  if (rootScrollingElement instanceof HTMLElement)
    scrollableElements.push({
      element: rootScrollingElement,
      scrollTop: rootScrollingElement.scrollTop,
      scrollLeft: rootScrollingElement.scrollLeft
    });
  return scrollableElements;
}
function $7215afc6de606d6b$var$restoreScrollPosition(scrollableElements) {
  for (let { element, scrollTop, scrollLeft } of scrollableElements) {
    element.scrollTop = scrollTop;
    element.scrollLeft = scrollLeft;
  }
}
var $ab71dadb03a6fb2e$exports = {};
$parcel$export5($ab71dadb03a6fb2e$exports, "getOffset", () => $ab71dadb03a6fb2e$export$622cea445a1c5b7d);
function $ab71dadb03a6fb2e$export$622cea445a1c5b7d(element, reverse, orientation = "horizontal") {
  let rect = element.getBoundingClientRect();
  if (reverse)
    return orientation === "horizontal" ? rect.right : rect.bottom;
  return orientation === "horizontal" ? rect.left : rect.top;
}
var $103b0e103f1b5952$exports = {};
$parcel$export5($103b0e103f1b5952$exports, "clamp", () => $48d9f1d165180307$export$7d15b64cf5a3a4c4);
$parcel$export5($103b0e103f1b5952$exports, "snapValueToStep", () => $48d9f1d165180307$export$cb6e0bb50bc19463);
var $bbed8b41f857bcc0$exports = {};
$parcel$export5($bbed8b41f857bcc0$exports, "runAfterTransition", () => $bbed8b41f857bcc0$export$24490316f764c430);
var $bbed8b41f857bcc0$var$transitionsByElement = /* @__PURE__ */ new Map();
var $bbed8b41f857bcc0$var$transitionCallbacks = /* @__PURE__ */ new Set();
function $bbed8b41f857bcc0$var$setupGlobalEvents() {
  if (typeof window === "undefined")
    return;
  let onTransitionStart = (e2) => {
    let transitions = $bbed8b41f857bcc0$var$transitionsByElement.get(e2.target);
    if (!transitions) {
      transitions = /* @__PURE__ */ new Set();
      $bbed8b41f857bcc0$var$transitionsByElement.set(e2.target, transitions);
      e2.target.addEventListener("transitioncancel", onTransitionEnd);
    }
    transitions.add(e2.propertyName);
  };
  let onTransitionEnd = (e2) => {
    let properties = $bbed8b41f857bcc0$var$transitionsByElement.get(e2.target);
    if (!properties)
      return;
    properties.delete(e2.propertyName);
    if (properties.size === 0) {
      e2.target.removeEventListener("transitioncancel", onTransitionEnd);
      $bbed8b41f857bcc0$var$transitionsByElement.delete(e2.target);
    }
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0) {
      for (let cb of $bbed8b41f857bcc0$var$transitionCallbacks)
        cb();
      $bbed8b41f857bcc0$var$transitionCallbacks.clear();
    }
  };
  document.body.addEventListener("transitionrun", onTransitionStart);
  document.body.addEventListener("transitionend", onTransitionEnd);
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading")
    $bbed8b41f857bcc0$var$setupGlobalEvents();
  else
    document.addEventListener("DOMContentLoaded", $bbed8b41f857bcc0$var$setupGlobalEvents);
}
function $bbed8b41f857bcc0$export$24490316f764c430(fn) {
  requestAnimationFrame(() => {
    if ($bbed8b41f857bcc0$var$transitionsByElement.size === 0)
      fn();
    else
      $bbed8b41f857bcc0$var$transitionCallbacks.add(fn);
  });
}
var $9cc09df9fd7676be$exports = {};
$parcel$export5($9cc09df9fd7676be$exports, "useDrag1D", () => $9cc09df9fd7676be$export$7bbed75feba39706);
var $9cc09df9fd7676be$var$draggingElements = [];
function $9cc09df9fd7676be$export$7bbed75feba39706(props) {
  console.warn("useDrag1D is deprecated, please use `useMove` instead https://react-spectrum.adobe.com/react-aria/useMove.html");
  let { containerRef, reverse, orientation, onHover, onDrag, onPositionChange, onIncrement, onDecrement, onIncrementToMax, onDecrementToMin, onCollapseToggle } = props;
  let getPosition = (e2) => orientation === "horizontal" ? e2.clientX : e2.clientY;
  let getNextOffset = (e2) => {
    let containerOffset = $ab71dadb03a6fb2e$export$622cea445a1c5b7d(containerRef.current, reverse, orientation);
    let mouseOffset = getPosition(e2);
    let nextOffset = reverse ? containerOffset - mouseOffset : mouseOffset - containerOffset;
    return nextOffset;
  };
  let dragging = (0, import_react6.useRef)(false);
  let prevPosition = (0, import_react6.useRef)(0);
  let handlers = (0, import_react6.useRef)({
    onPositionChange,
    onDrag
  });
  handlers.current.onDrag = onDrag;
  handlers.current.onPositionChange = onPositionChange;
  let onMouseDragged = (e2) => {
    e2.preventDefault();
    let nextOffset = getNextOffset(e2);
    if (!dragging.current) {
      dragging.current = true;
      if (handlers.current.onDrag)
        handlers.current.onDrag(true);
      if (handlers.current.onPositionChange)
        handlers.current.onPositionChange(nextOffset);
    }
    if (prevPosition.current === nextOffset)
      return;
    prevPosition.current = nextOffset;
    if (onPositionChange)
      onPositionChange(nextOffset);
  };
  let onMouseUp = (e2) => {
    const target = e2.target;
    dragging.current = false;
    let nextOffset = getNextOffset(e2);
    if (handlers.current.onDrag)
      handlers.current.onDrag(false);
    if (handlers.current.onPositionChange)
      handlers.current.onPositionChange(nextOffset);
    $9cc09df9fd7676be$var$draggingElements.splice($9cc09df9fd7676be$var$draggingElements.indexOf(target), 1);
    window.removeEventListener("mouseup", onMouseUp, false);
    window.removeEventListener("mousemove", onMouseDragged, false);
  };
  let onMouseDown = (e2) => {
    const target = e2.currentTarget;
    if ($9cc09df9fd7676be$var$draggingElements.some((elt) => target.contains(elt)))
      return;
    $9cc09df9fd7676be$var$draggingElements.push(target);
    window.addEventListener("mousemove", onMouseDragged, false);
    window.addEventListener("mouseup", onMouseUp, false);
  };
  let onMouseEnter = () => {
    if (onHover)
      onHover(true);
  };
  let onMouseOut = () => {
    if (onHover)
      onHover(false);
  };
  let onKeyDown = (e2) => {
    switch (e2.key) {
      case "Left":
      case "ArrowLeft":
        if (orientation === "horizontal") {
          e2.preventDefault();
          if (onDecrement && !reverse)
            onDecrement();
          else if (onIncrement && reverse)
            onIncrement();
        }
        break;
      case "Up":
      case "ArrowUp":
        if (orientation === "vertical") {
          e2.preventDefault();
          if (onDecrement && !reverse)
            onDecrement();
          else if (onIncrement && reverse)
            onIncrement();
        }
        break;
      case "Right":
      case "ArrowRight":
        if (orientation === "horizontal") {
          e2.preventDefault();
          if (onIncrement && !reverse)
            onIncrement();
          else if (onDecrement && reverse)
            onDecrement();
        }
        break;
      case "Down":
      case "ArrowDown":
        if (orientation === "vertical") {
          e2.preventDefault();
          if (onIncrement && !reverse)
            onIncrement();
          else if (onDecrement && reverse)
            onDecrement();
        }
        break;
      case "Home":
        e2.preventDefault();
        if (onDecrementToMin)
          onDecrementToMin();
        break;
      case "End":
        e2.preventDefault();
        if (onIncrementToMax)
          onIncrementToMax();
        break;
      case "Enter":
        e2.preventDefault();
        if (onCollapseToggle)
          onCollapseToggle();
        break;
    }
  };
  return {
    onMouseDown,
    onMouseEnter,
    onMouseOut,
    onKeyDown
  };
}
var $03deb23ff14920c4$exports = {};
$parcel$export5($03deb23ff14920c4$exports, "useGlobalListeners", () => $03deb23ff14920c4$export$4eaf04e54aa8eed6);
function $03deb23ff14920c4$export$4eaf04e54aa8eed6() {
  let globalListeners = (0, import_react6.useRef)(/* @__PURE__ */ new Map());
  let addGlobalListener = (0, import_react6.useCallback)((eventTarget, type, listener, options) => {
    let fn = (options === null || options === void 0 ? void 0 : options.once) ? (...args) => {
      globalListeners.current.delete(listener);
      listener(...args);
    } : listener;
    globalListeners.current.set(listener, {
      type,
      eventTarget,
      fn,
      options
    });
    eventTarget.addEventListener(type, listener, options);
  }, []);
  let removeGlobalListener = (0, import_react6.useCallback)((eventTarget, type, listener, options) => {
    var ref;
    let fn = ((ref = globalListeners.current.get(listener)) === null || ref === void 0 ? void 0 : ref.fn) || listener;
    eventTarget.removeEventListener(type, fn, options);
    globalListeners.current.delete(listener);
  }, []);
  let removeAllGlobalListeners = (0, import_react6.useCallback)(() => {
    globalListeners.current.forEach((value, key) => {
      removeGlobalListener(value.eventTarget, value.type, key, value.options);
    });
  }, [
    removeGlobalListener
  ]);
  (0, import_react6.useEffect)(() => {
    return removeAllGlobalListeners;
  }, [
    removeAllGlobalListeners
  ]);
  return {
    addGlobalListener,
    removeGlobalListener,
    removeAllGlobalListeners
  };
}
var $313b98861ee5dd6c$exports = {};
$parcel$export5($313b98861ee5dd6c$exports, "useLabels", () => $313b98861ee5dd6c$export$d6875122194c7b44);
function $313b98861ee5dd6c$export$d6875122194c7b44(props, defaultLabel) {
  let { id, "aria-label": label, "aria-labelledby": labelledBy } = props;
  id = $bdb11010cef70236$export$f680877a34711e37(id);
  if (labelledBy && label) {
    let ids = /* @__PURE__ */ new Set([
      ...labelledBy.trim().split(/\s+/),
      id
    ]);
    labelledBy = [
      ...ids
    ].join(" ");
  } else if (labelledBy)
    labelledBy = labelledBy.trim().split(/\s+/).join(" ");
  if (!label && !labelledBy && defaultLabel)
    label = defaultLabel;
  return {
    id,
    "aria-label": label,
    "aria-labelledby": labelledBy
  };
}
var $df56164dff5785e2$exports = {};
$parcel$export5($df56164dff5785e2$exports, "useObjectRef", () => $df56164dff5785e2$export$4338b53315abf666);
function $df56164dff5785e2$export$4338b53315abf666(forwardedRef) {
  const objRef = (0, import_react6.useRef)();
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!forwardedRef)
      return;
    if (typeof forwardedRef === "function")
      forwardedRef(objRef.current);
    else
      forwardedRef.current = objRef.current;
  }, [
    forwardedRef
  ]);
  return objRef;
}
var $4f58c5f72bcf79f7$exports = {};
$parcel$export5($4f58c5f72bcf79f7$exports, "useUpdateEffect", () => $4f58c5f72bcf79f7$export$496315a1608d9602);
function $4f58c5f72bcf79f7$export$496315a1608d9602(effect, dependencies) {
  const isInitialMount = (0, import_react6.useRef)(true);
  (0, import_react6.useEffect)(() => {
    if (isInitialMount.current)
      isInitialMount.current = false;
    else
      effect();
  }, dependencies);
}
var $9daab02d461809db$exports = {};
$parcel$export5($9daab02d461809db$exports, "useResizeObserver", () => $9daab02d461809db$export$683480f191c0e3ea);
function $9daab02d461809db$var$hasResizeObserver() {
  return typeof window.ResizeObserver !== "undefined";
}
function $9daab02d461809db$export$683480f191c0e3ea(options) {
  const { ref, onResize } = options;
  (0, import_react6.useEffect)(() => {
    let element = ref === null || ref === void 0 ? void 0 : ref.current;
    if (!element)
      return;
    if (!$9daab02d461809db$var$hasResizeObserver()) {
      window.addEventListener("resize", onResize, false);
      return () => {
        window.removeEventListener("resize", onResize, false);
      };
    } else {
      const resizeObserverInstance = new window.ResizeObserver((entries) => {
        if (!entries.length)
          return;
        onResize();
      });
      resizeObserverInstance.observe(element);
      return () => {
        if (element)
          resizeObserverInstance.unobserve(element);
      };
    }
  }, [
    onResize,
    ref
  ]);
}
var $e7801be82b4b2a53$exports = {};
$parcel$export5($e7801be82b4b2a53$exports, "useSyncRef", () => $e7801be82b4b2a53$export$4debdb1a3f0fa79e);
function $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref) {
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (context && context.ref && ref) {
      context.ref.current = ref.current;
      return () => {
        context.ref.current = null;
      };
    }
  }, [
    context,
    ref
  ]);
}
var $62d8ded9296f3872$exports = {};
$parcel$export5($62d8ded9296f3872$exports, "getScrollParent", () => $62d8ded9296f3872$export$cfa2225e87938781);
function $62d8ded9296f3872$export$cfa2225e87938781(node) {
  while (node && !$62d8ded9296f3872$var$isScrollable(node))
    node = node.parentElement;
  return node || document.scrollingElement || document.documentElement;
}
function $62d8ded9296f3872$var$isScrollable(node) {
  let style = window.getComputedStyle(node);
  return /(auto|scroll)/.test(style.overflow + style.overflowX + style.overflowY);
}
var $5df64b3807dc15ee$exports = {};
$parcel$export5($5df64b3807dc15ee$exports, "useViewportSize", () => $5df64b3807dc15ee$export$d699905dd57c73ca);
var $5df64b3807dc15ee$var$visualViewport = typeof window !== "undefined" && window.visualViewport;
function $5df64b3807dc15ee$export$d699905dd57c73ca() {
  let [size1, setSize] = (0, import_react6.useState)(() => $5df64b3807dc15ee$var$getViewportSize());
  (0, import_react6.useEffect)(() => {
    let onResize = () => {
      setSize((size) => {
        let newSize = $5df64b3807dc15ee$var$getViewportSize();
        if (newSize.width === size.width && newSize.height === size.height)
          return size;
        return newSize;
      });
    };
    if (!$5df64b3807dc15ee$var$visualViewport)
      window.addEventListener("resize", onResize);
    else
      $5df64b3807dc15ee$var$visualViewport.addEventListener("resize", onResize);
    return () => {
      if (!$5df64b3807dc15ee$var$visualViewport)
        window.removeEventListener("resize", onResize);
      else
        $5df64b3807dc15ee$var$visualViewport.removeEventListener("resize", onResize);
    };
  }, []);
  return size1;
}
function $5df64b3807dc15ee$var$getViewportSize() {
  return {
    width: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.width) || window.innerWidth,
    height: ($5df64b3807dc15ee$var$visualViewport === null || $5df64b3807dc15ee$var$visualViewport === void 0 ? void 0 : $5df64b3807dc15ee$var$visualViewport.height) || window.innerHeight
  };
}
var $ef06256079686ba0$exports = {};
$parcel$export5($ef06256079686ba0$exports, "useDescription", () => $ef06256079686ba0$export$f8aeda7b10753fa1);
var $ef06256079686ba0$var$descriptionId = 0;
var $ef06256079686ba0$var$descriptionNodes = /* @__PURE__ */ new Map();
function $ef06256079686ba0$export$f8aeda7b10753fa1(description) {
  let [id1, setId] = (0, import_react6.useState)(null);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (!description)
      return;
    let desc = $ef06256079686ba0$var$descriptionNodes.get(description);
    if (!desc) {
      let id = `react-aria-description-${$ef06256079686ba0$var$descriptionId++}`;
      setId(id);
      let node = document.createElement("div");
      node.id = id;
      node.style.display = "none";
      node.textContent = description;
      document.body.appendChild(node);
      desc = {
        refCount: 0,
        element: node
      };
      $ef06256079686ba0$var$descriptionNodes.set(description, desc);
    } else
      setId(desc.element.id);
    desc.refCount++;
    return () => {
      if (--desc.refCount === 0) {
        desc.element.remove();
        $ef06256079686ba0$var$descriptionNodes.delete(description);
      }
    };
  }, [
    description
  ]);
  return {
    "aria-describedby": description ? id1 : void 0
  };
}
var $c87311424ea30a05$exports = {};
$parcel$export5($c87311424ea30a05$exports, "isMac", () => $c87311424ea30a05$export$9ac100e40613ea10);
$parcel$export5($c87311424ea30a05$exports, "isIPhone", () => $c87311424ea30a05$export$186c6964ca17d99);
$parcel$export5($c87311424ea30a05$exports, "isIPad", () => $c87311424ea30a05$export$7bef049ce92e4224);
$parcel$export5($c87311424ea30a05$exports, "isIOS", () => $c87311424ea30a05$export$fedb369cb70207f1);
$parcel$export5($c87311424ea30a05$exports, "isAppleDevice", () => $c87311424ea30a05$export$e1865c3bedcd822b);
$parcel$export5($c87311424ea30a05$exports, "isWebKit", () => $c87311424ea30a05$export$78551043582a6a98);
$parcel$export5($c87311424ea30a05$exports, "isChrome", () => $c87311424ea30a05$export$6446a186d09e379e);
$parcel$export5($c87311424ea30a05$exports, "isAndroid", () => $c87311424ea30a05$export$a11b0059900ceec8);
function $c87311424ea30a05$var$testUserAgent(re2) {
  var ref;
  if (typeof window === "undefined" || window.navigator == null)
    return false;
  return ((ref = window.navigator["userAgentData"]) === null || ref === void 0 ? void 0 : ref.brands.some((brand) => re2.test(brand.brand))) || re2.test(window.navigator.userAgent);
}
function $c87311424ea30a05$var$testPlatform(re2) {
  return typeof window !== "undefined" && window.navigator != null ? re2.test((window.navigator["userAgentData"] || window.navigator).platform) : false;
}
function $c87311424ea30a05$export$9ac100e40613ea10() {
  return $c87311424ea30a05$var$testPlatform(/^Mac/i);
}
function $c87311424ea30a05$export$186c6964ca17d99() {
  return $c87311424ea30a05$var$testPlatform(/^iPhone/i);
}
function $c87311424ea30a05$export$7bef049ce92e4224() {
  return $c87311424ea30a05$var$testPlatform(/^iPad/i) || $c87311424ea30a05$export$9ac100e40613ea10() && navigator.maxTouchPoints > 1;
}
function $c87311424ea30a05$export$fedb369cb70207f1() {
  return $c87311424ea30a05$export$186c6964ca17d99() || $c87311424ea30a05$export$7bef049ce92e4224();
}
function $c87311424ea30a05$export$e1865c3bedcd822b() {
  return $c87311424ea30a05$export$9ac100e40613ea10() || $c87311424ea30a05$export$fedb369cb70207f1();
}
function $c87311424ea30a05$export$78551043582a6a98() {
  return $c87311424ea30a05$var$testUserAgent(/AppleWebKit/i) && !$c87311424ea30a05$export$6446a186d09e379e();
}
function $c87311424ea30a05$export$6446a186d09e379e() {
  return $c87311424ea30a05$var$testUserAgent(/Chrome/i);
}
function $c87311424ea30a05$export$a11b0059900ceec8() {
  return $c87311424ea30a05$var$testUserAgent(/Android/i);
}
var $e9faafb641e167db$exports = {};
$parcel$export5($e9faafb641e167db$exports, "useEvent", () => $e9faafb641e167db$export$90fc3a17d93f704c);
function $e9faafb641e167db$export$90fc3a17d93f704c(ref, event, handler1, options) {
  let handlerRef = (0, import_react6.useRef)(handler1);
  handlerRef.current = handler1;
  let isDisabled = handler1 == null;
  (0, import_react6.useEffect)(() => {
    if (isDisabled)
      return;
    let element = ref.current;
    let handler = (e2) => handlerRef.current.call(this, e2);
    element.addEventListener(event, handler, options);
    return () => {
      element.removeEventListener(event, handler, options);
    };
  }, [
    ref,
    event,
    options,
    isDisabled
  ]);
}
var $1dbecbe27a04f9af$exports = {};
$parcel$export5($1dbecbe27a04f9af$exports, "useValueEffect", () => $1dbecbe27a04f9af$export$14d238f342723f25);
function $1dbecbe27a04f9af$export$14d238f342723f25(defaultValue) {
  let [value, setValue] = (0, import_react6.useState)(defaultValue);
  let valueRef = (0, import_react6.useRef)(value);
  let effect = (0, import_react6.useRef)(null);
  valueRef.current = value;
  let nextRef = (0, import_react6.useRef)(null);
  nextRef.current = () => {
    let newValue = effect.current.next();
    if (newValue.done) {
      effect.current = null;
      return;
    }
    if (value === newValue.value)
      nextRef.current();
    else
      setValue(newValue.value);
  };
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    if (effect.current)
      nextRef.current();
  });
  let queue = (0, import_react6.useCallback)((fn) => {
    effect.current = fn(valueRef.current);
    nextRef.current();
  }, [
    effect,
    nextRef
  ]);
  return [
    value,
    queue
  ];
}
var $2f04cbc44ee30ce0$exports = {};
$parcel$export5($2f04cbc44ee30ce0$exports, "scrollIntoView", () => $2f04cbc44ee30ce0$export$53a0910f038337bd);
function $2f04cbc44ee30ce0$export$53a0910f038337bd(scrollView, element) {
  let offsetX = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "left");
  let offsetY = $2f04cbc44ee30ce0$var$relativeOffset(scrollView, element, "top");
  let width = element.offsetWidth;
  let height = element.offsetHeight;
  let x2 = scrollView.scrollLeft;
  let y2 = scrollView.scrollTop;
  let maxX = x2 + scrollView.offsetWidth;
  let maxY = y2 + scrollView.offsetHeight;
  if (offsetX <= x2)
    x2 = offsetX;
  else if (offsetX + width > maxX)
    x2 += offsetX + width - maxX;
  if (offsetY <= y2)
    y2 = offsetY;
  else if (offsetY + height > maxY)
    y2 += offsetY + height - maxY;
  scrollView.scrollLeft = x2;
  scrollView.scrollTop = y2;
}
function $2f04cbc44ee30ce0$var$relativeOffset(ancestor, child, axis) {
  const prop = axis === "left" ? "offsetLeft" : "offsetTop";
  let sum = 0;
  while (child.offsetParent) {
    sum += child[prop];
    if (child.offsetParent === ancestor)
      break;
    else if (child.offsetParent.contains(ancestor)) {
      sum -= ancestor[prop];
      break;
    }
    child = child.offsetParent;
  }
  return sum;
}

// ../../ui/node_modules/@react-aria/interactions/dist/module.js
var import_react7 = __toESM(require_react());
function $parcel$export6(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $3b117e43dc0ca95d$exports = {};
$parcel$export6($3b117e43dc0ca95d$exports, "Pressable", () => $3b117e43dc0ca95d$export$27c701ed9e449e99);
var $f6c31cce2adf654f$exports = {};
$parcel$export6($f6c31cce2adf654f$exports, "usePress", () => $f6c31cce2adf654f$export$45712eceda6fad21);
var $14c0b72509d70225$var$state = "default";
var $14c0b72509d70225$var$savedUserSelect = "";
var $14c0b72509d70225$var$modifiedElementMap = /* @__PURE__ */ new WeakMap();
function $14c0b72509d70225$export$16a4697467175487(target) {
  if ($c87311424ea30a05$export$fedb369cb70207f1()) {
    if ($14c0b72509d70225$var$state === "default") {
      $14c0b72509d70225$var$savedUserSelect = document.documentElement.style.webkitUserSelect;
      document.documentElement.style.webkitUserSelect = "none";
    }
    $14c0b72509d70225$var$state = "disabled";
  } else if (target) {
    $14c0b72509d70225$var$modifiedElementMap.set(target, target.style.userSelect);
    target.style.userSelect = "none";
  }
}
function $14c0b72509d70225$export$b0d6fa1ab32e3295(target) {
  if ($c87311424ea30a05$export$fedb369cb70207f1()) {
    if ($14c0b72509d70225$var$state !== "disabled")
      return;
    $14c0b72509d70225$var$state = "restoring";
    setTimeout(() => {
      $bbed8b41f857bcc0$export$24490316f764c430(() => {
        if ($14c0b72509d70225$var$state === "restoring") {
          if (document.documentElement.style.webkitUserSelect === "none")
            document.documentElement.style.webkitUserSelect = $14c0b72509d70225$var$savedUserSelect || "";
          $14c0b72509d70225$var$savedUserSelect = "";
          $14c0b72509d70225$var$state = "default";
        }
      });
    }, 300);
  } else if (target && $14c0b72509d70225$var$modifiedElementMap.has(target)) {
    let targetOldUserSelect = $14c0b72509d70225$var$modifiedElementMap.get(target);
    if (target.style.userSelect === "none")
      target.style.userSelect = targetOldUserSelect;
    if (target.getAttribute("style") === "")
      target.removeAttribute("style");
    $14c0b72509d70225$var$modifiedElementMap.delete(target);
  }
}
function $8a9cb279dc87e130$export$60278871457622de(event) {
  if (event.mozInputSource === 0 && event.isTrusted)
    return true;
  return event.detail === 0 && !event.pointerType;
}
var $8a9cb279dc87e130$export$905e7fc544a71f36 = class {
  isDefaultPrevented() {
    return this.nativeEvent.defaultPrevented;
  }
  preventDefault() {
    this.defaultPrevented = true;
    this.nativeEvent.preventDefault();
  }
  stopPropagation() {
    this.nativeEvent.stopPropagation();
    this.isPropagationStopped = () => true;
  }
  isPropagationStopped() {
    return false;
  }
  persist() {
  }
  constructor(type, nativeEvent) {
    this.nativeEvent = nativeEvent;
    this.target = nativeEvent.target;
    this.currentTarget = nativeEvent.currentTarget;
    this.relatedTarget = nativeEvent.relatedTarget;
    this.bubbles = nativeEvent.bubbles;
    this.cancelable = nativeEvent.cancelable;
    this.defaultPrevented = nativeEvent.defaultPrevented;
    this.eventPhase = nativeEvent.eventPhase;
    this.isTrusted = nativeEvent.isTrusted;
    this.timeStamp = nativeEvent.timeStamp;
    this.type = type;
  }
};
function $8a9cb279dc87e130$export$715c682d09d639cc(onBlur) {
  let stateRef = (0, import_react7.useRef)({
    isFocused: false,
    onBlur,
    observer: null
  });
  let state1 = stateRef.current;
  state1.onBlur = onBlur;
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    return () => {
      if (state1.observer) {
        state1.observer.disconnect();
        state1.observer = null;
      }
    };
  }, [
    state1
  ]);
  return (e1) => {
    if (e1.target instanceof HTMLButtonElement || e1.target instanceof HTMLInputElement || e1.target instanceof HTMLTextAreaElement || e1.target instanceof HTMLSelectElement) {
      state1.isFocused = true;
      let target = e1.target;
      let onBlurHandler = (e2) => {
        var ref;
        let state = stateRef.current;
        state.isFocused = false;
        if (target.disabled)
          (ref = state.onBlur) === null || ref === void 0 ? void 0 : ref.call(state, new $8a9cb279dc87e130$export$905e7fc544a71f36("blur", e2));
        if (state.observer) {
          state.observer.disconnect();
          state.observer = null;
        }
      };
      target.addEventListener("focusout", onBlurHandler, {
        once: true
      });
      state1.observer = new MutationObserver(() => {
        if (state1.isFocused && target.disabled) {
          state1.observer.disconnect();
          target.dispatchEvent(new FocusEvent("blur"));
          target.dispatchEvent(new FocusEvent("focusout", {
            bubbles: true
          }));
        }
      });
      state1.observer.observe(target, {
        attributes: true,
        attributeFilter: [
          "disabled"
        ]
      });
    }
  };
}
var $ae1eeba8b9eafd08$export$5165eccb35aaadb5 = import_react7.default.createContext(null);
$ae1eeba8b9eafd08$export$5165eccb35aaadb5.displayName = "PressResponderContext";
function $f6c31cce2adf654f$var$usePressResponderContext(props) {
  let context = (0, import_react7.useContext)($ae1eeba8b9eafd08$export$5165eccb35aaadb5);
  if (context) {
    let { register, ...contextProps } = context;
    props = $3ef42575df84b30b$export$9d1611c77c2fe928(contextProps, props);
    register();
  }
  $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, props.ref);
  return props;
}
function $f6c31cce2adf654f$export$45712eceda6fad21(props) {
  let {
    onPress: onPress1,
    onPressChange: onPressChange1,
    onPressStart: onPressStart1,
    onPressEnd: onPressEnd1,
    onPressUp: onPressUp1,
    isDisabled: isDisabled1,
    isPressed: isPressedProp,
    preventFocusOnPress,
    shouldCancelOnPointerExit,
    allowTextSelectionOnPress,
    ref: _2,
    ...domProps
  } = $f6c31cce2adf654f$var$usePressResponderContext(props);
  let propsRef = (0, import_react7.useRef)(null);
  propsRef.current = {
    onPress: onPress1,
    onPressChange: onPressChange1,
    onPressStart: onPressStart1,
    onPressEnd: onPressEnd1,
    onPressUp: onPressUp1,
    isDisabled: isDisabled1,
    shouldCancelOnPointerExit
  };
  let [isPressed, setPressed] = (0, import_react7.useState)(false);
  let ref = (0, import_react7.useRef)({
    isPressed: false,
    ignoreEmulatedMouseEvents: false,
    ignoreClickAfterPress: false,
    didFirePressStart: false,
    activePointerId: null,
    target: null,
    isOverTarget: false,
    pointerType: null
  });
  let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let pressProps1 = (0, import_react7.useMemo)(() => {
    let state = ref.current;
    let triggerPressStart = (originalEvent, pointerType) => {
      let { onPressStart, onPressChange, isDisabled } = propsRef.current;
      if (isDisabled || state.didFirePressStart)
        return;
      if (onPressStart)
        onPressStart({
          type: "pressstart",
          pointerType,
          target: originalEvent.currentTarget,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      if (onPressChange)
        onPressChange(true);
      state.didFirePressStart = true;
      setPressed(true);
    };
    let triggerPressEnd = (originalEvent, pointerType, wasPressed = true) => {
      let { onPressEnd, onPressChange, onPress, isDisabled } = propsRef.current;
      if (!state.didFirePressStart)
        return;
      state.ignoreClickAfterPress = true;
      state.didFirePressStart = false;
      if (onPressEnd)
        onPressEnd({
          type: "pressend",
          pointerType,
          target: originalEvent.currentTarget,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      if (onPressChange)
        onPressChange(false);
      setPressed(false);
      if (onPress && wasPressed && !isDisabled)
        onPress({
          type: "press",
          pointerType,
          target: originalEvent.currentTarget,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
    };
    let triggerPressUp = (originalEvent, pointerType) => {
      let { onPressUp, isDisabled } = propsRef.current;
      if (isDisabled)
        return;
      if (onPressUp)
        onPressUp({
          type: "pressup",
          pointerType,
          target: originalEvent.currentTarget,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
    };
    let cancel = (e2) => {
      if (state.isPressed) {
        if (state.isOverTarget)
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e2), state.pointerType, false);
        state.isPressed = false;
        state.isOverTarget = false;
        state.activePointerId = null;
        state.pointerType = null;
        removeAllGlobalListeners();
        if (!allowTextSelectionOnPress)
          $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
      }
    };
    let pressProps = {
      onKeyDown(e2) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e2.nativeEvent) && e2.currentTarget.contains(e2.target)) {
          if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e2.target))
            e2.preventDefault();
          e2.stopPropagation();
          if (!state.isPressed && !e2.repeat) {
            state.target = e2.currentTarget;
            state.isPressed = true;
            triggerPressStart(e2, "keyboard");
            addGlobalListener(document, "keyup", onKeyUp, false);
          }
        }
      },
      onKeyUp(e2) {
        if ($f6c31cce2adf654f$var$isValidKeyboardEvent(e2.nativeEvent) && !e2.repeat && e2.currentTarget.contains(e2.target))
          triggerPressUp($f6c31cce2adf654f$var$createEvent(state.target, e2), "keyboard");
      },
      onClick(e2) {
        if (e2 && !e2.currentTarget.contains(e2.target))
          return;
        if (e2 && e2.button === 0) {
          e2.stopPropagation();
          if (isDisabled1)
            e2.preventDefault();
          if (!state.ignoreClickAfterPress && !state.ignoreEmulatedMouseEvents && (state.pointerType === "virtual" || $8a9cb279dc87e130$export$60278871457622de(e2.nativeEvent))) {
            if (!isDisabled1 && !preventFocusOnPress)
              $7215afc6de606d6b$export$de79e2c695e052f3(e2.currentTarget);
            triggerPressStart(e2, "virtual");
            triggerPressUp(e2, "virtual");
            triggerPressEnd(e2, "virtual");
          }
          state.ignoreEmulatedMouseEvents = false;
          state.ignoreClickAfterPress = false;
        }
      }
    };
    let onKeyUp = (e2) => {
      if (state.isPressed && $f6c31cce2adf654f$var$isValidKeyboardEvent(e2)) {
        if ($f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(e2.target))
          e2.preventDefault();
        e2.stopPropagation();
        state.isPressed = false;
        let target = e2.target;
        triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e2), "keyboard", state.target.contains(target));
        removeAllGlobalListeners();
        if (state.target.contains(target) && $f6c31cce2adf654f$var$isHTMLAnchorLink(state.target) || state.target.getAttribute("role") === "link")
          state.target.click();
      }
    };
    if (typeof PointerEvent !== "undefined") {
      pressProps.onPointerDown = (e2) => {
        if (e2.button !== 0 || !e2.currentTarget.contains(e2.target))
          return;
        if ($f6c31cce2adf654f$var$isVirtualPointerEvent(e2.nativeEvent)) {
          state.pointerType = "virtual";
          return;
        }
        if ($f6c31cce2adf654f$var$shouldPreventDefault(e2.currentTarget))
          e2.preventDefault();
        state.pointerType = e2.pointerType;
        e2.stopPropagation();
        if (!state.isPressed) {
          state.isPressed = true;
          state.isOverTarget = true;
          state.activePointerId = e2.pointerId;
          state.target = e2.currentTarget;
          if (!isDisabled1 && !preventFocusOnPress)
            $7215afc6de606d6b$export$de79e2c695e052f3(e2.currentTarget);
          if (!allowTextSelectionOnPress)
            $14c0b72509d70225$export$16a4697467175487(state.target);
          triggerPressStart(e2, state.pointerType);
          addGlobalListener(document, "pointermove", onPointerMove, false);
          addGlobalListener(document, "pointerup", onPointerUp, false);
          addGlobalListener(document, "pointercancel", onPointerCancel, false);
        }
      };
      pressProps.onMouseDown = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        if (e2.button === 0) {
          if ($f6c31cce2adf654f$var$shouldPreventDefault(e2.currentTarget))
            e2.preventDefault();
          e2.stopPropagation();
        }
      };
      pressProps.onPointerUp = (e2) => {
        if (!e2.currentTarget.contains(e2.target) || state.pointerType === "virtual")
          return;
        if (e2.button === 0 && $f6c31cce2adf654f$var$isOverTarget(e2, e2.currentTarget))
          triggerPressUp(e2, state.pointerType || e2.pointerType);
      };
      let onPointerMove = (e2) => {
        if (e2.pointerId !== state.activePointerId)
          return;
        if ($f6c31cce2adf654f$var$isOverTarget(e2, state.target)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart($f6c31cce2adf654f$var$createEvent(state.target, e2), state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e2), state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit)
            cancel(e2);
        }
      };
      let onPointerUp = (e2) => {
        if (e2.pointerId === state.activePointerId && state.isPressed && e2.button === 0) {
          if ($f6c31cce2adf654f$var$isOverTarget(e2, state.target))
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e2), state.pointerType);
          else if (state.isOverTarget)
            triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e2), state.pointerType, false);
          state.isPressed = false;
          state.isOverTarget = false;
          state.activePointerId = null;
          state.pointerType = null;
          removeAllGlobalListeners();
          if (!allowTextSelectionOnPress)
            $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
        }
      };
      let onPointerCancel = (e2) => {
        cancel(e2);
      };
      pressProps.onDragStart = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        cancel(e2);
      };
    } else {
      pressProps.onMouseDown = (e2) => {
        if (e2.button !== 0 || !e2.currentTarget.contains(e2.target))
          return;
        if ($f6c31cce2adf654f$var$shouldPreventDefault(e2.currentTarget))
          e2.preventDefault();
        e2.stopPropagation();
        if (state.ignoreEmulatedMouseEvents)
          return;
        state.isPressed = true;
        state.isOverTarget = true;
        state.target = e2.currentTarget;
        state.pointerType = $8a9cb279dc87e130$export$60278871457622de(e2.nativeEvent) ? "virtual" : "mouse";
        if (!isDisabled1 && !preventFocusOnPress)
          $7215afc6de606d6b$export$de79e2c695e052f3(e2.currentTarget);
        triggerPressStart(e2, state.pointerType);
        addGlobalListener(document, "mouseup", onMouseUp, false);
      };
      pressProps.onMouseEnter = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        e2.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = true;
          triggerPressStart(e2, state.pointerType);
        }
      };
      pressProps.onMouseLeave = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        e2.stopPropagation();
        if (state.isPressed && !state.ignoreEmulatedMouseEvents) {
          state.isOverTarget = false;
          triggerPressEnd(e2, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit)
            cancel(e2);
        }
      };
      pressProps.onMouseUp = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        if (!state.ignoreEmulatedMouseEvents && e2.button === 0)
          triggerPressUp(e2, state.pointerType);
      };
      let onMouseUp = (e2) => {
        if (e2.button !== 0)
          return;
        state.isPressed = false;
        removeAllGlobalListeners();
        if (state.ignoreEmulatedMouseEvents) {
          state.ignoreEmulatedMouseEvents = false;
          return;
        }
        if ($f6c31cce2adf654f$var$isOverTarget(e2, state.target))
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e2), state.pointerType);
        else if (state.isOverTarget)
          triggerPressEnd($f6c31cce2adf654f$var$createEvent(state.target, e2), state.pointerType, false);
        state.isOverTarget = false;
      };
      pressProps.onTouchStart = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        e2.stopPropagation();
        let touch = $f6c31cce2adf654f$var$getTouchFromEvent(e2.nativeEvent);
        if (!touch)
          return;
        state.activePointerId = touch.identifier;
        state.ignoreEmulatedMouseEvents = true;
        state.isOverTarget = true;
        state.isPressed = true;
        state.target = e2.currentTarget;
        state.pointerType = "touch";
        if (!isDisabled1 && !preventFocusOnPress)
          $7215afc6de606d6b$export$de79e2c695e052f3(e2.currentTarget);
        if (!allowTextSelectionOnPress)
          $14c0b72509d70225$export$16a4697467175487(state.target);
        triggerPressStart(e2, state.pointerType);
        addGlobalListener(window, "scroll", onScroll, true);
      };
      pressProps.onTouchMove = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        e2.stopPropagation();
        if (!state.isPressed)
          return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e2.nativeEvent, state.activePointerId);
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e2.currentTarget)) {
          if (!state.isOverTarget) {
            state.isOverTarget = true;
            triggerPressStart(e2, state.pointerType);
          }
        } else if (state.isOverTarget) {
          state.isOverTarget = false;
          triggerPressEnd(e2, state.pointerType, false);
          if (propsRef.current.shouldCancelOnPointerExit)
            cancel(e2);
        }
      };
      pressProps.onTouchEnd = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        e2.stopPropagation();
        if (!state.isPressed)
          return;
        let touch = $f6c31cce2adf654f$var$getTouchById(e2.nativeEvent, state.activePointerId);
        if (touch && $f6c31cce2adf654f$var$isOverTarget(touch, e2.currentTarget)) {
          triggerPressUp(e2, state.pointerType);
          triggerPressEnd(e2, state.pointerType);
        } else if (state.isOverTarget)
          triggerPressEnd(e2, state.pointerType, false);
        state.isPressed = false;
        state.activePointerId = null;
        state.isOverTarget = false;
        state.ignoreEmulatedMouseEvents = true;
        if (!allowTextSelectionOnPress)
          $14c0b72509d70225$export$b0d6fa1ab32e3295(state.target);
        removeAllGlobalListeners();
      };
      pressProps.onTouchCancel = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        e2.stopPropagation();
        if (state.isPressed)
          cancel(e2);
      };
      let onScroll = (e2) => {
        if (state.isPressed && e2.target.contains(state.target))
          cancel({
            currentTarget: state.target,
            shiftKey: false,
            ctrlKey: false,
            metaKey: false,
            altKey: false
          });
      };
      pressProps.onDragStart = (e2) => {
        if (!e2.currentTarget.contains(e2.target))
          return;
        cancel(e2);
      };
    }
    return pressProps;
  }, [
    addGlobalListener,
    isDisabled1,
    preventFocusOnPress,
    removeAllGlobalListeners,
    allowTextSelectionOnPress
  ]);
  (0, import_react7.useEffect)(() => {
    return () => {
      if (!allowTextSelectionOnPress)
        $14c0b72509d70225$export$b0d6fa1ab32e3295(ref.current.target);
    };
  }, [
    allowTextSelectionOnPress
  ]);
  return {
    isPressed: isPressedProp || isPressed,
    pressProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, pressProps1)
  };
}
function $f6c31cce2adf654f$var$isHTMLAnchorLink(target) {
  return target.tagName === "A" && target.hasAttribute("href");
}
function $f6c31cce2adf654f$var$isValidKeyboardEvent(event) {
  const { key, code, target } = event;
  const element = target;
  const { tagName, isContentEditable } = element;
  const role = element.getAttribute("role");
  return (key === "Enter" || key === " " || key === "Spacebar" || code === "Space") && tagName !== "INPUT" && tagName !== "TEXTAREA" && isContentEditable !== true && (!$f6c31cce2adf654f$var$isHTMLAnchorLink(element) || role === "button" && key !== "Enter") && !(role === "link" && key !== "Enter");
}
function $f6c31cce2adf654f$var$getTouchFromEvent(event) {
  const { targetTouches } = event;
  if (targetTouches.length > 0)
    return targetTouches[0];
  return null;
}
function $f6c31cce2adf654f$var$getTouchById(event, pointerId) {
  const changedTouches = event.changedTouches;
  for (let i2 = 0; i2 < changedTouches.length; i2++) {
    const touch = changedTouches[i2];
    if (touch.identifier === pointerId)
      return touch;
  }
  return null;
}
function $f6c31cce2adf654f$var$createEvent(target, e2) {
  return {
    currentTarget: target,
    shiftKey: e2.shiftKey,
    ctrlKey: e2.ctrlKey,
    metaKey: e2.metaKey,
    altKey: e2.altKey
  };
}
function $f6c31cce2adf654f$var$getPointClientRect(point) {
  let offsetX = point.width / 2 || point.radiusX || 0;
  let offsetY = point.height / 2 || point.radiusY || 0;
  return {
    top: point.clientY - offsetY,
    right: point.clientX + offsetX,
    bottom: point.clientY + offsetY,
    left: point.clientX - offsetX
  };
}
function $f6c31cce2adf654f$var$areRectanglesOverlapping(a2, b2) {
  if (a2.left > b2.right || b2.left > a2.right)
    return false;
  if (a2.top > b2.bottom || b2.top > a2.bottom)
    return false;
  return true;
}
function $f6c31cce2adf654f$var$isOverTarget(point, target) {
  let rect = target.getBoundingClientRect();
  let pointRect = $f6c31cce2adf654f$var$getPointClientRect(point);
  return $f6c31cce2adf654f$var$areRectanglesOverlapping(rect, pointRect);
}
function $f6c31cce2adf654f$var$shouldPreventDefault(target) {
  return !target.draggable;
}
function $f6c31cce2adf654f$var$shouldPreventDefaultKeyboard(target) {
  return !((target.tagName === "INPUT" || target.tagName === "BUTTON") && target.type === "submit");
}
function $f6c31cce2adf654f$var$isVirtualPointerEvent(event) {
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0;
}
var $3b117e43dc0ca95d$export$27c701ed9e449e99 = /* @__PURE__ */ import_react7.default.forwardRef(({ children, ...props }, ref) => {
  let newRef = (0, import_react7.useRef)();
  ref = ref !== null && ref !== void 0 ? ref : newRef;
  let { pressProps } = $f6c31cce2adf654f$export$45712eceda6fad21({
    ...props,
    ref
  });
  let child = import_react7.default.Children.only(children);
  return /* @__PURE__ */ import_react7.default.cloneElement(child, {
    ref,
    ...$3ef42575df84b30b$export$9d1611c77c2fe928(child.props, pressProps)
  });
});
var $f1ab8c75478c6f73$exports = {};
$parcel$export6($f1ab8c75478c6f73$exports, "PressResponder", () => $f1ab8c75478c6f73$export$3351871ee4b288b8);
var $f1ab8c75478c6f73$export$3351871ee4b288b8 = /* @__PURE__ */ import_react7.default.forwardRef(({ children, ...props }, ref) => {
  let isRegistered = (0, import_react7.useRef)(false);
  let prevContext = (0, import_react7.useContext)($ae1eeba8b9eafd08$export$5165eccb35aaadb5);
  let context = $3ef42575df84b30b$export$9d1611c77c2fe928(prevContext || {}, {
    ...props,
    ref: ref || (prevContext === null || prevContext === void 0 ? void 0 : prevContext.ref),
    register() {
      isRegistered.current = true;
      if (prevContext)
        prevContext.register();
    }
  });
  $e7801be82b4b2a53$export$4debdb1a3f0fa79e(prevContext, ref);
  (0, import_react7.useEffect)(() => {
    if (!isRegistered.current)
      console.warn("A PressResponder was rendered without a pressable child. Either call the usePress hook, or wrap your DOM node with <Pressable> component.");
  }, []);
  return /* @__PURE__ */ import_react7.default.createElement($ae1eeba8b9eafd08$export$5165eccb35aaadb5.Provider, {
    value: context
  }, children);
});
var $a1ea59d68270f0dd$exports = {};
$parcel$export6($a1ea59d68270f0dd$exports, "useFocus", () => $a1ea59d68270f0dd$export$f8168d8dd8fd66e6);
function $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props) {
  let onBlur;
  if (!props.isDisabled && (props.onBlur || props.onFocusChange))
    onBlur = (e2) => {
      if (e2.target === e2.currentTarget) {
        if (props.onBlur)
          props.onBlur(e2);
        if (props.onFocusChange)
          props.onFocusChange(false);
        return true;
      }
    };
  else
    onBlur = null;
  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  let onFocus;
  if (!props.isDisabled && (props.onFocus || props.onFocusChange || props.onBlur))
    onFocus = (e2) => {
      if (e2.target === e2.currentTarget) {
        if (props.onFocus)
          props.onFocus(e2);
        if (props.onFocusChange)
          props.onFocusChange(true);
        onSyntheticFocus(e2);
      }
    };
  return {
    focusProps: {
      onFocus,
      onBlur
    }
  };
}
var $507fabe10e71c6fb$exports = {};
$parcel$export6($507fabe10e71c6fb$exports, "isFocusVisible", () => $507fabe10e71c6fb$export$b9b3dfddab17db27);
$parcel$export6($507fabe10e71c6fb$exports, "getInteractionModality", () => $507fabe10e71c6fb$export$630ff653c5ada6a9);
$parcel$export6($507fabe10e71c6fb$exports, "setInteractionModality", () => $507fabe10e71c6fb$export$8397ddfc504fdb9a);
$parcel$export6($507fabe10e71c6fb$exports, "useInteractionModality", () => $507fabe10e71c6fb$export$98e20ec92f614cfe);
$parcel$export6($507fabe10e71c6fb$exports, "useFocusVisible", () => $507fabe10e71c6fb$export$ffd9e5021c1fb2d6);
$parcel$export6($507fabe10e71c6fb$exports, "useFocusVisibleListener", () => $507fabe10e71c6fb$export$ec71b4b83ac08ec3);
var $507fabe10e71c6fb$var$currentModality = null;
var $507fabe10e71c6fb$var$changeHandlers = /* @__PURE__ */ new Set();
var $507fabe10e71c6fb$var$hasSetupGlobalListeners = false;
var $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
var $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
var $507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS = {
  Tab: true,
  Escape: true
};
function $507fabe10e71c6fb$var$triggerChangeHandlers(modality, e2) {
  for (let handler of $507fabe10e71c6fb$var$changeHandlers)
    handler(modality, e2);
}
function $507fabe10e71c6fb$var$isValidKey(e2) {
  return !(e2.metaKey || !$c87311424ea30a05$export$9ac100e40613ea10() && e2.altKey || e2.ctrlKey || e2.key === "Control" || e2.key === "Shift" || e2.key === "Meta");
}
function $507fabe10e71c6fb$var$handleKeyboardEvent(e2) {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
  if ($507fabe10e71c6fb$var$isValidKey(e2)) {
    $507fabe10e71c6fb$var$currentModality = "keyboard";
    $507fabe10e71c6fb$var$triggerChangeHandlers("keyboard", e2);
  }
}
function $507fabe10e71c6fb$var$handlePointerEvent(e2) {
  $507fabe10e71c6fb$var$currentModality = "pointer";
  if (e2.type === "mousedown" || e2.type === "pointerdown") {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$triggerChangeHandlers("pointer", e2);
  }
}
function $507fabe10e71c6fb$var$handleClickEvent(e2) {
  if ($8a9cb279dc87e130$export$60278871457622de(e2)) {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    $507fabe10e71c6fb$var$currentModality = "virtual";
  }
}
function $507fabe10e71c6fb$var$handleFocusEvent(e2) {
  if (e2.target === window || e2.target === document)
    return;
  if (!$507fabe10e71c6fb$var$hasEventBeforeFocus && !$507fabe10e71c6fb$var$hasBlurredWindowRecently) {
    $507fabe10e71c6fb$var$currentModality = "virtual";
    $507fabe10e71c6fb$var$triggerChangeHandlers("virtual", e2);
  }
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = false;
}
function $507fabe10e71c6fb$var$handleWindowBlur() {
  $507fabe10e71c6fb$var$hasEventBeforeFocus = false;
  $507fabe10e71c6fb$var$hasBlurredWindowRecently = true;
}
function $507fabe10e71c6fb$var$setupGlobalFocusEvents() {
  if (typeof window === "undefined" || $507fabe10e71c6fb$var$hasSetupGlobalListeners)
    return;
  let focus = HTMLElement.prototype.focus;
  HTMLElement.prototype.focus = function() {
    $507fabe10e71c6fb$var$hasEventBeforeFocus = true;
    focus.apply(this, arguments);
  };
  document.addEventListener("keydown", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("keyup", $507fabe10e71c6fb$var$handleKeyboardEvent, true);
  document.addEventListener("click", $507fabe10e71c6fb$var$handleClickEvent, true);
  window.addEventListener("focus", $507fabe10e71c6fb$var$handleFocusEvent, true);
  window.addEventListener("blur", $507fabe10e71c6fb$var$handleWindowBlur, false);
  if (typeof PointerEvent !== "undefined") {
    document.addEventListener("pointerdown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointermove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("pointerup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  } else {
    document.addEventListener("mousedown", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mousemove", $507fabe10e71c6fb$var$handlePointerEvent, true);
    document.addEventListener("mouseup", $507fabe10e71c6fb$var$handlePointerEvent, true);
  }
  $507fabe10e71c6fb$var$hasSetupGlobalListeners = true;
}
if (typeof document !== "undefined") {
  if (document.readyState !== "loading")
    $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  else
    document.addEventListener("DOMContentLoaded", $507fabe10e71c6fb$var$setupGlobalFocusEvents);
}
function $507fabe10e71c6fb$export$b9b3dfddab17db27() {
  return $507fabe10e71c6fb$var$currentModality !== "pointer";
}
function $507fabe10e71c6fb$export$630ff653c5ada6a9() {
  return $507fabe10e71c6fb$var$currentModality;
}
function $507fabe10e71c6fb$export$8397ddfc504fdb9a(modality) {
  $507fabe10e71c6fb$var$currentModality = modality;
  $507fabe10e71c6fb$var$triggerChangeHandlers(modality, null);
}
function $507fabe10e71c6fb$export$98e20ec92f614cfe() {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  let [modality, setModality] = (0, import_react7.useState)($507fabe10e71c6fb$var$currentModality);
  (0, import_react7.useEffect)(() => {
    let handler = () => {
      setModality($507fabe10e71c6fb$var$currentModality);
    };
    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, []);
  return modality;
}
function $507fabe10e71c6fb$var$isKeyboardFocusEvent(isTextInput, modality, e2) {
  return !(isTextInput && modality === "keyboard" && e2 instanceof KeyboardEvent && !$507fabe10e71c6fb$var$FOCUS_VISIBLE_INPUT_KEYS[e2.key]);
}
function $507fabe10e71c6fb$export$ffd9e5021c1fb2d6(props = {}) {
  let { isTextInput, autoFocus } = props;
  let [isFocusVisibleState, setFocusVisible] = (0, import_react7.useState)(autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27());
  $507fabe10e71c6fb$export$ec71b4b83ac08ec3(($507fabe10e71c6fb$export$b9b3dfddab17db272) => {
    setFocusVisible($507fabe10e71c6fb$export$b9b3dfddab17db272);
  }, [
    isTextInput
  ], {
    isTextInput
  });
  return {
    isFocusVisible: isFocusVisibleState
  };
}
function $507fabe10e71c6fb$export$ec71b4b83ac08ec3(fn, deps, opts) {
  $507fabe10e71c6fb$var$setupGlobalFocusEvents();
  (0, import_react7.useEffect)(() => {
    let handler = (modality, e2) => {
      if (!$507fabe10e71c6fb$var$isKeyboardFocusEvent(opts === null || opts === void 0 ? void 0 : opts.isTextInput, modality, e2))
        return;
      fn($507fabe10e71c6fb$export$b9b3dfddab17db27());
    };
    $507fabe10e71c6fb$var$changeHandlers.add(handler);
    return () => {
      $507fabe10e71c6fb$var$changeHandlers.delete(handler);
    };
  }, deps);
}
var $9ab94262bd0047c7$exports = {};
$parcel$export6($9ab94262bd0047c7$exports, "useFocusWithin", () => $9ab94262bd0047c7$export$420e68273165f4ec);
function $9ab94262bd0047c7$export$420e68273165f4ec(props) {
  let state = (0, import_react7.useRef)({
    isFocusWithin: false
  }).current;
  let onBlur = props.isDisabled ? null : (e2) => {
    if (state.isFocusWithin && !e2.currentTarget.contains(e2.relatedTarget)) {
      state.isFocusWithin = false;
      if (props.onBlurWithin)
        props.onBlurWithin(e2);
      if (props.onFocusWithinChange)
        props.onFocusWithinChange(false);
    }
  };
  let onSyntheticFocus = $8a9cb279dc87e130$export$715c682d09d639cc(onBlur);
  let onFocus = props.isDisabled ? null : (e2) => {
    if (!state.isFocusWithin) {
      if (props.onFocusWithin)
        props.onFocusWithin(e2);
      if (props.onFocusWithinChange)
        props.onFocusWithinChange(true);
      state.isFocusWithin = true;
      onSyntheticFocus(e2);
    }
  };
  return {
    focusWithinProps: {
      onFocus,
      onBlur
    }
  };
}
var $6179b936705e76d3$exports = {};
$parcel$export6($6179b936705e76d3$exports, "useHover", () => $6179b936705e76d3$export$ae780daf29e6d456);
var $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
var $6179b936705e76d3$var$hoverCount = 0;
function $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents() {
  $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = true;
  setTimeout(() => {
    $6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents = false;
  }, 50);
}
function $6179b936705e76d3$var$handleGlobalPointerEvent(e2) {
  if (e2.pointerType === "touch")
    $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents();
}
function $6179b936705e76d3$var$setupGlobalTouchEvents() {
  if (typeof document === "undefined")
    return;
  if (typeof PointerEvent !== "undefined")
    document.addEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
  else
    document.addEventListener("touchend", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  $6179b936705e76d3$var$hoverCount++;
  return () => {
    $6179b936705e76d3$var$hoverCount--;
    if ($6179b936705e76d3$var$hoverCount > 0)
      return;
    if (typeof PointerEvent !== "undefined")
      document.removeEventListener("pointerup", $6179b936705e76d3$var$handleGlobalPointerEvent);
    else
      document.removeEventListener("touchend", $6179b936705e76d3$var$setGlobalIgnoreEmulatedMouseEvents);
  };
}
function $6179b936705e76d3$export$ae780daf29e6d456(props) {
  let { onHoverStart, onHoverChange, onHoverEnd, isDisabled } = props;
  let [isHovered, setHovered] = (0, import_react7.useState)(false);
  let state = (0, import_react7.useRef)({
    isHovered: false,
    ignoreEmulatedMouseEvents: false,
    pointerType: "",
    target: null
  }).current;
  (0, import_react7.useEffect)($6179b936705e76d3$var$setupGlobalTouchEvents, []);
  let { hoverProps: hoverProps1, triggerHoverEnd: triggerHoverEnd1 } = (0, import_react7.useMemo)(() => {
    let triggerHoverStart = (event, pointerType) => {
      state.pointerType = pointerType;
      if (isDisabled || pointerType === "touch" || state.isHovered || !event.currentTarget.contains(event.target))
        return;
      state.isHovered = true;
      let target = event.currentTarget;
      state.target = target;
      if (onHoverStart)
        onHoverStart({
          type: "hoverstart",
          target,
          pointerType
        });
      if (onHoverChange)
        onHoverChange(true);
      setHovered(true);
    };
    let triggerHoverEnd = (event, pointerType) => {
      state.pointerType = "";
      state.target = null;
      if (pointerType === "touch" || !state.isHovered)
        return;
      state.isHovered = false;
      let target = event.currentTarget;
      if (onHoverEnd)
        onHoverEnd({
          type: "hoverend",
          target,
          pointerType
        });
      if (onHoverChange)
        onHoverChange(false);
      setHovered(false);
    };
    let hoverProps = {};
    if (typeof PointerEvent !== "undefined") {
      hoverProps.onPointerEnter = (e2) => {
        if ($6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents && e2.pointerType === "mouse")
          return;
        triggerHoverStart(e2, e2.pointerType);
      };
      hoverProps.onPointerLeave = (e2) => {
        if (!isDisabled && e2.currentTarget.contains(e2.target))
          triggerHoverEnd(e2, e2.pointerType);
      };
    } else {
      hoverProps.onTouchStart = () => {
        state.ignoreEmulatedMouseEvents = true;
      };
      hoverProps.onMouseEnter = (e2) => {
        if (!state.ignoreEmulatedMouseEvents && !$6179b936705e76d3$var$globalIgnoreEmulatedMouseEvents)
          triggerHoverStart(e2, "mouse");
        state.ignoreEmulatedMouseEvents = false;
      };
      hoverProps.onMouseLeave = (e2) => {
        if (!isDisabled && e2.currentTarget.contains(e2.target))
          triggerHoverEnd(e2, "mouse");
      };
    }
    return {
      hoverProps,
      triggerHoverEnd
    };
  }, [
    onHoverStart,
    onHoverChange,
    onHoverEnd,
    isDisabled,
    state
  ]);
  (0, import_react7.useEffect)(() => {
    if (isDisabled)
      triggerHoverEnd1({
        currentTarget: state.target
      }, state.pointerType);
  }, [
    isDisabled
  ]);
  return {
    hoverProps: hoverProps1,
    isHovered
  };
}
var $e0b6e0b68ec7f50f$exports = {};
$parcel$export6($e0b6e0b68ec7f50f$exports, "useInteractOutside", () => $e0b6e0b68ec7f50f$export$872b660ac5a1ff98);
function $e0b6e0b68ec7f50f$export$872b660ac5a1ff98(props) {
  let { ref, onInteractOutside, isDisabled, onInteractOutsideStart } = props;
  let stateRef = (0, import_react7.useRef)({
    isPointerDown: false,
    ignoreEmulatedMouseEvents: false,
    onInteractOutside,
    onInteractOutsideStart
  });
  let state = stateRef.current;
  state.onInteractOutside = onInteractOutside;
  state.onInteractOutsideStart = onInteractOutsideStart;
  (0, import_react7.useEffect)(() => {
    if (isDisabled)
      return;
    let onPointerDown = (e2) => {
      if ($e0b6e0b68ec7f50f$var$isValidEvent(e2, ref) && state.onInteractOutside) {
        if (state.onInteractOutsideStart)
          state.onInteractOutsideStart(e2);
        state.isPointerDown = true;
      }
    };
    if (typeof PointerEvent !== "undefined") {
      let onPointerUp = (e2) => {
        if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e2, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e2);
        }
      };
      document.addEventListener("pointerdown", onPointerDown, true);
      document.addEventListener("pointerup", onPointerUp, true);
      return () => {
        document.removeEventListener("pointerdown", onPointerDown, true);
        document.removeEventListener("pointerup", onPointerUp, true);
      };
    } else {
      let onMouseUp = (e2) => {
        if (state.ignoreEmulatedMouseEvents)
          state.ignoreEmulatedMouseEvents = false;
        else if (state.isPointerDown && state.onInteractOutside && $e0b6e0b68ec7f50f$var$isValidEvent(e2, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e2);
        }
      };
      let onTouchEnd = (e2) => {
        state.ignoreEmulatedMouseEvents = true;
        if (state.onInteractOutside && state.isPointerDown && $e0b6e0b68ec7f50f$var$isValidEvent(e2, ref)) {
          state.isPointerDown = false;
          state.onInteractOutside(e2);
        }
      };
      document.addEventListener("mousedown", onPointerDown, true);
      document.addEventListener("mouseup", onMouseUp, true);
      document.addEventListener("touchstart", onPointerDown, true);
      document.addEventListener("touchend", onTouchEnd, true);
      return () => {
        document.removeEventListener("mousedown", onPointerDown, true);
        document.removeEventListener("mouseup", onMouseUp, true);
        document.removeEventListener("touchstart", onPointerDown, true);
        document.removeEventListener("touchend", onTouchEnd, true);
      };
    }
  }, [
    ref,
    state,
    isDisabled
  ]);
}
function $e0b6e0b68ec7f50f$var$isValidEvent(event, ref) {
  if (event.button > 0)
    return false;
  if (event.target) {
    const ownerDocument = event.target.ownerDocument;
    if (!ownerDocument || !ownerDocument.documentElement.contains(event.target))
      return false;
  }
  return ref.current && !ref.current.contains(event.target);
}
var $46d819fcbaf35654$exports = {};
$parcel$export6($46d819fcbaf35654$exports, "useKeyboard", () => $46d819fcbaf35654$export$8f71654801c2f7cd);
function $93925083ecbb358c$export$48d1ea6320830260(handler) {
  if (!handler)
    return;
  let shouldStopPropagation = true;
  return (e2) => {
    let event = {
      ...e2,
      preventDefault() {
        e2.preventDefault();
      },
      isDefaultPrevented() {
        return e2.isDefaultPrevented();
      },
      stopPropagation() {
        console.error("stopPropagation is now the default behavior for events in React Spectrum. You can use continuePropagation() to revert this behavior.");
      },
      continuePropagation() {
        shouldStopPropagation = false;
      }
    };
    handler(event);
    if (shouldStopPropagation)
      e2.stopPropagation();
  };
}
function $46d819fcbaf35654$export$8f71654801c2f7cd(props) {
  return {
    keyboardProps: props.isDisabled ? {} : {
      onKeyDown: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyDown),
      onKeyUp: $93925083ecbb358c$export$48d1ea6320830260(props.onKeyUp)
    }
  };
}
var $e8a7022cf87cba2a$exports = {};
$parcel$export6($e8a7022cf87cba2a$exports, "useMove", () => $e8a7022cf87cba2a$export$36da96379f79f245);
function $e8a7022cf87cba2a$export$36da96379f79f245(props) {
  let { onMoveStart, onMove, onMoveEnd } = props;
  let state = (0, import_react7.useRef)({
    didMove: false,
    lastPosition: null,
    id: null
  });
  let { addGlobalListener, removeGlobalListener } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let moveProps1 = (0, import_react7.useMemo)(() => {
    let moveProps = {};
    let start = () => {
      $14c0b72509d70225$export$16a4697467175487();
      state.current.didMove = false;
    };
    let move = (originalEvent, pointerType, deltaX, deltaY) => {
      if (deltaX === 0 && deltaY === 0)
        return;
      if (!state.current.didMove) {
        state.current.didMove = true;
        onMoveStart === null || onMoveStart === void 0 ? void 0 : onMoveStart({
          type: "movestart",
          pointerType,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
      }
      onMove({
        type: "move",
        pointerType,
        deltaX,
        deltaY,
        shiftKey: originalEvent.shiftKey,
        metaKey: originalEvent.metaKey,
        ctrlKey: originalEvent.ctrlKey,
        altKey: originalEvent.altKey
      });
    };
    let end = (originalEvent, pointerType) => {
      $14c0b72509d70225$export$b0d6fa1ab32e3295();
      if (state.current.didMove)
        onMoveEnd === null || onMoveEnd === void 0 ? void 0 : onMoveEnd({
          type: "moveend",
          pointerType,
          shiftKey: originalEvent.shiftKey,
          metaKey: originalEvent.metaKey,
          ctrlKey: originalEvent.ctrlKey,
          altKey: originalEvent.altKey
        });
    };
    if (typeof PointerEvent === "undefined") {
      let onMouseMove = (e2) => {
        if (e2.button === 0) {
          move(e2, "mouse", e2.pageX - state.current.lastPosition.pageX, e2.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e2.pageX,
            pageY: e2.pageY
          };
        }
      };
      let onMouseUp = (e2) => {
        if (e2.button === 0) {
          end(e2, "mouse");
          removeGlobalListener(window, "mousemove", onMouseMove, false);
          removeGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      moveProps.onMouseDown = (e2) => {
        if (e2.button === 0) {
          start();
          e2.stopPropagation();
          e2.preventDefault();
          state.current.lastPosition = {
            pageX: e2.pageX,
            pageY: e2.pageY
          };
          addGlobalListener(window, "mousemove", onMouseMove, false);
          addGlobalListener(window, "mouseup", onMouseUp, false);
        }
      };
      let onTouchMove = (e2) => {
        let touch = [
          ...e2.changedTouches
        ].findIndex(({ identifier }) => identifier === state.current.id);
        if (touch >= 0) {
          let { pageX, pageY } = e2.changedTouches[touch];
          move(e2, "touch", pageX - state.current.lastPosition.pageX, pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX,
            pageY
          };
        }
      };
      let onTouchEnd = (e2) => {
        let touch = [
          ...e2.changedTouches
        ].findIndex(({ identifier }) => identifier === state.current.id);
        if (touch >= 0) {
          end(e2, "touch");
          state.current.id = null;
          removeGlobalListener(window, "touchmove", onTouchMove);
          removeGlobalListener(window, "touchend", onTouchEnd);
          removeGlobalListener(window, "touchcancel", onTouchEnd);
        }
      };
      moveProps.onTouchStart = (e2) => {
        if (e2.changedTouches.length === 0 || state.current.id != null)
          return;
        let { pageX, pageY, identifier } = e2.changedTouches[0];
        start();
        e2.stopPropagation();
        e2.preventDefault();
        state.current.lastPosition = {
          pageX,
          pageY
        };
        state.current.id = identifier;
        addGlobalListener(window, "touchmove", onTouchMove, false);
        addGlobalListener(window, "touchend", onTouchEnd, false);
        addGlobalListener(window, "touchcancel", onTouchEnd, false);
      };
    } else {
      let onPointerMove = (e2) => {
        if (e2.pointerId === state.current.id) {
          let pointerType = e2.pointerType || "mouse";
          move(e2, pointerType, e2.pageX - state.current.lastPosition.pageX, e2.pageY - state.current.lastPosition.pageY);
          state.current.lastPosition = {
            pageX: e2.pageX,
            pageY: e2.pageY
          };
        }
      };
      let onPointerUp = (e2) => {
        if (e2.pointerId === state.current.id) {
          let pointerType = e2.pointerType || "mouse";
          end(e2, pointerType);
          state.current.id = null;
          removeGlobalListener(window, "pointermove", onPointerMove, false);
          removeGlobalListener(window, "pointerup", onPointerUp, false);
          removeGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
      moveProps.onPointerDown = (e2) => {
        if (e2.button === 0 && state.current.id == null) {
          start();
          e2.stopPropagation();
          e2.preventDefault();
          state.current.lastPosition = {
            pageX: e2.pageX,
            pageY: e2.pageY
          };
          state.current.id = e2.pointerId;
          addGlobalListener(window, "pointermove", onPointerMove, false);
          addGlobalListener(window, "pointerup", onPointerUp, false);
          addGlobalListener(window, "pointercancel", onPointerUp, false);
        }
      };
    }
    let triggerKeyboardMove = (e2, deltaX, deltaY) => {
      start();
      move(e2, "keyboard", deltaX, deltaY);
      end(e2, "keyboard");
    };
    moveProps.onKeyDown = (e2) => {
      switch (e2.key) {
        case "Left":
        case "ArrowLeft":
          e2.preventDefault();
          e2.stopPropagation();
          triggerKeyboardMove(e2, -1, 0);
          break;
        case "Right":
        case "ArrowRight":
          e2.preventDefault();
          e2.stopPropagation();
          triggerKeyboardMove(e2, 1, 0);
          break;
        case "Up":
        case "ArrowUp":
          e2.preventDefault();
          e2.stopPropagation();
          triggerKeyboardMove(e2, 0, -1);
          break;
        case "Down":
        case "ArrowDown":
          e2.preventDefault();
          e2.stopPropagation();
          triggerKeyboardMove(e2, 0, 1);
          break;
      }
    };
    return moveProps;
  }, [
    state,
    onMoveStart,
    onMove,
    onMoveEnd,
    addGlobalListener,
    removeGlobalListener
  ]);
  return {
    moveProps: moveProps1
  };
}
var $7d0a636d7a4dcefd$exports = {};
$parcel$export6($7d0a636d7a4dcefd$exports, "useScrollWheel", () => $7d0a636d7a4dcefd$export$2123ff2b87c81ca);
function $7d0a636d7a4dcefd$export$2123ff2b87c81ca(props, ref) {
  let { onScroll, isDisabled } = props;
  let onScrollHandler = (0, import_react7.useCallback)((e2) => {
    if (e2.ctrlKey)
      return;
    e2.preventDefault();
    e2.stopPropagation();
    if (onScroll)
      onScroll({
        deltaX: e2.deltaX,
        deltaY: e2.deltaY
      });
  }, [
    onScroll
  ]);
  $e9faafb641e167db$export$90fc3a17d93f704c(ref, "wheel", isDisabled ? null : onScrollHandler);
}
var $8a26561d2877236e$exports = {};
$parcel$export6($8a26561d2877236e$exports, "useLongPress", () => $8a26561d2877236e$export$c24ed0104d07eab9);
var $8a26561d2877236e$var$DEFAULT_THRESHOLD = 500;
function $8a26561d2877236e$export$c24ed0104d07eab9(props) {
  let { isDisabled, onLongPressStart, onLongPressEnd, onLongPress, threshold = $8a26561d2877236e$var$DEFAULT_THRESHOLD, accessibilityDescription } = props;
  const timeRef = (0, import_react7.useRef)(null);
  let { addGlobalListener, removeGlobalListener } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  let { pressProps } = $f6c31cce2adf654f$export$45712eceda6fad21({
    isDisabled,
    onPressStart(e1) {
      if (e1.pointerType === "mouse" || e1.pointerType === "touch") {
        if (onLongPressStart)
          onLongPressStart({
            ...e1,
            type: "longpressstart"
          });
        timeRef.current = setTimeout(() => {
          e1.target.dispatchEvent(new PointerEvent("pointercancel", {
            bubbles: true
          }));
          if (onLongPress)
            onLongPress({
              ...e1,
              type: "longpress"
            });
          timeRef.current = null;
        }, threshold);
        if (e1.pointerType === "touch") {
          let onContextMenu = (e2) => {
            e2.preventDefault();
          };
          addGlobalListener(e1.target, "contextmenu", onContextMenu, {
            once: true
          });
          addGlobalListener(window, "pointerup", () => {
            setTimeout(() => {
              removeGlobalListener(e1.target, "contextmenu", onContextMenu);
            }, 30);
          }, {
            once: true
          });
        }
      }
    },
    onPressEnd(e2) {
      if (timeRef.current)
        clearTimeout(timeRef.current);
      if (onLongPressEnd && (e2.pointerType === "mouse" || e2.pointerType === "touch"))
        onLongPressEnd({
          ...e2,
          type: "longpressend"
        });
    }
  });
  let descriptionProps = $ef06256079686ba0$export$f8aeda7b10753fa1(onLongPress && !isDisabled ? accessibilityDescription : null);
  return {
    longPressProps: $3ef42575df84b30b$export$9d1611c77c2fe928(pressProps, descriptionProps)
  };
}

// ../../ui/dist/ui.es.js
var import_chroma_js = __toESM(require_chroma());
var import_react_walk_element_tree = __toESM(require_lib2());

// ../../ui/node_modules/react-laag/dist/react-laag.esm.js
init_react();
var import_react8 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// ../../ui/node_modules/tiny-warning/dist/tiny-warning.esm.js
init_react();
var isProduction = false;
function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }
    var text = "Warning: " + message;
    if (typeof console !== "undefined") {
      console.warn(text);
    }
    try {
      throw Error(text);
    } catch (x2) {
    }
  }
}
var tiny_warning_esm_default = warning;

// ../../ui/node_modules/react-laag/dist/react-laag.esm.js
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf3(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
function _createForOfIteratorHelperLoose(o2, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o2[Symbol.iterator] || o2["@@iterator"];
  if (it)
    return (it = it.call(o2)).next.bind(it);
  if (Array.isArray(o2) || (it = _unsupportedIterableToArray(o2)) || allowArrayLike && o2 && typeof o2.length === "number") {
    if (it)
      o2 = it;
    var i2 = 0;
    return function() {
      if (i2 >= o2.length)
        return {
          done: true
        };
      return {
        done: false,
        value: o2[i2++]
      };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function useTrackRef(onRefChange) {
  var storedReference = (0, import_react8.useRef)(null);
  function setter(element) {
    if (!element || element === storedReference.current) {
      return;
    }
    storedReference.current = element;
    onRefChange(element);
  }
  return setter;
}
function useMutableStore(initialState) {
  var state = (0, import_react8.useRef)(initialState);
  return (0, import_react8.useMemo)(function() {
    function set(setter) {
      if (typeof setter === "function") {
        state.current = setter(state.current);
      } else {
        state.current = setter;
      }
    }
    function get() {
      return state.current;
    }
    return [get, set];
  }, []);
}
function useEventSubscriptions() {
  var subscriptions = (0, import_react8.useRef)([]);
  return (0, import_react8.useMemo)(function() {
    function hasEventSubscriptions() {
      return subscriptions.current.length > 0;
    }
    function removeAllEventSubscriptions() {
      for (var _iterator = _createForOfIteratorHelperLoose(subscriptions.current), _step; !(_step = _iterator()).done; ) {
        var unsubscribe = _step.value;
        unsubscribe();
      }
      subscriptions.current = [];
    }
    function addEventSubscription(unsubscriber) {
      subscriptions.current.push(unsubscriber);
    }
    return {
      hasEventSubscriptions,
      removeAllEventSubscriptions,
      addEventSubscription
    };
  }, []);
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? import_react8.useLayoutEffect : import_react8.useEffect;
function useLastState(currentState, enabled) {
  var lastState = (0, import_react8.useRef)(currentState);
  if (!enabled) {
    lastState.current = null;
    return lastState;
  }
  lastState.current = currentState;
  return lastState;
}
function getPixelValue(value) {
  return parseFloat(value.replace("px", ""));
}
function limit(value, min, max) {
  return value < min ? min : value > max ? max : value;
}
function isSet(value) {
  return value === null || value === void 0 ? false : true;
}
function mergeRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return function(element) {
    for (var _iterator = _createForOfIteratorHelperLoose(refs), _step; !(_step = _iterator()).done; ) {
      var ref = _step.value;
      if (!ref) {
        continue;
      }
      if (typeof ref === "function") {
        ref(element);
      } else {
        ref.current = element;
      }
    }
  };
}
function getResizeObserver(environment, polyfill) {
  if (typeof environment === "undefined") {
    return void 0;
  }
  return polyfill || environment.ResizeObserver;
}
function findScrollContainers(element, environment) {
  var result = [];
  if (!element || !environment || element === document.body) {
    return result;
  }
  var _environment$getCompu = environment.getComputedStyle(element), overflow = _environment$getCompu.overflow, overflowX = _environment$getCompu.overflowX, overflowY = _environment$getCompu.overflowY;
  if ([overflow, overflowX, overflowY].some(function(prop) {
    return ["auto", "scroll"].includes(prop);
  })) {
    result.push(element);
  }
  return [].concat(result, findScrollContainers(element.parentElement, environment));
}
function createReferenceError(subject) {
  return "react-laag: Could not find a valid reference for the " + subject + " element. There might be 2 causes:\n   - Make sure that the 'ref' is set correctly on the " + subject + ' element when isOpen: true. Also make sure your component forwards the ref with "forwardRef()".\n   - Make sure that you are actually rendering the ' + subject + " when the isOpen prop is set to true";
}
function useTrackElements(_ref) {
  var enabled = _ref.enabled, onChange = _ref.onChange, environment = _ref.environment, ResizeObserverPolyfill = _ref.ResizeObserverPolyfill, overflowContainer = _ref.overflowContainer, triggerOption = _ref.triggerOption;
  var ResizeObserver = getResizeObserver(environment, ResizeObserverPolyfill);
  (0, import_react8.useEffect)(function() {
    true ? tiny_warning_esm_default(ResizeObserver, "This browser does not support ResizeObserver out of the box. We recommend to add a polyfill in order to utilize the full capabilities of react-laag. See: https://github.com/everweij/react-laag#resize-observer") : void 0;
  }, [ResizeObserver]);
  var arrowRef = (0, import_react8.useRef)(null);
  var hasTriggerOption = Boolean(triggerOption);
  var _useMutableStore = useMutableStore({
    scrollContainers: [],
    trigger: null,
    layer: null
  }), get = _useMutableStore[0], set = _useMutableStore[1];
  var _useEventSubscription = useEventSubscriptions(), hasEventSubscriptions = _useEventSubscription.hasEventSubscriptions, addEventSubscription = _useEventSubscription.addEventSubscription, removeAllEventSubscriptions = _useEventSubscription.removeAllEventSubscriptions;
  var handleChange = (0, import_react8.useCallback)(function handleChange2() {
    var _get = get(), layer = _get.layer, trigger = _get.trigger, scrollContainers = _get.scrollContainers;
    var closestScrollContainer = scrollContainers[0];
    if (!layer) {
      throw new Error(createReferenceError("layer"));
    }
    if (!trigger && !hasTriggerOption) {
      throw new Error(createReferenceError("trigger"));
    }
    var scrollOffsets = {
      top: 0,
      left: 0
    };
    if (closestScrollContainer) {
      var scrollLeft = closestScrollContainer.scrollLeft, scrollTop = closestScrollContainer.scrollTop;
      scrollOffsets = {
        top: scrollTop,
        left: scrollLeft
      };
    } else {
      var scrollX = environment.scrollX, scrollY = environment.scrollY;
      scrollOffsets = {
        top: scrollY,
        left: scrollX
      };
    }
    var borderOffsets = {
      left: 0,
      top: 0
    };
    if (closestScrollContainer) {
      var _environment$getCompu2 = environment.getComputedStyle(closestScrollContainer), borderLeftWidth = _environment$getCompu2.borderLeftWidth, borderTopWidth = _environment$getCompu2.borderTopWidth;
      borderOffsets = {
        left: getPixelValue(borderLeftWidth) || 0,
        top: getPixelValue(borderTopWidth) || 0
      };
    }
    onChange({
      layer,
      trigger,
      scrollContainers,
      arrow: arrowRef.current
    }, scrollOffsets, borderOffsets);
  }, [get, onChange, environment, arrowRef, hasTriggerOption]);
  var addEventListeners = (0, import_react8.useCallback)(function addEventListeners2() {
    var _get2 = get(), trigger = _get2.trigger, layer = _get2.layer, scrollContainers = _get2.scrollContainers;
    if (!layer) {
      throw new Error(createReferenceError("layer"));
    }
    if (!trigger && !hasTriggerOption) {
      throw new Error(createReferenceError("trigger"));
    }
    if (ResizeObserver) {
      var ignoredInitialCall = false;
      var observerCallback = function observerCallback2() {
        if (!ignoredInitialCall) {
          ignoredInitialCall = true;
          return;
        }
        handleChange();
      };
      var observer = new ResizeObserver(observerCallback);
      for (var _i = 0, _arr = [trigger, layer, document.body]; _i < _arr.length; _i++) {
        var element = _arr[_i];
        if (element)
          observer.observe(element);
      }
      addEventSubscription(function() {
        for (var _i2 = 0, _arr2 = [trigger, layer, document.body]; _i2 < _arr2.length; _i2++) {
          var _element = _arr2[_i2];
          if (_element)
            observer.unobserve(_element);
        }
        observer.disconnect();
      });
    }
    var listenForScrollElements = [environment].concat(scrollContainers);
    var _loop = function _loop2() {
      var element2 = _step.value;
      element2.addEventListener("scroll", handleChange);
      addEventSubscription(function() {
        return element2.removeEventListener("scroll", handleChange);
      });
    };
    for (var _iterator = _createForOfIteratorHelperLoose(listenForScrollElements), _step; !(_step = _iterator()).done; ) {
      _loop();
    }
  }, [get, addEventSubscription, handleChange, environment, ResizeObserver, hasTriggerOption]);
  var resetWhenReferenceChangedWhileTracking = (0, import_react8.useCallback)(function(previous, next) {
    if (enabled && previous && previous !== next) {
      removeAllEventSubscriptions();
      addEventListeners();
      handleChange();
    }
  }, [removeAllEventSubscriptions, addEventListeners, handleChange, enabled]);
  var layerRef = useTrackRef((0, import_react8.useCallback)(function(layer) {
    var _get3 = get(), previousLayer = _get3.layer;
    set(function(state) {
      return _extends2({}, state, {
        layer
      });
    });
    resetWhenReferenceChangedWhileTracking(previousLayer, layer);
  }, [get, set, resetWhenReferenceChangedWhileTracking]));
  var getScrollContainers = (0, import_react8.useCallback)(function handleScrollContainers(element) {
    var scrollContainers = findScrollContainers(element, environment);
    var closestScrollContainer = scrollContainers[0];
    if (closestScrollContainer) {
      var position = environment.getComputedStyle(closestScrollContainer).position;
      var closestScrollContainerHasCorrectStyling = ["relative", "absolute", "fixed"].includes(position) || overflowContainer;
      if (!closestScrollContainerHasCorrectStyling) {
        closestScrollContainer.style.position = "relative";
      }
      true ? tiny_warning_esm_default(closestScrollContainerHasCorrectStyling, `react-laag: Set the 'position' style of the nearest scroll-container to 'relative', 'absolute' or 'fixed', or set the 'overflowContainer' prop to true. This is needed in order to position the layer properly. Currently the scroll-container is positioned: "` + position + '". For now, "position: relative;" is added for you, but this behavior might be removed in the future. Visit https://react-laag.com/docs/#position-relative for more info.') : void 0;
    }
    return scrollContainers;
  }, [environment, overflowContainer]);
  var triggerRef = useTrackRef((0, import_react8.useCallback)(function(trigger) {
    var scrollContainers = getScrollContainers(trigger);
    var _get4 = get(), previousTrigger = _get4.trigger;
    set(function(state) {
      return _extends2({}, state, {
        trigger,
        scrollContainers
      });
    });
    resetWhenReferenceChangedWhileTracking(previousTrigger, trigger);
  }, [get, set, resetWhenReferenceChangedWhileTracking, getScrollContainers]));
  var triggerOptionParent = triggerOption == null ? void 0 : triggerOption.getParent == null ? void 0 : triggerOption.getParent();
  useIsomorphicLayoutEffect(function() {
    if (!triggerOptionParent) {
      return;
    }
    set(function(state) {
      return _extends2({}, state, {
        scrollContainers: getScrollContainers(triggerOptionParent)
      });
    });
  }, [triggerOptionParent, set, getScrollContainers]);
  useIsomorphicLayoutEffect(function() {
    if (enabled) {
      if (!hasEventSubscriptions()) {
        addEventListeners();
      }
    }
    return function() {
      if (hasEventSubscriptions()) {
        removeAllEventSubscriptions();
      }
    };
  }, [enabled, hasEventSubscriptions, addEventListeners, removeAllEventSubscriptions]);
  useIsomorphicLayoutEffect(function() {
    if (enabled) {
      handleChange();
    }
  });
  return {
    triggerRef,
    layerRef,
    arrowRef,
    closestScrollContainer: get().scrollContainers[0] || null
  };
}
var GroupContext = /* @__PURE__ */ (0, import_react8.createContext)({});
function GroupProvider(_ref) {
  var children = _ref.children, registrations = _ref.registrations;
  var handleRegister = (0, import_react8.useCallback)(function register(registration) {
    registrations.current.add(registration);
    return function() {
      return registrations.current.delete(registration);
    };
  }, [registrations]);
  return (0, import_react8.createElement)(GroupContext.Provider, {
    value: handleRegister
  }, children);
}
function getShouldCloseAccordingToChildren(registrations, event) {
  for (var _iterator = _createForOfIteratorHelperLoose(registrations), _step; !(_step = _iterator()).done; ) {
    var shouldCloseWhenClickedOutside = _step.value.shouldCloseWhenClickedOutside;
    if (!shouldCloseWhenClickedOutside(event)) {
      return false;
    }
  }
  return true;
}
function useGroup(_ref2) {
  var isOpen = _ref2.isOpen, onOutsideClick = _ref2.onOutsideClick, onParentClose = _ref2.onParentClose;
  var trigger = (0, import_react8.useRef)(null);
  var layer = (0, import_react8.useRef)(null);
  var registrations = (0, import_react8.useRef)(/* @__PURE__ */ new Set());
  var possibleRegisterFn = (0, import_react8.useContext)(GroupContext);
  var shouldCloseWhenClickedOutside = (0, import_react8.useCallback)(function shouldCloseWhenClickedOutside2(event) {
    var target = event.target;
    var clickedOnTrigger = trigger.current && trigger.current.contains(target);
    var clickedOnLayer = layer.current && layer.current.contains(target);
    var shouldCloseAccordingToChildren = getShouldCloseAccordingToChildren(registrations.current, event);
    if (clickedOnLayer && shouldCloseAccordingToChildren) {
      registrations.current.forEach(function(_ref3) {
        var closeChild = _ref3.closeChild;
        return closeChild();
      });
    }
    return !clickedOnTrigger && !clickedOnLayer && shouldCloseAccordingToChildren;
  }, [trigger, layer, registrations]);
  (0, import_react8.useEffect)(function() {
    if (typeof possibleRegisterFn !== "function") {
      return;
    }
    return possibleRegisterFn({
      shouldCloseWhenClickedOutside,
      closeChild: function closeChild() {
        true ? tiny_warning_esm_default(onParentClose, "react-laag: You are using useLayer() in a nested setting but forgot to set the 'onParentClose()' callback in the options. This could lead to unexpected behavior.") : void 0;
        if (onParentClose) {
          onParentClose();
        }
      }
    });
  }, [possibleRegisterFn, shouldCloseWhenClickedOutside, onParentClose, registrations]);
  (0, import_react8.useEffect)(function() {
    var isChild = typeof possibleRegisterFn === "function";
    var shouldNotListen = !isOpen || !onOutsideClick || isChild;
    if (shouldNotListen) {
      return;
    }
    function handleClick(event) {
      if (shouldCloseWhenClickedOutside(event)) {
        onOutsideClick();
      }
    }
    document.addEventListener("click", handleClick, true);
    return function() {
      return document.removeEventListener("click", handleClick, true);
    };
  }, [isOpen, onOutsideClick, shouldCloseWhenClickedOutside, possibleRegisterFn]);
  (0, import_react8.useEffect)(function() {
    if (!isOpen) {
      registrations.current.forEach(function(_ref4) {
        var closeChild = _ref4.closeChild;
        return closeChild();
      });
    }
  }, [isOpen]);
  return {
    closeOnOutsideClickRefs: {
      trigger,
      layer
    },
    registrations
  };
}
var PLACEMENT_TYPES = ["bottom-start", "bottom-end", "bottom-center", "top-start", "top-center", "top-end", "left-end", "left-center", "left-start", "right-end", "right-center", "right-start", "center"];
var OPPOSITES = {
  top: "bottom",
  left: "right",
  bottom: "top",
  right: "left",
  center: "center"
};
var SideBase = /* @__PURE__ */ function() {
  function SideBase2(prop, opposite, isHorizontal, sizeProp, oppositeSizeProp, cssProp, oppositeCssProp, isCenter, isPush) {
    this.prop = void 0;
    this.opposite = void 0;
    this.isHorizontal = void 0;
    this.sizeProp = void 0;
    this.oppositeSizeProp = void 0;
    this.cssProp = void 0;
    this.oppositeCssProp = void 0;
    this.isCenter = void 0;
    this.isPush = void 0;
    this.prop = prop;
    this.opposite = opposite;
    this.isHorizontal = isHorizontal;
    this.sizeProp = sizeProp;
    this.oppositeSizeProp = oppositeSizeProp;
    this.cssProp = cssProp;
    this.oppositeCssProp = oppositeCssProp;
    this.isCenter = isCenter;
    this.isPush = isPush;
  }
  var _proto = SideBase2.prototype;
  _proto.factor = function factor(value) {
    return value * (this.isPush ? 1 : -1);
  };
  _proto.isOppositeDirection = function isOppositeDirection(side) {
    return this.isHorizontal !== side.isHorizontal;
  };
  return SideBase2;
}();
function createSide(prop, recursive) {
  if (recursive === void 0) {
    recursive = true;
  }
  var isHorizontal = ["left", "right"].includes(prop);
  return new SideBase(prop, recursive ? createSide(OPPOSITES[prop], false) : null, isHorizontal, isHorizontal ? "width" : "height", isHorizontal ? "height" : "width", isHorizontal ? "left" : "top", isHorizontal ? "top" : "left", prop === "center", !["right", "bottom"].includes(prop));
}
var BoundSide = {
  top: /* @__PURE__ */ createSide("top"),
  bottom: /* @__PURE__ */ createSide("bottom"),
  left: /* @__PURE__ */ createSide("left"),
  right: /* @__PURE__ */ createSide("right")
};
var Side = /* @__PURE__ */ _extends2({}, BoundSide, {
  center: /* @__PURE__ */ createSide("center")
});
var SIDES = ["top", "left", "bottom", "right"];
var BoundsOffsets = /* @__PURE__ */ function() {
  function BoundsOffsets2(offsets) {
    this.top = void 0;
    this.left = void 0;
    this.right = void 0;
    this.bottom = void 0;
    return Object.assign(this, offsets);
  }
  BoundsOffsets2.mergeSmallestSides = function mergeSmallestSides(boundsOffsets) {
    var first = boundsOffsets[0], rest = boundsOffsets.slice(1);
    if (!first) {
      throw new Error("Please provide at least 1 bounds objects in order to merge");
    }
    var result = Object.fromEntries(SIDES.map(function(side2) {
      return [side2, first[side2]];
    }));
    for (var _iterator = _createForOfIteratorHelperLoose(rest), _step; !(_step = _iterator()).done; ) {
      var boundsOffset = _step.value;
      for (var _iterator2 = _createForOfIteratorHelperLoose(SIDES), _step2; !(_step2 = _iterator2()).done; ) {
        var side = _step2.value;
        result[side] = Math.min(result[side], boundsOffset[side]);
      }
    }
    return new BoundsOffsets2(result);
  };
  _createClass(BoundsOffsets2, [{
    key: "allSidesArePositive",
    get: function get() {
      var _this = this;
      return SIDES.every(function(side) {
        return _this[side] >= 0;
      });
    }
  }, {
    key: "negativeSides",
    get: function get() {
      var _this2 = this;
      return Object.fromEntries(SIDES.filter(function(side) {
        return _this2[side] < 0;
      }).map(function(side) {
        return [side, _this2[side]];
      }));
    }
  }]);
  return BoundsOffsets2;
}();
function sumOfPropertyValues() {
  for (var _len = arguments.length, propertyValues = new Array(_len), _key = 0; _key < _len; _key++) {
    propertyValues[_key] = arguments[_key];
  }
  return propertyValues.reduce(function(sum, propertyValue) {
    return sum + (propertyValue ? getPixelValue(propertyValue) : 0);
  }, 0);
}
function boundsToObject(_ref) {
  var top = _ref.top, left = _ref.left, right = _ref.right, bottom = _ref.bottom, width = _ref.width, height = _ref.height;
  return {
    top,
    left,
    right,
    bottom,
    width,
    height
  };
}
var EMPTY = {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0,
  width: 0,
  height: 0
};
var Bounds = /* @__PURE__ */ function() {
  Bounds2.create = function create2(bounds) {
    return new Bounds2(bounds);
  };
  Bounds2.fromElement = function fromElement(element, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$withTransfor = _options.withTransform, withTransform = _options$withTransfor === void 0 ? true : _options$withTransfor, _options$environment = _options.environment, environment = _options$environment === void 0 ? window : _options$environment, _options$withScrollba = _options.withScrollbars, withScrollbars = _options$withScrollba === void 0 ? true : _options$withScrollba;
    var plain = boundsToObject(element.getBoundingClientRect());
    var bounds = new Bounds2(plain);
    if (!withTransform) {
      var _environment$getCompu = environment.getComputedStyle(element), width = _environment$getCompu.width, height = _environment$getCompu.height, boxSizing = _environment$getCompu.boxSizing, borderLeft = _environment$getCompu.borderLeft, borderRight = _environment$getCompu.borderRight, borderTop = _environment$getCompu.borderTop, borderBottom = _environment$getCompu.borderBottom, paddingLeft = _environment$getCompu.paddingLeft, paddingRight = _environment$getCompu.paddingRight, paddingTop = _environment$getCompu.paddingTop, paddingBottom = _environment$getCompu.paddingBottom;
      var boxWidth = boxSizing === "border-box" ? getPixelValue(width) : sumOfPropertyValues(width, borderLeft, borderRight, paddingLeft, paddingRight);
      var boxHeight = boxSizing === "border-box" ? getPixelValue(height) : sumOfPropertyValues(height, borderTop, borderBottom, paddingTop, paddingBottom);
      bounds = new Bounds2(_extends2({}, bounds, {
        width: boxWidth,
        height: boxHeight
      }));
    }
    if (!withScrollbars) {
      var scrollbarWidth = bounds.width - element.clientWidth;
      var scrollbarHeight = bounds.height - element.clientHeight;
      return bounds.substract({
        right: scrollbarWidth,
        bottom: scrollbarHeight
      });
    }
    return bounds;
  };
  Bounds2.empty = function empty() {
    return new Bounds2();
  };
  Bounds2.fromWindow = function fromWindow(environment) {
    var _environment$document;
    var scrollingElement = (_environment$document = environment == null ? void 0 : environment.document.scrollingElement) != null ? _environment$document : environment == null ? void 0 : environment.document.documentElement;
    var _ref2 = scrollingElement != null ? scrollingElement : {}, _ref2$clientWidth = _ref2.clientWidth, width = _ref2$clientWidth === void 0 ? 0 : _ref2$clientWidth, _ref2$clientHeight = _ref2.clientHeight, height = _ref2$clientHeight === void 0 ? 0 : _ref2$clientHeight;
    return new Bounds2({
      width,
      height,
      right: width,
      bottom: height
    });
  };
  function Bounds2(bounds) {
    if (bounds === void 0) {
      bounds = {};
    }
    this.top = void 0;
    this.left = void 0;
    this.right = void 0;
    this.bottom = void 0;
    this.width = void 0;
    this.height = void 0;
    return Object.assign(this, EMPTY, bounds);
  }
  var _proto = Bounds2.prototype;
  _proto.toObject = function toObject() {
    return boundsToObject(this);
  };
  _proto.merge = function merge(partialBoundsOrMergeFn) {
    var current = this.toObject();
    return new Bounds2(_extends2({}, current, typeof partialBoundsOrMergeFn === "function" ? partialBoundsOrMergeFn(current) : partialBoundsOrMergeFn));
  };
  _proto.substract = function substract(bounds) {
    var result = this.toObject();
    var entries = Object.entries(bounds);
    for (var _i = 0, _entries = entries; _i < _entries.length; _i++) {
      var _entries$_i = _entries[_i], prop = _entries$_i[0], value = _entries$_i[1];
      if (prop in BoundSide) {
        var boundSide = BoundSide[prop];
        result[prop] += boundSide.factor(value);
        result[boundSide.isHorizontal ? "width" : "height"] -= value;
      } else {
        result[prop] -= value || 0;
      }
    }
    return new Bounds2(result);
  };
  _proto.offsetsTo = function offsetsTo(child) {
    return new BoundsOffsets({
      top: child.top - this.top,
      bottom: this.bottom - child.bottom,
      left: child.left - this.left,
      right: this.right - child.right
    });
  };
  _proto.mapSides = function mapSides(mapper) {
    var result = this.toObject();
    var boundSides = Object.values(BoundSide);
    for (var _i2 = 0, _boundSides = boundSides; _i2 < _boundSides.length; _i2++) {
      var boundSide = _boundSides[_i2];
      result[boundSide.prop] = mapper(boundSide, result[boundSide.prop]);
    }
    return new Bounds2(result);
  };
  _createClass(Bounds2, [{
    key: "surface",
    get: function get() {
      return this.width * this.height;
    }
  }]);
  return Bounds2;
}();
var Placement = /* @__PURE__ */ function() {
  function Placement2(primary, secondary, subjectBounds, layerDimensions, offsets) {
    this.primary = void 0;
    this.secondary = void 0;
    this.offsets = void 0;
    this.subjectsBounds = void 0;
    this._cachedLayerBounds = null;
    this._cachedContainerOffsets = null;
    this.primary = primary;
    this.secondary = secondary;
    this.offsets = offsets;
    this.setSubjectsBounds(subjectBounds, layerDimensions);
  }
  var _proto = Placement2.prototype;
  _proto.setSubjectsBounds = function setSubjectsBounds(subjectBounds, layerDimensions) {
    if (!layerDimensions) {
      this.subjectsBounds = subjectBounds;
      return;
    }
    var dimensions = typeof layerDimensions === "function" ? layerDimensions(this.primary.prop) : layerDimensions;
    this.subjectsBounds = subjectBounds.merge({
      layer: _extends2({}, subjectBounds.layer, dimensions)
    });
  };
  _proto.getLayerBounds = function getLayerBounds(secondaryOffset) {
    if (secondaryOffset === void 0) {
      secondaryOffset = 0;
    }
    if (this._cachedLayerBounds && secondaryOffset === 0) {
      return this._cachedLayerBounds;
    }
    var primary = this.primary, secondary = this.secondary, subjectsBounds = this.subjectsBounds;
    var trigger = subjectsBounds.trigger, layer = subjectsBounds.layer, arrow = subjectsBounds.arrow;
    var isHorizontal = primary.isHorizontal, oppositeCssProp = primary.oppositeCssProp, oppositeSizeProp = primary.oppositeSizeProp, prop = primary.prop, opposite = primary.opposite;
    var result = Bounds.empty();
    result[opposite.prop] = trigger[prop] - primary.factor(this.offsets.trigger);
    result[prop] = result[opposite.prop] - primary.factor(layer[primary.sizeProp]);
    var arrowOffsetBase = this.offsets.arrow * 2;
    var limitMin = trigger[oppositeCssProp] - (layer[oppositeSizeProp] - arrow[oppositeSizeProp]) + arrowOffsetBase;
    var limitMax = trigger[oppositeCssProp] + (trigger[oppositeSizeProp] - arrow[oppositeSizeProp]) - arrowOffsetBase;
    if (!secondary.isPush) {
      limitMin += layer[oppositeSizeProp];
      limitMax += layer[oppositeSizeProp];
    }
    if (secondary.isCenter) {
      var propertyA = (isHorizontal ? BoundSide.top : BoundSide.left).prop;
      var propertyB = (isHorizontal ? BoundSide.bottom : BoundSide.right).prop;
      result[propertyA] = limit(trigger[propertyA] + trigger[oppositeSizeProp] / 2 - layer[oppositeSizeProp] / 2 + secondaryOffset, limitMin, limitMax);
      result[propertyB] = result[propertyA] + layer[oppositeSizeProp];
    } else {
      var sec = secondary;
      var triggerValue = trigger[sec.prop];
      var arrowCompensation = triggerValue < limitMin ? limitMin - triggerValue : triggerValue > limitMax ? limitMax - triggerValue : 0;
      result[sec.prop] = limit(triggerValue + secondaryOffset + arrowCompensation, limitMin, limitMax);
      result[sec.opposite.prop] = result[sec.prop] + secondary.factor(layer[oppositeSizeProp]);
    }
    result.width = result.right - result.left;
    result.height = result.bottom - result.top;
    var layerBounds = Bounds.create(result);
    if (secondaryOffset === 0) {
      this._cachedLayerBounds = layerBounds;
    }
    return layerBounds;
  };
  _proto.getLayerCollisionBounds = function getLayerCollisionBounds() {
    var container = this.offsets.container;
    return this.getLayerBounds().mapSides(function(side, value) {
      return value -= side.factor(container);
    }).merge(function(_ref) {
      var width = _ref.width, height = _ref.height;
      return {
        width: width + container * 2,
        height: height + container * 2
      };
    });
  };
  _proto.getContainerOffsets = function getContainerOffsets(layerBounds) {
    if (this._cachedContainerOffsets && !layerBounds) {
      return this._cachedContainerOffsets;
    }
    var subjectBounds = this.subjectsBounds.merge({
      layer: layerBounds || this.getLayerCollisionBounds()
    });
    var offsets = BoundsOffsets.mergeSmallestSides(subjectBounds.layerOffsetsToScrollContainers);
    if (!layerBounds) {
      this._cachedContainerOffsets = offsets;
    }
    return offsets;
  };
  _createClass(Placement2, [{
    key: "type",
    get: function get() {
      return this.primary.prop + "-" + (this.secondary.prop === "center" ? "center" : ["bottom", "right"].includes(this.secondary.prop) ? "end" : "start");
    }
  }, {
    key: "triggerIsBigger",
    get: function get() {
      var isHorizontal = this.secondary.isHorizontal;
      var _this$subjectsBounds = this.subjectsBounds, triggerHasBiggerWidth = _this$subjectsBounds.triggerHasBiggerWidth, triggerHasBiggerHeight = _this$subjectsBounds.triggerHasBiggerHeight;
      return isHorizontal && triggerHasBiggerWidth || !isHorizontal && triggerHasBiggerHeight;
    }
  }, {
    key: "fitsContainer",
    get: function get() {
      return this.getContainerOffsets().allSidesArePositive;
    }
  }, {
    key: "visibleSurface",
    get: function get() {
      var layerBounds = this.getLayerBounds();
      var containerOffsets = this.getContainerOffsets(layerBounds);
      var substract = containerOffsets.negativeSides;
      for (var side in substract) {
        substract[side] = -substract[side];
      }
      return layerBounds.substract(substract).surface;
    }
  }, {
    key: "secondaryOffsetSide",
    get: function get() {
      var _Object$entries$map$f, _Object$entries$map$f2, _this = this;
      var containerOffsets = this.getContainerOffsets();
      var _ref2 = (_Object$entries$map$f = (_Object$entries$map$f2 = Object.entries(containerOffsets.negativeSides).map(function(_ref3) {
        var side = _ref3[0], value = _ref3[1];
        return [BoundSide[side], value];
      }).filter(function(_ref4) {
        var side = _ref4[0];
        return _this.primary.isOppositeDirection(side);
      }).sort(function(_ref5, _ref6) {
        var a2 = _ref5[1];
        var b2 = _ref6[1];
        return b2 - a2;
      })) == null ? void 0 : _Object$entries$map$f2[0]) != null ? _Object$entries$map$f : [], mostNegativeSide = _ref2[0];
      return mostNegativeSide || null;
    }
  }]);
  return Placement2;
}();
var PlacementCenter = /* @__PURE__ */ function(_Placement) {
  _inheritsLoose(PlacementCenter2, _Placement);
  function PlacementCenter2() {
    return _Placement.apply(this, arguments) || this;
  }
  var _proto2 = PlacementCenter2.prototype;
  _proto2.getLayerBounds = function getLayerBounds() {
    var _this$subjectsBounds2 = this.subjectsBounds, trigger = _this$subjectsBounds2.trigger, layer = _this$subjectsBounds2.layer;
    var result = Bounds.empty();
    result.top = trigger.top + trigger.height / 2 - layer.height / 2;
    result.bottom = result.top + layer.height;
    result.left = trigger.left + trigger.width / 2 - layer.width / 2;
    result.right = result.left + layer.width;
    result.width = result.right - result.left;
    result.height = result.bottom - result.top;
    return result;
  };
  return PlacementCenter2;
}(Placement);
function getNegativeOffsetBetweenLayerCenterAndTrigger(subjectsBounds, placement, arrowOffset) {
  var layer = subjectsBounds.layer, trigger = subjectsBounds.trigger, arrow = subjectsBounds.arrow;
  var sizeProperty = placement.primary.oppositeSizeProp;
  var _ref = !placement.primary.isHorizontal ? ["left", "right"] : ["top", "bottom"], sideA = _ref[0], sideB = _ref[1];
  var offsetA = layer[sideA] + layer[sizeProperty] / 2 - trigger[sideA] - arrow[sizeProperty] / 2 - arrowOffset;
  var offsetB = layer[sideB] - layer[sizeProperty] / 2 - trigger[sideB] + arrow[sizeProperty] / 2 + arrowOffset;
  return (offsetA < 0 ? -offsetA : 0) + (offsetB > 0 ? -offsetB : 0);
}
var STYLE_BASE = {
  position: "absolute",
  willChange: "top, left",
  left: null,
  right: null,
  top: null,
  bottom: null
};
function getArrowStyle(subjectsBounds, placement, arrowOffset) {
  var _extends22;
  if (placement.primary.isCenter) {
    return STYLE_BASE;
  }
  var layer = subjectsBounds.layer, trigger = subjectsBounds.trigger, arrow = subjectsBounds.arrow;
  var sizeProperty = placement.primary.oppositeSizeProp;
  var triggerIsBigger = trigger[sizeProperty] > layer[sizeProperty];
  var min = arrowOffset + arrow[sizeProperty] / 2;
  var max = layer[sizeProperty] - arrow[sizeProperty] / 2 - arrowOffset;
  var negativeOffset = getNegativeOffsetBetweenLayerCenterAndTrigger(subjectsBounds, placement, arrowOffset);
  var primarySide = placement.primary.prop;
  var secondarySide = placement.primary.oppositeCssProp;
  var secondaryValue = triggerIsBigger ? layer[sizeProperty] / 2 + negativeOffset : trigger[secondarySide] + trigger[sizeProperty] / 2 - layer[secondarySide];
  return _extends2({}, STYLE_BASE, (_extends22 = {}, _extends22[primarySide] = "100%", _extends22[secondarySide] = limit(secondaryValue, min, max), _extends22));
}
var Placements = /* @__PURE__ */ function() {
  function Placements2(placements, config2, subjectsBounds) {
    this.placements = void 0;
    this.config = void 0;
    this.subjectsBounds = void 0;
    this.placements = placements;
    this.config = config2;
    this.subjectsBounds = subjectsBounds;
  }
  Placements2.getSidesFromPlacementType = function getSidesFromPlacementType(type) {
    var _type$split = type.split("-"), a2 = _type$split[0], b2 = _type$split[1];
    var primary = BoundSide[a2];
    var secondary;
    if (b2 === "center") {
      secondary = Side.center;
    } else if (primary.isHorizontal) {
      secondary = b2 === "start" ? Side.top : Side.bottom;
    } else {
      secondary = b2 === "start" ? Side.left : Side.right;
    }
    return [primary, secondary];
  };
  Placements2.create = function create2(subjectsBounds, config2) {
    var offsets = {
      arrow: config2.arrowOffset,
      container: config2.containerOffset,
      trigger: config2.triggerOffset
    };
    function getListOfPlacements(preferedPlacement) {
      if (preferedPlacement === void 0) {
        preferedPlacement = config2.placement;
      }
      var _Placements$getSidesF = Placements2.getSidesFromPlacementType(preferedPlacement), primary = _Placements$getSidesF[0], secondary = _Placements$getSidesF[1];
      var preferredSide = BoundSide[primary.isHorizontal ? config2.preferY : config2.preferX];
      var triggerIsBigger = !primary.isHorizontal && subjectsBounds.triggerHasBiggerWidth || primary.isHorizontal && subjectsBounds.triggerHasBiggerHeight;
      function placementFrom(primary2, secondary2) {
        return new Placement(primary2, secondary2, subjectsBounds, config2.layerDimensions, offsets);
      }
      var list = [];
      list[0] = placementFrom(primary, secondary);
      list[1] = placementFrom(primary, secondary.isCenter ? preferredSide : Side.center);
      list[2] = placementFrom(primary, Side[(secondary.opposite.isCenter ? preferredSide.opposite : secondary.opposite).prop]);
      list[3] = placementFrom(preferredSide, triggerIsBigger ? primary : Side[primary.opposite.prop]);
      list[4] = placementFrom(preferredSide, Side.center);
      list[5] = placementFrom(preferredSide, triggerIsBigger ? Side[primary.opposite.prop] : primary);
      list[6] = placementFrom(BoundSide[preferredSide.opposite.prop], triggerIsBigger ? primary : Side[primary.opposite.prop]);
      list[7] = placementFrom(BoundSide[preferredSide.opposite.prop], Side.center);
      list[8] = placementFrom(BoundSide[preferredSide.opposite.prop], triggerIsBigger ? Side[primary.opposite.prop] : primary);
      list[9] = placementFrom(BoundSide[primary.opposite.prop], secondary);
      list[10] = placementFrom(BoundSide[primary.opposite.prop], secondary.isCenter ? preferredSide : Side.center);
      list[11] = placementFrom(BoundSide[primary.opposite.prop], Side[(secondary.opposite.isCenter ? preferredSide.opposite : secondary.opposite).prop]);
      list = list.filter(function(placement) {
        return placement.type === config2.placement || config2.possiblePlacements.includes(placement.type);
      });
      return list;
    }
    if (config2.placement === "center") {
      return new Placements2([new PlacementCenter(Side.center, Side.center, subjectsBounds, config2.layerDimensions, offsets)].concat(getListOfPlacements(config2.preferY + "-" + config2.preferX)), config2, subjectsBounds);
    }
    return new Placements2(getListOfPlacements(), config2, subjectsBounds);
  };
  var _proto = Placements2.prototype;
  _proto.filterPlacementsBySide = function filterPlacementsBySide(side) {
    return this.placements.filter(function(placement) {
      return placement.primary === side;
    });
  };
  _proto.findFirstPlacementThatFits = function findFirstPlacementThatFits() {
    return this.placements.find(function(placement) {
      return placement.fitsContainer;
    });
  };
  _proto.placementWithBiggestVisibleSurface = function placementWithBiggestVisibleSurface() {
    var _this$placements$map$ = this.placements.map(function(placement) {
      return {
        placement,
        surface: placement.visibleSurface
      };
    }).sort(function(a2, b2) {
      return b2.surface - a2.surface;
    }), placementWithBiggestSurface = _this$placements$map$[0].placement;
    return placementWithBiggestSurface;
  };
  _proto.findSuitablePlacement = function findSuitablePlacement() {
    if (!this.config.auto) {
      return this.placements[0];
    }
    return this.findFirstPlacementThatFits() || this.placementWithBiggestVisibleSurface();
  };
  _proto.getSecondaryOffset = function getSecondaryOffset(placement) {
    var _this$config = this.config, auto = _this$config.auto, snap = _this$config.snap;
    if (!auto || snap || placement instanceof PlacementCenter) {
      return 0;
    }
    var placementsOnSameSide = this.filterPlacementsBySide(placement.primary);
    var currentPlacementHasHighestPriority = placementsOnSameSide.indexOf(placement) === 0;
    if (currentPlacementHasHighestPriority && placement.fitsContainer) {
      return 0;
    }
    var firstPlacementThatDoesNotFit = placementsOnSameSide.find(function(placement2) {
      return !placement2.fitsContainer;
    });
    if (!firstPlacementThatDoesNotFit) {
      return 0;
    }
    var secondaryOffsetSide = firstPlacementThatDoesNotFit.secondaryOffsetSide;
    if (!secondaryOffsetSide) {
      return 0;
    }
    var containerOffsets = placement.getContainerOffsets();
    var secondary = placement.secondary;
    var factor;
    if (placement.triggerIsBigger || firstPlacementThatDoesNotFit === placement) {
      factor = secondaryOffsetSide.isPush ? -1 : 1;
    } else {
      factor = secondary === Side.left || [Side.top, Side.center].includes(secondary) && secondaryOffsetSide.isPush ? -1 : 1;
    }
    var secondaryOffset = containerOffsets[secondaryOffsetSide.prop];
    return secondaryOffset * factor;
  };
  _proto.getStyles = function getStyles(layerBounds, placement, scrollOffsets, borderOffsets) {
    var layerStyleBase = {
      willChange: "top, left, width, height"
    };
    var arrow = getArrowStyle(this.subjectsBounds.merge({
      layer: layerBounds
    }), placement, this.config.arrowOffset);
    var layer = this.config.overflowContainer ? _extends2({}, layerStyleBase, {
      position: "fixed",
      top: layerBounds.top,
      left: layerBounds.left
    }) : _extends2({}, layerStyleBase, {
      position: "absolute",
      top: layerBounds.top - this.subjectsBounds.parent.top + scrollOffsets.top - borderOffsets.top,
      left: layerBounds.left - this.subjectsBounds.parent.left + scrollOffsets.left - borderOffsets.left
    });
    return {
      arrow,
      layer
    };
  };
  _proto.getHasDisappeared = function getHasDisappeared(layerBounds) {
    var subject = this.config.overflowContainer ? this.subjectsBounds.trigger : layerBounds;
    var containerOffsets = BoundsOffsets.mergeSmallestSides(this.subjectsBounds.offsetsToScrollContainers(subject, true));
    var entries = Object.entries(containerOffsets.negativeSides);
    var hasFullyDisappeared = entries.some(function(_ref) {
      var prop = _ref[0], value = _ref[1];
      var side = BoundSide[prop];
      return value <= -subject[side.sizeProp];
    });
    if (hasFullyDisappeared) {
      return "full";
    }
    if (!containerOffsets.allSidesArePositive) {
      return "partial";
    }
    return null;
  };
  _proto.result = function result(scrollOffsets, borderOffsets) {
    var suitablePlacement = this.findSuitablePlacement();
    var secondaryOffset = this.getSecondaryOffset(suitablePlacement);
    var layerBounds = suitablePlacement.getLayerBounds(secondaryOffset);
    var styles = this.getStyles(layerBounds, suitablePlacement, scrollOffsets, borderOffsets);
    var layerSide = suitablePlacement.primary.prop;
    return {
      styles,
      layerSide,
      placement: suitablePlacement,
      layerBounds,
      hasDisappeared: this.getHasDisappeared(layerBounds)
    };
  };
  return Placements2;
}();
var SubjectsBounds = /* @__PURE__ */ function() {
  function SubjectsBounds2(subjectsBounds, overflowContainer) {
    this.overflowContainer = void 0;
    this.trigger = void 0;
    this.layer = void 0;
    this.arrow = void 0;
    this.parent = void 0;
    this.window = void 0;
    this.scrollContainers = void 0;
    this.overflowContainer = overflowContainer;
    Object.assign(this, subjectsBounds);
  }
  SubjectsBounds2.create = function create2(environment, layer, trigger, parent, arrow, scrollContainers, overflowContainer, getTriggerBounds) {
    var window2 = Bounds.fromWindow(environment);
    return new SubjectsBounds2({
      layer: Bounds.fromElement(layer, {
        environment,
        withTransform: false
      }),
      trigger: getTriggerBounds ? Bounds.create(boundsToObject(getTriggerBounds())) : Bounds.fromElement(trigger),
      arrow: arrow ? Bounds.fromElement(arrow) : Bounds.empty(),
      parent: parent ? Bounds.fromElement(parent) : window2,
      window: window2,
      scrollContainers: [window2].concat(scrollContainers.map(function(container) {
        return Bounds.fromElement(container, {
          withScrollbars: false
        });
      }))
    }, overflowContainer);
  };
  var _proto = SubjectsBounds2.prototype;
  _proto.merge = function merge(subjectsBounds) {
    return new SubjectsBounds2(_extends2({}, this, subjectsBounds), this.overflowContainer);
  };
  _proto.offsetsToScrollContainers = function offsetsToScrollContainers(subject, allContainers) {
    if (allContainers === void 0) {
      allContainers = false;
    }
    var scrollContainers = this.overflowContainer && !allContainers ? [this.window] : this.scrollContainers;
    return scrollContainers.map(function(scrollContainer) {
      return scrollContainer.offsetsTo(subject);
    });
  };
  _createClass(SubjectsBounds2, [{
    key: "layerOffsetsToScrollContainers",
    get: function get() {
      return this.offsetsToScrollContainers(this.layer);
    }
  }, {
    key: "triggerHasBiggerWidth",
    get: function get() {
      return this.trigger.width > this.layer.width;
    }
  }, {
    key: "triggerHasBiggerHeight",
    get: function get() {
      return this.trigger.height > this.layer.height;
    }
  }]);
  return SubjectsBounds2;
}();
var GLOBAL_CONTAINER = null;
var DEFAULT_OPTIONS = {
  auto: false,
  arrowOffset: 0,
  containerOffset: 10,
  triggerOffset: 0,
  overflowContainer: true,
  placement: "top-center",
  possiblePlacements: PLACEMENT_TYPES,
  preferX: "right",
  preferY: "bottom",
  snap: false,
  container: void 0,
  trigger: void 0
};
function useLayer(_ref) {
  var _triggerBoundsRef$cur;
  var _ref$isOpen = _ref.isOpen, isOpen = _ref$isOpen === void 0 ? false : _ref$isOpen, _ref$overflowContaine = _ref.overflowContainer, overflowContainer = _ref$overflowContaine === void 0 ? DEFAULT_OPTIONS.overflowContainer : _ref$overflowContaine, _ref$environment = _ref.environment, environment = _ref$environment === void 0 ? typeof window !== "undefined" ? window : void 0 : _ref$environment, ResizeObserverPolyfill = _ref.ResizeObserver, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? DEFAULT_OPTIONS.placement : _ref$placement, _ref$possiblePlacemen = _ref.possiblePlacements, possiblePlacements = _ref$possiblePlacemen === void 0 ? DEFAULT_OPTIONS.possiblePlacements : _ref$possiblePlacemen, _ref$preferX = _ref.preferX, preferX = _ref$preferX === void 0 ? DEFAULT_OPTIONS.preferX : _ref$preferX, _ref$preferY = _ref.preferY, preferY = _ref$preferY === void 0 ? DEFAULT_OPTIONS.preferY : _ref$preferY, _ref$auto = _ref.auto, auto = _ref$auto === void 0 ? DEFAULT_OPTIONS.auto : _ref$auto, _ref$snap = _ref.snap, snap = _ref$snap === void 0 ? DEFAULT_OPTIONS.snap : _ref$snap, _ref$triggerOffset = _ref.triggerOffset, triggerOffset = _ref$triggerOffset === void 0 ? DEFAULT_OPTIONS.triggerOffset : _ref$triggerOffset, _ref$containerOffset = _ref.containerOffset, containerOffset = _ref$containerOffset === void 0 ? DEFAULT_OPTIONS.containerOffset : _ref$containerOffset, _ref$arrowOffset = _ref.arrowOffset, arrowOffset = _ref$arrowOffset === void 0 ? DEFAULT_OPTIONS.arrowOffset : _ref$arrowOffset, _ref$container = _ref.container, container = _ref$container === void 0 ? DEFAULT_OPTIONS.container : _ref$container, _ref$layerDimensions = _ref.layerDimensions, layerDimensions = _ref$layerDimensions === void 0 ? null : _ref$layerDimensions, onDisappear = _ref.onDisappear, onOutsideClick = _ref.onOutsideClick, onParentClose = _ref.onParentClose, triggerOption = _ref.trigger;
  var _useState = (0, import_react8.useState)(function() {
    return {
      layerSide: placement === "center" ? "center" : Placements.getSidesFromPlacementType(placement)[0].prop,
      styles: {
        layer: {
          position: overflowContainer ? "fixed" : "absolute",
          top: 0,
          left: 0
        },
        arrow: {
          position: "absolute",
          top: 0,
          left: 0
        }
      }
    };
  }), state = _useState[0], setState = _useState[1];
  var triggerBoundsRef = (0, import_react8.useRef)(null);
  var lastState = useLastState(state, isOpen);
  var repositioningToken = (0, import_react8.useRef)({
    cancelled: false
  });
  (0, import_react8.useEffect)(function() {
    return function() {
      repositioningToken.current.cancelled = true;
    };
  }, []);
  var handlePositioning = (0, import_react8.useCallback)(function handlePositioning2(_ref2, scrollOffsets, borderOffsets) {
    var arrow = _ref2.arrow, layer = _ref2.layer, scrollContainers = _ref2.scrollContainers, trigger = _ref2.trigger;
    var parent = scrollContainers[0];
    var subjectsBounds = SubjectsBounds.create(environment, layer, trigger, parent, arrow, scrollContainers, overflowContainer, triggerOption == null ? void 0 : triggerOption.getBounds);
    var config2 = {
      placement,
      possiblePlacements,
      auto,
      layerDimensions,
      arrowOffset,
      containerOffset,
      triggerOffset,
      preferX,
      preferY,
      snap,
      overflowContainer
    };
    var _Placements$create$re = Placements.create(subjectsBounds, config2).result(scrollOffsets, borderOffsets), hasDisappeared = _Placements$create$re.hasDisappeared, layerSide = _Placements$create$re.layerSide, styles = _Placements$create$re.styles;
    var newState = {
      layerSide,
      styles
    };
    if (!lastState.current || didStateChange(lastState.current, newState)) {
      lastState.current = newState;
      repositioningToken.current.cancelled = true;
      var token = {
        cancelled: false
      };
      repositioningToken.current = token;
      Promise.resolve().then(function() {
        if (!token.cancelled) {
          setState(newState);
        }
      });
    }
    if (isSet(hasDisappeared) && isSet(onDisappear)) {
      onDisappear(hasDisappeared);
    }
  }, [arrowOffset, auto, containerOffset, environment, layerDimensions, onDisappear, overflowContainer, placement, possiblePlacements, preferX, preferY, snap, triggerOffset, lastState, triggerOption]);
  var _useTrackElements = useTrackElements({
    ResizeObserverPolyfill,
    environment,
    enabled: isOpen,
    overflowContainer,
    onChange: handlePositioning,
    triggerOption
  }), triggerRef = _useTrackElements.triggerRef, layerRef = _useTrackElements.layerRef, arrowRef = _useTrackElements.arrowRef, closestScrollContainer = _useTrackElements.closestScrollContainer;
  var _useGroup = useGroup({
    isOpen,
    onOutsideClick,
    onParentClose
  }), closeOnOutsideClickRefs = _useGroup.closeOnOutsideClickRefs, registrations = _useGroup.registrations;
  var props = {
    triggerProps: Boolean(triggerOption) ? {} : {
      ref: mergeRefs(triggerRef, closeOnOutsideClickRefs.trigger, triggerBoundsRef)
    },
    layerProps: {
      ref: mergeRefs(layerRef, closeOnOutsideClickRefs.layer),
      style: state.styles.layer
    },
    arrowProps: {
      ref: arrowRef,
      style: state.styles.arrow,
      layerSide: state.layerSide
    },
    layerSide: state.layerSide,
    triggerBounds: isOpen ? triggerOption ? triggerOption.getBounds() : (_triggerBoundsRef$cur = triggerBoundsRef.current) == null ? void 0 : _triggerBoundsRef$cur.getBoundingClientRect() : null,
    renderLayer: function renderLayer(children) {
      return typeof document !== "undefined" ? (0, import_react_dom.createPortal)((0, import_react8.createElement)(GroupProvider, {
        registrations,
        children
      }), overflowContainer || !closestScrollContainer ? getContainerElement(container) : closestScrollContainer) : null;
    }
  };
  return props;
}
function didStateChange(previous, next) {
  if (previous.layerSide !== next.layerSide) {
    return true;
  }
  var styleProps = ["position", "top", "left", "right", "bottom"];
  for (var _i = 0, _styleProps = styleProps; _i < _styleProps.length; _i++) {
    var prop = _styleProps[_i];
    if (previous.styles.layer[prop] !== next.styles.layer[prop] || previous.styles.arrow[prop] !== next.styles.arrow[prop]) {
      return true;
    }
  }
  return false;
}
var DEFAULT_CONTAINER_ID = "layers";
function getContainerElement(container) {
  var element;
  if (typeof container === "function") {
    element = container();
    if (!element || !(element instanceof HTMLElement)) {
      throw new Error("react-laag: You've passed a function to the 'container' prop, but it returned no valid HTMLElement");
    }
  } else if (container instanceof HTMLElement) {
    element = container;
  } else if (typeof container === "string") {
    element = document.getElementById(container);
    if (!element) {
      throw new Error("react-laag: You've passed element with id '" + container + "' to the 'container' prop, but it returned no valid HTMLElement");
    }
  } else if (GLOBAL_CONTAINER instanceof HTMLElement) {
    return GLOBAL_CONTAINER;
  } else {
    element = document.getElementById(DEFAULT_CONTAINER_ID);
    if (!element) {
      element = document.createElement("div");
      element.id = DEFAULT_CONTAINER_ID;
      element.style.cssText = "\n        position: absolute;\n        top: 0px;\n        left: 0px;\n        right: 0px;\n      ";
      document.body.appendChild(element);
    }
  }
  return element;
}
var _excluded = ["size", "angle", "borderWidth", "borderColor", "roundness", "backgroundColor", "layerSide", "style"];
var LEFT = "left";
var TOP = "top";
var BOTTOM = "bottom";
var RIGHT = "right";
function getWidthBasedOnAngle(angle, size) {
  return Math.tan(angle * (Math.PI / 180)) * size;
}
function getViewBox(sizeA, sizeB, side, borderWidth) {
  var _map;
  var map = (_map = {}, _map[BOTTOM] = "0 " + -borderWidth + " " + sizeB + " " + sizeA, _map[TOP] = "0 0 " + sizeB + " " + (sizeA + borderWidth), _map[RIGHT] = -borderWidth + " 0 " + sizeA + " " + sizeB, _map[LEFT] = "0 0 " + (sizeA + borderWidth) + " " + sizeB, _map);
  return map[side.prop];
}
function getTrianglePath(sizeA, sizeB, side, roundness, angle) {
  var _BOTTOM$TOP$RIGHT$LEF, _BOTTOM$TOP$RIGHT$LEF2, _BOTTOM$TOP$RIGHT$LEF3;
  var relativeRoundness = roundness / 10 * sizeA * 2;
  var A2 = (_BOTTOM$TOP$RIGHT$LEF = {}, _BOTTOM$TOP$RIGHT$LEF[BOTTOM] = [0, sizeA], _BOTTOM$TOP$RIGHT$LEF[TOP] = [0, 0], _BOTTOM$TOP$RIGHT$LEF[RIGHT] = [sizeA, sizeB], _BOTTOM$TOP$RIGHT$LEF[LEFT] = [0, sizeB], _BOTTOM$TOP$RIGHT$LEF)[side.prop].join(" ");
  var B2 = side.isHorizontal ? "V 0" : "H " + sizeB;
  var cPoint = sizeB / 2;
  var c1A = sizeB / 2 + getWidthBasedOnAngle(angle, sizeA / 8);
  var c1B = sizeA / 8;
  var C2 = (_BOTTOM$TOP$RIGHT$LEF2 = {}, _BOTTOM$TOP$RIGHT$LEF2[BOTTOM] = ["C", c1A, c1B, cPoint + relativeRoundness, 0, cPoint, 0], _BOTTOM$TOP$RIGHT$LEF2[TOP] = ["C", c1A, sizeA - c1B, cPoint + relativeRoundness, sizeA, cPoint, sizeA], _BOTTOM$TOP$RIGHT$LEF2[RIGHT] = ["C", c1B, sizeB - c1A, 0, cPoint - relativeRoundness, 0, cPoint], _BOTTOM$TOP$RIGHT$LEF2[LEFT] = ["C", sizeA - c1B, sizeB - c1A, sizeA, cPoint - relativeRoundness, sizeA, cPoint], _BOTTOM$TOP$RIGHT$LEF2)[side.prop].join(" ");
  var d1A = sizeB / 2 - getWidthBasedOnAngle(angle, sizeA / 8);
  var d1B = sizeA / 8;
  var D2 = (_BOTTOM$TOP$RIGHT$LEF3 = {}, _BOTTOM$TOP$RIGHT$LEF3[BOTTOM] = ["C", cPoint - relativeRoundness, 0, d1A, d1B, A2], _BOTTOM$TOP$RIGHT$LEF3[TOP] = ["C", cPoint - relativeRoundness, sizeA, d1A, sizeA - d1B, A2], _BOTTOM$TOP$RIGHT$LEF3[RIGHT] = ["C", 0, cPoint + relativeRoundness, d1B, sizeB - d1A, A2], _BOTTOM$TOP$RIGHT$LEF3[LEFT] = ["C", sizeA, cPoint + relativeRoundness, sizeA - d1B, sizeB - d1A, A2], _BOTTOM$TOP$RIGHT$LEF3)[side.prop].join(" ");
  return ["M", A2, B2, C2, D2].join(" ");
}
function getBorderMaskPath(sizeA, sizeB, borderWidth, side, angle) {
  var borderOffset = getWidthBasedOnAngle(angle, borderWidth);
  var _ref = !side.isPush ? [sizeA, sizeA - borderWidth] : [0, borderWidth], A2 = _ref[0], B2 = _ref[1];
  if (side.isHorizontal) {
    return ["M", A2, borderWidth, "V", sizeB - borderWidth, "L", B2, sizeB - borderWidth - borderOffset, "V", borderOffset + borderWidth, "Z"].join(" ");
  }
  return ["M", borderWidth, A2, "H", sizeB - borderWidth, "L", sizeB - borderWidth - borderOffset, B2, "H", borderOffset + borderWidth, "Z"].join(" ");
}
var Arrow = /* @__PURE__ */ (0, import_react8.forwardRef)(function Arrow2(_ref2, ref) {
  var _ref2$size = _ref2.size, size = _ref2$size === void 0 ? 8 : _ref2$size, _ref2$angle = _ref2.angle, angle = _ref2$angle === void 0 ? 45 : _ref2$angle, _ref2$borderWidth = _ref2.borderWidth, borderWidth = _ref2$borderWidth === void 0 ? 0 : _ref2$borderWidth, _ref2$borderColor = _ref2.borderColor, borderColor = _ref2$borderColor === void 0 ? "black" : _ref2$borderColor, _ref2$roundness = _ref2.roundness, roundness = _ref2$roundness === void 0 ? 0 : _ref2$roundness, _ref2$backgroundColor = _ref2.backgroundColor, backgroundColor = _ref2$backgroundColor === void 0 ? "white" : _ref2$backgroundColor, _ref2$layerSide = _ref2.layerSide, layerSide = _ref2$layerSide === void 0 ? "top" : _ref2$layerSide, _ref2$style = _ref2.style, style = _ref2$style === void 0 ? {} : _ref2$style, rest = _objectWithoutPropertiesLoose(_ref2, _excluded);
  if (layerSide === "center") {
    return null;
  }
  var side = BoundSide[layerSide];
  var sizeA = size;
  var sizeB = getWidthBasedOnAngle(angle, size) * 2;
  var maxSize = Math.max(sizeA, sizeB);
  return (0, import_react8.createElement)("svg", _extends2({
    ref
  }, rest, {
    style: _extends2({}, style, {
      transform: "translate" + (side.isHorizontal ? "Y" : "X") + "(-50%)"
    }),
    width: maxSize,
    height: maxSize,
    preserveAspectRatio: side.isPush ? "xMinYMin" : "xMaxYMax",
    viewBox: getViewBox(sizeA, sizeB, side, borderWidth)
  }), (0, import_react8.createElement)("path", {
    fill: backgroundColor,
    strokeWidth: borderWidth,
    stroke: borderColor,
    d: getTrianglePath(sizeA, sizeB, side, roundness, angle)
  }), (0, import_react8.createElement)("path", {
    fill: backgroundColor,
    d: getBorderMaskPath(sizeA, sizeB, borderWidth, side, angle)
  }));
});
var Status;
(function(Status2) {
  Status2[Status2["ENTERING"] = 0] = "ENTERING";
  Status2[Status2["LEAVING"] = 1] = "LEAVING";
  Status2[Status2["IDLE"] = 2] = "IDLE";
})(Status || (Status = {}));

// ../../ui/node_modules/@react-aria/button/dist/module.js
init_react();

// ../../ui/node_modules/@react-aria/focus/dist/module.js
init_react();
var import_react9 = __toESM(require_react());
function $parcel$export7(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $9bf71ea28793e738$exports = {};
$parcel$export7($9bf71ea28793e738$exports, "FocusScope", () => $9bf71ea28793e738$export$20e40289641fbbb6);
$parcel$export7($9bf71ea28793e738$exports, "useFocusManager", () => $9bf71ea28793e738$export$10c5169755ce7bd7);
$parcel$export7($9bf71ea28793e738$exports, "getFocusableTreeWalker", () => $9bf71ea28793e738$export$2d6ec8fc375ceafa);
$parcel$export7($9bf71ea28793e738$exports, "createFocusManager", () => $9bf71ea28793e738$export$c5251b9e124bf29);
var $6a99195332edec8b$exports = {};
$parcel$export7($6a99195332edec8b$exports, "focusSafely", () => $6a99195332edec8b$export$80f3e147d781571c);
function $6a99195332edec8b$export$80f3e147d781571c(element) {
  if ($507fabe10e71c6fb$export$630ff653c5ada6a9() === "virtual") {
    let lastFocusedElement = document.activeElement;
    $bbed8b41f857bcc0$export$24490316f764c430(() => {
      if (document.activeElement === lastFocusedElement && document.contains(element))
        $7215afc6de606d6b$export$de79e2c695e052f3(element);
    });
  } else
    $7215afc6de606d6b$export$de79e2c695e052f3(element);
}
function $645f2e67b85a24c9$var$isStyleVisible(element) {
  if (!(element instanceof HTMLElement) && !(element instanceof SVGElement))
    return false;
  let { display, visibility } = element.style;
  let isVisible = display !== "none" && visibility !== "hidden" && visibility !== "collapse";
  if (isVisible) {
    const { getComputedStyle } = element.ownerDocument.defaultView;
    let { display: computedDisplay, visibility: computedVisibility } = getComputedStyle(element);
    isVisible = computedDisplay !== "none" && computedVisibility !== "hidden" && computedVisibility !== "collapse";
  }
  return isVisible;
}
function $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) {
  return !element.hasAttribute("hidden") && (element.nodeName === "DETAILS" && childElement && childElement.nodeName !== "SUMMARY" ? element.hasAttribute("open") : true);
}
function $645f2e67b85a24c9$export$e989c0fffaa6b27a(element, childElement) {
  return element.nodeName !== "#comment" && $645f2e67b85a24c9$var$isStyleVisible(element) && $645f2e67b85a24c9$var$isAttributeVisible(element, childElement) && (!element.parentElement || $645f2e67b85a24c9$export$e989c0fffaa6b27a(element.parentElement, element));
}
var $9bf71ea28793e738$var$FocusContext = /* @__PURE__ */ import_react9.default.createContext(null);
var $9bf71ea28793e738$var$activeScope = null;
var $9bf71ea28793e738$var$scopes = /* @__PURE__ */ new Map();
function $9bf71ea28793e738$export$20e40289641fbbb6(props) {
  let { children, contain, restoreFocus, autoFocus } = props;
  let startRef = (0, import_react9.useRef)();
  let endRef = (0, import_react9.useRef)();
  let scopeRef = (0, import_react9.useRef)([]);
  let ctx = (0, import_react9.useContext)($9bf71ea28793e738$var$FocusContext);
  let parentScope = ctx === null || ctx === void 0 ? void 0 : ctx.scopeRef;
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let node = startRef.current.nextSibling;
    let nodes = [];
    while (node && node !== endRef.current) {
      nodes.push(node);
      node = node.nextSibling;
    }
    scopeRef.current = nodes;
  }, [
    children,
    parentScope
  ]);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    $9bf71ea28793e738$var$scopes.set(scopeRef, parentScope);
    return () => {
      if ((scopeRef === $9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope(scopeRef, $9bf71ea28793e738$var$activeScope)) && (!parentScope || $9bf71ea28793e738$var$scopes.has(parentScope)))
        $9bf71ea28793e738$var$activeScope = parentScope;
      $9bf71ea28793e738$var$scopes.delete(scopeRef);
    };
  }, [
    scopeRef,
    parentScope
  ]);
  $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain);
  $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain);
  $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus);
  let focusManager = $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef);
  return /* @__PURE__ */ import_react9.default.createElement($9bf71ea28793e738$var$FocusContext.Provider, {
    value: {
      scopeRef,
      focusManager
    }
  }, /* @__PURE__ */ import_react9.default.createElement("span", {
    "data-focus-scope-start": true,
    hidden: true,
    ref: startRef
  }), children, /* @__PURE__ */ import_react9.default.createElement("span", {
    "data-focus-scope-end": true,
    hidden: true,
    ref: endRef
  }));
}
function $9bf71ea28793e738$export$10c5169755ce7bd7() {
  var ref;
  return (ref = (0, import_react9.useContext)($9bf71ea28793e738$var$FocusContext)) === null || ref === void 0 ? void 0 : ref.focusManager;
}
function $9bf71ea28793e738$var$createFocusManagerForScope(scopeRef) {
  return {
    focusNext(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[0].previousElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = sentinel;
        nextNode = walker.nextNode();
      }
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let scope = scopeRef.current;
      let { from, tabbable, wrap } = opts;
      let node = from || document.activeElement;
      let sentinel = scope[scope.length - 1].nextElementSibling;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable
      }, scope);
      walker.currentNode = $9bf71ea28793e738$var$isElementInScope(node, scope) ? node : sentinel;
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = sentinel;
        previousNode = walker.previousNode();
      }
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable
      }, scope);
      walker.currentNode = scope[0].previousElementSibling;
      let nextNode = walker.nextNode();
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let scope = scopeRef.current;
      let { tabbable } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable
      }, scope);
      walker.currentNode = scope[scope.length - 1].nextElementSibling;
      let previousNode = walker.previousNode();
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    }
  };
}
var $9bf71ea28793e738$var$focusableElements = [
  "input:not([disabled]):not([type=hidden])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "a[href]",
  "area[href]",
  "summary",
  "iframe",
  "object",
  "embed",
  "audio[controls]",
  "video[controls]",
  "[contenteditable]"
];
var $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(":not([hidden]),") + ",[tabindex]:not([disabled]):not([hidden])";
$9bf71ea28793e738$var$focusableElements.push('[tabindex]:not([tabindex="-1"]):not([disabled])');
var $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR = $9bf71ea28793e738$var$focusableElements.join(':not([hidden]):not([tabindex="-1"]),');
function $9bf71ea28793e738$var$getScopeRoot(scope) {
  return scope[0].parentElement;
}
function $9bf71ea28793e738$var$useFocusContainment(scopeRef, contain) {
  let focusedNode = (0, import_react9.useRef)();
  let raf = (0, import_react9.useRef)(null);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let scope1 = scopeRef.current;
    if (!contain)
      return;
    let onKeyDown = (e2) => {
      if (e2.key !== "Tab" || e2.altKey || e2.ctrlKey || e2.metaKey || scopeRef !== $9bf71ea28793e738$var$activeScope)
        return;
      let focusedElement = document.activeElement;
      let scope = scopeRef.current;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scope))
        return;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
        tabbable: true
      }, scope);
      walker.currentNode = focusedElement;
      let nextElement = e2.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!nextElement) {
        walker.currentNode = e2.shiftKey ? scope[scope.length - 1].nextElementSibling : scope[0].previousElementSibling;
        nextElement = e2.shiftKey ? walker.previousNode() : walker.nextNode();
      }
      e2.preventDefault();
      if (nextElement)
        $9bf71ea28793e738$var$focusElement(nextElement, true);
    };
    let onFocus = (e2) => {
      if (!$9bf71ea28793e738$var$activeScope || $9bf71ea28793e738$var$isAncestorScope($9bf71ea28793e738$var$activeScope, scopeRef)) {
        $9bf71ea28793e738$var$activeScope = scopeRef;
        focusedNode.current = e2.target;
      } else if (scopeRef === $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isElementInChildScope(e2.target, scopeRef)) {
        if (focusedNode.current)
          focusedNode.current.focus();
        else if ($9bf71ea28793e738$var$activeScope)
          $9bf71ea28793e738$var$focusFirstInScope($9bf71ea28793e738$var$activeScope.current);
      } else if (scopeRef === $9bf71ea28793e738$var$activeScope)
        focusedNode.current = e2.target;
    };
    let onBlur = (e2) => {
      raf.current = requestAnimationFrame(() => {
        if (scopeRef === $9bf71ea28793e738$var$activeScope && !$9bf71ea28793e738$var$isElementInChildScope(document.activeElement, scopeRef)) {
          $9bf71ea28793e738$var$activeScope = scopeRef;
          focusedNode.current = e2.target;
          focusedNode.current.focus();
        }
      });
    };
    document.addEventListener("keydown", onKeyDown, false);
    document.addEventListener("focusin", onFocus, false);
    scope1.forEach((element) => element.addEventListener("focusin", onFocus, false));
    scope1.forEach((element) => element.addEventListener("focusout", onBlur, false));
    return () => {
      document.removeEventListener("keydown", onKeyDown, false);
      document.removeEventListener("focusin", onFocus, false);
      scope1.forEach((element) => element.removeEventListener("focusin", onFocus, false));
      scope1.forEach((element) => element.removeEventListener("focusout", onBlur, false));
    };
  }, [
    scopeRef,
    contain
  ]);
  (0, import_react9.useEffect)(() => {
    return () => cancelAnimationFrame(raf.current);
  }, [
    raf
  ]);
}
function $9bf71ea28793e738$var$isElementInAnyScope(element) {
  for (let scope of $9bf71ea28793e738$var$scopes.keys()) {
    if ($9bf71ea28793e738$var$isElementInScope(element, scope.current))
      return true;
  }
  return false;
}
function $9bf71ea28793e738$var$isElementInScope(element, scope) {
  return scope.some((node) => node.contains(element));
}
function $9bf71ea28793e738$var$isElementInChildScope(element, scope) {
  for (let s2 of $9bf71ea28793e738$var$scopes.keys()) {
    if ((s2 === scope || $9bf71ea28793e738$var$isAncestorScope(scope, s2)) && $9bf71ea28793e738$var$isElementInScope(element, s2.current))
      return true;
  }
  return false;
}
function $9bf71ea28793e738$var$isAncestorScope(ancestor, scope) {
  let parent = $9bf71ea28793e738$var$scopes.get(scope);
  if (!parent)
    return false;
  if (parent === ancestor)
    return true;
  return $9bf71ea28793e738$var$isAncestorScope(ancestor, parent);
}
function $9bf71ea28793e738$var$focusElement(element, scroll = false) {
  if (element != null && !scroll)
    try {
      $6a99195332edec8b$export$80f3e147d781571c(element);
    } catch (err) {
    }
  else if (element != null)
    try {
      element.focus();
    } catch (err1) {
    }
}
function $9bf71ea28793e738$var$focusFirstInScope(scope) {
  let sentinel = scope[0].previousElementSibling;
  let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa($9bf71ea28793e738$var$getScopeRoot(scope), {
    tabbable: true
  }, scope);
  walker.currentNode = sentinel;
  $9bf71ea28793e738$var$focusElement(walker.nextNode());
}
function $9bf71ea28793e738$var$useAutoFocus(scopeRef, autoFocus) {
  const autoFocusRef = import_react9.default.useRef(autoFocus);
  (0, import_react9.useEffect)(() => {
    if (autoFocusRef.current) {
      $9bf71ea28793e738$var$activeScope = scopeRef;
      if (!$9bf71ea28793e738$var$isElementInScope(document.activeElement, $9bf71ea28793e738$var$activeScope.current))
        $9bf71ea28793e738$var$focusFirstInScope(scopeRef.current);
    }
    autoFocusRef.current = false;
  }, []);
}
function $9bf71ea28793e738$var$useRestoreFocus(scopeRef, restoreFocus, contain) {
  const nodeToRestoreRef = (0, import_react9.useRef)(typeof document !== "undefined" ? document.activeElement : null);
  $f0a04ccd8dbdd83b$export$e5c5a5f917a5871c(() => {
    let nodeToRestore = nodeToRestoreRef.current;
    if (!restoreFocus)
      return;
    let onKeyDown = (e2) => {
      if (e2.key !== "Tab" || e2.altKey || e2.ctrlKey || e2.metaKey)
        return;
      let focusedElement = document.activeElement;
      if (!$9bf71ea28793e738$var$isElementInScope(focusedElement, scopeRef.current))
        return;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(document.body, {
        tabbable: true
      });
      walker.currentNode = focusedElement;
      let nextElement = e2.shiftKey ? walker.previousNode() : walker.nextNode();
      if (!document.body.contains(nodeToRestore) || nodeToRestore === document.body)
        nodeToRestore = null;
      if ((!nextElement || !$9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current)) && nodeToRestore) {
        walker.currentNode = nodeToRestore;
        do
          nextElement = e2.shiftKey ? walker.previousNode() : walker.nextNode();
        while ($9bf71ea28793e738$var$isElementInScope(nextElement, scopeRef.current));
        e2.preventDefault();
        e2.stopPropagation();
        if (nextElement)
          $9bf71ea28793e738$var$focusElement(nextElement, true);
        else if (!$9bf71ea28793e738$var$isElementInAnyScope(nodeToRestore))
          focusedElement.blur();
        else
          $9bf71ea28793e738$var$focusElement(nodeToRestore, true);
      }
    };
    if (!contain)
      document.addEventListener("keydown", onKeyDown, true);
    return () => {
      if (!contain)
        document.removeEventListener("keydown", onKeyDown, true);
      if (restoreFocus && nodeToRestore && $9bf71ea28793e738$var$isElementInScope(document.activeElement, scopeRef.current))
        requestAnimationFrame(() => {
          if (document.body.contains(nodeToRestore))
            $9bf71ea28793e738$var$focusElement(nodeToRestore);
        });
    };
  }, [
    scopeRef,
    restoreFocus,
    contain
  ]);
}
function $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, opts, scope) {
  let selector = (opts === null || opts === void 0 ? void 0 : opts.tabbable) ? $9bf71ea28793e738$var$TABBABLE_ELEMENT_SELECTOR : $9bf71ea28793e738$var$FOCUSABLE_ELEMENT_SELECTOR;
  let walker = document.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, {
    acceptNode(node) {
      var ref;
      if (opts === null || opts === void 0 ? void 0 : (ref = opts.from) === null || ref === void 0 ? void 0 : ref.contains(node))
        return NodeFilter.FILTER_REJECT;
      if (node.matches(selector) && $645f2e67b85a24c9$export$e989c0fffaa6b27a(node) && (!scope || $9bf71ea28793e738$var$isElementInScope(node, scope)))
        return NodeFilter.FILTER_ACCEPT;
      return NodeFilter.FILTER_SKIP;
    }
  });
  if (opts === null || opts === void 0 ? void 0 : opts.from)
    walker.currentNode = opts.from;
  return walker;
}
function $9bf71ea28793e738$export$c5251b9e124bf29(ref) {
  return {
    focusNext(opts = {}) {
      let root = ref.current;
      let { from, tabbable, wrap } = opts;
      let node = from || document.activeElement;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable
      });
      if (root.contains(node))
        walker.currentNode = node;
      let nextNode = walker.nextNode();
      if (!nextNode && wrap) {
        walker.currentNode = root;
        nextNode = walker.nextNode();
      }
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusPrevious(opts = {}) {
      let root = ref.current;
      let { from, tabbable, wrap } = opts;
      let node = from || document.activeElement;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable
      });
      if (root.contains(node))
        walker.currentNode = node;
      else {
        let next = $9bf71ea28793e738$var$last(walker);
        if (next)
          $9bf71ea28793e738$var$focusElement(next, true);
        return next;
      }
      let previousNode = walker.previousNode();
      if (!previousNode && wrap) {
        walker.currentNode = root;
        previousNode = $9bf71ea28793e738$var$last(walker);
      }
      if (previousNode)
        $9bf71ea28793e738$var$focusElement(previousNode, true);
      return previousNode;
    },
    focusFirst(opts = {}) {
      let root = ref.current;
      let { tabbable } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable
      });
      let nextNode = walker.nextNode();
      if (nextNode)
        $9bf71ea28793e738$var$focusElement(nextNode, true);
      return nextNode;
    },
    focusLast(opts = {}) {
      let root = ref.current;
      let { tabbable } = opts;
      let walker = $9bf71ea28793e738$export$2d6ec8fc375ceafa(root, {
        tabbable
      });
      let next = $9bf71ea28793e738$var$last(walker);
      if (next)
        $9bf71ea28793e738$var$focusElement(next, true);
      return next;
    }
  };
}
function $9bf71ea28793e738$var$last(walker) {
  let next;
  let last;
  do {
    last = walker.lastChild();
    if (last)
      next = last;
  } while (last);
  return next;
}
var $907718708eab68af$exports = {};
$parcel$export7($907718708eab68af$exports, "FocusRing", () => $907718708eab68af$export$1a38b4ad7f578e1d);
var $f7dceffc5ad7768b$exports = {};
$parcel$export7($f7dceffc5ad7768b$exports, "useFocusRing", () => $f7dceffc5ad7768b$export$4e328f61c538687f);
function $f7dceffc5ad7768b$export$4e328f61c538687f(props = {}) {
  let { autoFocus = false, isTextInput, within } = props;
  let state = (0, import_react9.useRef)({
    isFocused: false,
    isFocusVisible: autoFocus || $507fabe10e71c6fb$export$b9b3dfddab17db27()
  }).current;
  let [isFocused1, setFocused] = (0, import_react9.useState)(false);
  let [isFocusVisibleState, setFocusVisible] = (0, import_react9.useState)(() => state.isFocused && state.isFocusVisible);
  let updateState = () => setFocusVisible(state.isFocused && state.isFocusVisible);
  let onFocusChange = (isFocused) => {
    state.isFocused = isFocused;
    setFocused(isFocused);
    updateState();
  };
  $507fabe10e71c6fb$export$ec71b4b83ac08ec3((isFocusVisible) => {
    state.isFocusVisible = isFocusVisible;
    updateState();
  }, [], {
    isTextInput
  });
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled: within,
    onFocusChange
  });
  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !within,
    onFocusWithinChange: onFocusChange
  });
  return {
    isFocused: isFocused1,
    isFocusVisible: state.isFocused && isFocusVisibleState,
    focusProps: within ? focusWithinProps : focusProps
  };
}
function $907718708eab68af$export$1a38b4ad7f578e1d(props) {
  let { children, focusClass, focusRingClass } = props;
  let { isFocused, isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f(props);
  let child = import_react9.default.Children.only(children);
  return /* @__PURE__ */ import_react9.default.cloneElement(child, $3ef42575df84b30b$export$9d1611c77c2fe928(child.props, {
    ...focusProps,
    className: clsx_m_default({
      [focusClass || ""]: isFocused,
      [focusRingClass || ""]: isFocusVisible
    })
  }));
}
var $e6afbd83fe6ebbd2$exports = {};
$parcel$export7($e6afbd83fe6ebbd2$exports, "FocusableProvider", () => $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5);
$parcel$export7($e6afbd83fe6ebbd2$exports, "useFocusable", () => $e6afbd83fe6ebbd2$export$4c014de7c8940b4c);
var $e6afbd83fe6ebbd2$var$FocusableContext = /* @__PURE__ */ import_react9.default.createContext(null);
function $e6afbd83fe6ebbd2$var$useFocusableContext(ref) {
  let context = (0, import_react9.useContext)($e6afbd83fe6ebbd2$var$FocusableContext) || {};
  $e7801be82b4b2a53$export$4debdb1a3f0fa79e(context, ref);
  let { ref: _2, ...otherProps } = context;
  return otherProps;
}
function $e6afbd83fe6ebbd2$var$FocusableProvider(props, ref) {
  let { children, ...otherProps } = props;
  let context = {
    ...otherProps,
    ref
  };
  return /* @__PURE__ */ import_react9.default.createElement($e6afbd83fe6ebbd2$var$FocusableContext.Provider, {
    value: context
  }, children);
}
var $e6afbd83fe6ebbd2$export$13f3202a3e5ddd5 = /* @__PURE__ */ import_react9.default.forwardRef($e6afbd83fe6ebbd2$var$FocusableProvider);
function $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, domRef) {
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6(props);
  let { keyboardProps } = $46d819fcbaf35654$export$8f71654801c2f7cd(props);
  let interactions = $3ef42575df84b30b$export$9d1611c77c2fe928(focusProps, keyboardProps);
  let domProps = $e6afbd83fe6ebbd2$var$useFocusableContext(domRef);
  let interactionProps = props.isDisabled ? {} : domProps;
  let autoFocusRef = (0, import_react9.useRef)(props.autoFocus);
  (0, import_react9.useEffect)(() => {
    if (autoFocusRef.current && domRef.current)
      domRef.current.focus();
    autoFocusRef.current = false;
  }, []);
  return {
    focusableProps: $3ef42575df84b30b$export$9d1611c77c2fe928({
      ...interactions,
      tabIndex: props.excludeFromTabOrder && !props.isDisabled ? -1 : void 0
    }, interactionProps)
  };
}

// ../../ui/node_modules/@react-aria/button/dist/module.js
function $parcel$export8(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $701a24aa0da5b062$exports = {};
$parcel$export8($701a24aa0da5b062$exports, "useButton", () => $701a24aa0da5b062$export$ea18c227d4417cc3);
function $701a24aa0da5b062$export$ea18c227d4417cc3(props, ref) {
  let {
    elementType = "button",
    isDisabled,
    onPress,
    onPressStart,
    onPressEnd,
    onPressChange,
    preventFocusOnPress,
    allowFocusWhenDisabled,
    onClick: deprecatedOnClick,
    href,
    target,
    rel,
    type = "button"
  } = props;
  let additionalProps;
  if (elementType === "button")
    additionalProps = {
      type,
      disabled: isDisabled
    };
  else
    additionalProps = {
      role: "button",
      tabIndex: isDisabled ? void 0 : 0,
      href: elementType === "a" && isDisabled ? void 0 : href,
      target: elementType === "a" ? target : void 0,
      type: elementType === "input" ? type : void 0,
      disabled: elementType === "input" ? isDisabled : void 0,
      "aria-disabled": !isDisabled || elementType === "input" ? void 0 : isDisabled,
      rel: elementType === "a" ? rel : void 0
    };
  let { pressProps, isPressed } = $f6c31cce2adf654f$export$45712eceda6fad21({
    onPressStart,
    onPressEnd,
    onPressChange,
    onPress,
    isDisabled,
    preventFocusOnPress,
    ref
  });
  let { focusableProps } = $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, ref);
  if (allowFocusWhenDisabled)
    focusableProps.tabIndex = isDisabled ? -1 : focusableProps.tabIndex;
  let buttonProps = $3ef42575df84b30b$export$9d1611c77c2fe928(focusableProps, pressProps, $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  }));
  return {
    isPressed,
    buttonProps: $3ef42575df84b30b$export$9d1611c77c2fe928(additionalProps, buttonProps, {
      "aria-haspopup": props["aria-haspopup"],
      "aria-expanded": props["aria-expanded"],
      "aria-controls": props["aria-controls"],
      "aria-pressed": props["aria-pressed"],
      onClick: (e2) => {
        if (deprecatedOnClick) {
          deprecatedOnClick(e2);
          console.warn("onClick is deprecated, please use onPress");
        }
      }
    })
  };
}
var $55f54f7887471b58$exports = {};
$parcel$export8($55f54f7887471b58$exports, "useToggleButton", () => $55f54f7887471b58$export$51e84d46ca0bc451);
function $55f54f7887471b58$export$51e84d46ca0bc451(props, state, ref) {
  const { isSelected } = state;
  const { isPressed, buttonProps } = $701a24aa0da5b062$export$ea18c227d4417cc3({
    ...props,
    onPress: $ff5963eb1fccf552$export$e08e3b67e392101e(state.toggle, props.onPress)
  }, ref);
  return {
    isPressed,
    buttonProps: $3ef42575df84b30b$export$9d1611c77c2fe928(buttonProps, {
      "aria-pressed": isSelected
    })
  };
}

// ../../ui/node_modules/@loadable/component/dist/loadable.esm.js
init_react();
var import_react10 = __toESM(require_react());

// ../../ui/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
init_react();
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}

// ../../ui/node_modules/@babel/runtime/helpers/esm/extends.js
init_react();
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}

// ../../ui/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
init_react();
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}

// ../../ui/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
init_react();

// ../../ui/node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
init_react();
function _setPrototypeOf2(o2, p2) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf3(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf2(o2, p2);
}

// ../../ui/node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}

// ../../ui/node_modules/@loadable/component/dist/loadable.esm.js
var import_react_is = __toESM(require_react_is());
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
function invariant(condition, message) {
  if (condition)
    return;
  var error = new Error("loadable: " + message);
  error.framesToPop = 1;
  error.name = "Invariant Violation";
  throw error;
}
var Context = /* @__PURE__ */ import_react10.default.createContext();
var LOADABLE_SHARED = {
  initialChunks: {}
};
var STATUS_PENDING = "PENDING";
var STATUS_RESOLVED = "RESOLVED";
var STATUS_REJECTED = "REJECTED";
function resolveConstructor(ctor) {
  if (typeof ctor === "function") {
    return {
      requireAsync: ctor,
      resolve: function resolve() {
        return void 0;
      },
      chunkName: function chunkName() {
        return void 0;
      }
    };
  }
  return ctor;
}
var withChunkExtractor = function withChunkExtractor2(Component) {
  var LoadableWithChunkExtractor = function LoadableWithChunkExtractor2(props) {
    return import_react10.default.createElement(Context.Consumer, null, function(extractor) {
      return import_react10.default.createElement(Component, Object.assign({
        __chunkExtractor: extractor
      }, props));
    });
  };
  if (Component.displayName) {
    LoadableWithChunkExtractor.displayName = Component.displayName + "WithChunkExtractor";
  }
  return LoadableWithChunkExtractor;
};
var identity = function identity2(v2) {
  return v2;
};
function createLoadable(_ref) {
  var _ref$defaultResolveCo = _ref.defaultResolveComponent, defaultResolveComponent2 = _ref$defaultResolveCo === void 0 ? identity : _ref$defaultResolveCo, _render = _ref.render, onLoad2 = _ref.onLoad;
  function loadable2(loadableConstructor, options) {
    if (options === void 0) {
      options = {};
    }
    var ctor = resolveConstructor(loadableConstructor);
    var cache = {};
    function _getCacheKey(props) {
      if (options.cacheKey) {
        return options.cacheKey(props);
      }
      if (ctor.resolve) {
        return ctor.resolve(props);
      }
      return "static";
    }
    function resolve(module, props, Loadable2) {
      var Component = options.resolveComponent ? options.resolveComponent(module, props) : defaultResolveComponent2(module);
      if (options.resolveComponent && !(0, import_react_is.isValidElementType)(Component)) {
        throw new Error("resolveComponent returned something that is not a React component!");
      }
      (0, import_hoist_non_react_statics.default)(Loadable2, Component, {
        preload: true
      });
      return Component;
    }
    var cachedLoad = function cachedLoad2(props) {
      var cacheKey = _getCacheKey(props);
      var promise = cache[cacheKey];
      if (!promise || promise.status === STATUS_REJECTED) {
        promise = ctor.requireAsync(props);
        promise.status = STATUS_PENDING;
        cache[cacheKey] = promise;
        promise.then(function() {
          promise.status = STATUS_RESOLVED;
        }, function(error) {
          console.error("loadable-components: failed to asynchronously load component", {
            fileName: ctor.resolve(props),
            chunkName: ctor.chunkName(props),
            error: error ? error.message : error
          });
          promise.status = STATUS_REJECTED;
        });
      }
      return promise;
    };
    var InnerLoadable = /* @__PURE__ */ function(_React$Component) {
      _inheritsLoose2(InnerLoadable2, _React$Component);
      InnerLoadable2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
        var cacheKey = _getCacheKey(props);
        return _extends3({}, state, {
          cacheKey,
          loading: state.loading || state.cacheKey !== cacheKey
        });
      };
      function InnerLoadable2(props) {
        var _this;
        _this = _React$Component.call(this, props) || this;
        _this.state = {
          result: null,
          error: null,
          loading: true,
          cacheKey: _getCacheKey(props)
        };
        invariant(!props.__chunkExtractor || ctor.requireSync, "SSR requires `@loadable/babel-plugin`, please install it");
        if (props.__chunkExtractor) {
          if (options.ssr === false) {
            return _assertThisInitialized(_this);
          }
          ctor.requireAsync(props)["catch"](function() {
            return null;
          });
          _this.loadSync();
          props.__chunkExtractor.addChunk(ctor.chunkName(props));
          return _assertThisInitialized(_this);
        }
        if (options.ssr !== false && (ctor.isReady && ctor.isReady(props) || ctor.chunkName && LOADABLE_SHARED.initialChunks[ctor.chunkName(props)])) {
          _this.loadSync();
        }
        return _this;
      }
      var _proto = InnerLoadable2.prototype;
      _proto.componentDidMount = function componentDidMount() {
        this.mounted = true;
        var cachedPromise = this.getCache();
        if (cachedPromise && cachedPromise.status === STATUS_REJECTED) {
          this.setCache();
        }
        if (this.state.loading) {
          this.loadAsync();
        }
      };
      _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {
        if (prevState.cacheKey !== this.state.cacheKey) {
          this.loadAsync();
        }
      };
      _proto.componentWillUnmount = function componentWillUnmount() {
        this.mounted = false;
      };
      _proto.safeSetState = function safeSetState(nextState, callback) {
        if (this.mounted) {
          this.setState(nextState, callback);
        }
      };
      _proto.getCacheKey = function getCacheKey() {
        return _getCacheKey(this.props);
      };
      _proto.getCache = function getCache() {
        return cache[this.getCacheKey()];
      };
      _proto.setCache = function setCache(value) {
        if (value === void 0) {
          value = void 0;
        }
        cache[this.getCacheKey()] = value;
      };
      _proto.triggerOnLoad = function triggerOnLoad() {
        var _this2 = this;
        if (onLoad2) {
          setTimeout(function() {
            onLoad2(_this2.state.result, _this2.props);
          });
        }
      };
      _proto.loadSync = function loadSync() {
        if (!this.state.loading)
          return;
        try {
          var loadedModule = ctor.requireSync(this.props);
          var result = resolve(loadedModule, this.props, Loadable);
          this.state.result = result;
          this.state.loading = false;
        } catch (error) {
          console.error("loadable-components: failed to synchronously load component, which expected to be available", {
            fileName: ctor.resolve(this.props),
            chunkName: ctor.chunkName(this.props),
            error: error ? error.message : error
          });
          this.state.error = error;
        }
      };
      _proto.loadAsync = function loadAsync() {
        var _this3 = this;
        var promise = this.resolveAsync();
        promise.then(function(loadedModule) {
          var result = resolve(loadedModule, _this3.props, Loadable);
          _this3.safeSetState({
            result,
            loading: false
          }, function() {
            return _this3.triggerOnLoad();
          });
        })["catch"](function(error) {
          return _this3.safeSetState({
            error,
            loading: false
          });
        });
        return promise;
      };
      _proto.resolveAsync = function resolveAsync() {
        var _this$props = this.props, __chunkExtractor = _this$props.__chunkExtractor, forwardedRef = _this$props.forwardedRef, props = _objectWithoutPropertiesLoose2(_this$props, ["__chunkExtractor", "forwardedRef"]);
        return cachedLoad(props);
      };
      _proto.render = function render3() {
        var _this$props2 = this.props, forwardedRef = _this$props2.forwardedRef, propFallback = _this$props2.fallback, __chunkExtractor = _this$props2.__chunkExtractor, props = _objectWithoutPropertiesLoose2(_this$props2, ["forwardedRef", "fallback", "__chunkExtractor"]);
        var _this$state = this.state, error = _this$state.error, loading = _this$state.loading, result = _this$state.result;
        if (options.suspense) {
          var cachedPromise = this.getCache() || this.loadAsync();
          if (cachedPromise.status === STATUS_PENDING) {
            throw this.loadAsync();
          }
        }
        if (error) {
          throw error;
        }
        var fallback = propFallback || options.fallback || null;
        if (loading) {
          return fallback;
        }
        return _render({
          fallback,
          result,
          options,
          props: _extends3({}, props, {
            ref: forwardedRef
          })
        });
      };
      return InnerLoadable2;
    }(import_react10.default.Component);
    var EnhancedInnerLoadable = withChunkExtractor(InnerLoadable);
    var Loadable = import_react10.default.forwardRef(function(props, ref) {
      return import_react10.default.createElement(EnhancedInnerLoadable, Object.assign({
        forwardedRef: ref
      }, props));
    });
    Loadable.displayName = "Loadable";
    Loadable.preload = function(props) {
      Loadable.load(props);
    };
    Loadable.load = function(props) {
      return cachedLoad(props);
    };
    return Loadable;
  }
  function lazy2(ctor, options) {
    return loadable2(ctor, _extends3({}, options, {
      suspense: true
    }));
  }
  return {
    loadable: loadable2,
    lazy: lazy2
  };
}
function defaultResolveComponent(loadedModule) {
  return loadedModule.__esModule ? loadedModule["default"] : loadedModule["default"] || loadedModule;
}
var _createLoadable = /* @__PURE__ */ createLoadable({
  defaultResolveComponent,
  render: function render(_ref) {
    var Component = _ref.result, props = _ref.props;
    return import_react10.default.createElement(Component, props);
  }
});
var loadable = _createLoadable.loadable;
var lazy = _createLoadable.lazy;
var _createLoadable$1 = /* @__PURE__ */ createLoadable({
  onLoad: function onLoad(result, props) {
    if (result && props.forwardedRef) {
      if (typeof props.forwardedRef === "function") {
        props.forwardedRef(result);
      } else {
        props.forwardedRef.current = result;
      }
    }
  },
  render: function render2(_ref) {
    var result = _ref.result, props = _ref.props;
    if (props.children) {
      return props.children(result);
    }
    return null;
  }
});
var loadable$1 = _createLoadable$1.loadable;
var lazy$1 = _createLoadable$1.lazy;
var loadable$2 = loadable;
loadable$2.lib = loadable$1;
var lazy$2 = lazy;
lazy$2.lib = lazy$1;
var loadable_esm_default = loadable$2;

// ../../ui/node_modules/@react-aria/textfield/dist/module.js
init_react();

// ../../ui/node_modules/@react-aria/label/dist/module.js
init_react();
function $parcel$export9(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $2baaea4c71418dea$exports = {};
$parcel$export9($2baaea4c71418dea$exports, "useField", () => $2baaea4c71418dea$export$294aa081a6c6f55d);
var $d191a55c9702f145$exports = {};
$parcel$export9($d191a55c9702f145$exports, "useLabel", () => $d191a55c9702f145$export$8467354a121f1b9f);
function $d191a55c9702f145$export$8467354a121f1b9f(props) {
  let { id, label, "aria-labelledby": ariaLabelledby, "aria-label": ariaLabel, labelElementType = "label" } = props;
  id = $bdb11010cef70236$export$f680877a34711e37(id);
  let labelId = $bdb11010cef70236$export$f680877a34711e37();
  let labelProps = {};
  if (label) {
    ariaLabelledby = ariaLabelledby ? `${ariaLabelledby} ${labelId}` : labelId;
    labelProps = {
      id: labelId,
      htmlFor: labelElementType === "label" ? id : void 0
    };
  } else if (!ariaLabelledby && !ariaLabel)
    console.warn("If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility");
  let fieldProps = $313b98861ee5dd6c$export$d6875122194c7b44({
    id,
    "aria-label": ariaLabel,
    "aria-labelledby": ariaLabelledby
  });
  return {
    labelProps,
    fieldProps
  };
}
function $2baaea4c71418dea$export$294aa081a6c6f55d(props) {
  let { description, errorMessage, validationState } = props;
  let { labelProps, fieldProps } = $d191a55c9702f145$export$8467354a121f1b9f(props);
  let descriptionId = $bdb11010cef70236$export$b4cc09c592e8fdb8([
    Boolean(description),
    Boolean(errorMessage),
    validationState
  ]);
  let errorMessageId = $bdb11010cef70236$export$b4cc09c592e8fdb8([
    Boolean(description),
    Boolean(errorMessage),
    validationState
  ]);
  fieldProps = $3ef42575df84b30b$export$9d1611c77c2fe928(fieldProps, {
    "aria-describedby": [
      descriptionId,
      errorMessageId,
      props["aria-describedby"]
    ].filter(Boolean).join(" ") || void 0
  });
  return {
    labelProps,
    fieldProps,
    descriptionProps: {
      id: descriptionId
    },
    errorMessageProps: {
      id: errorMessageId
    }
  };
}

// ../../ui/node_modules/@react-aria/textfield/dist/module.js
var import_react11 = __toESM(require_react());
function $parcel$export10(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $2d73ec29415bd339$exports = {};
$parcel$export10($2d73ec29415bd339$exports, "useTextField", () => $2d73ec29415bd339$export$712718f7aec83d5);
function $2d73ec29415bd339$export$712718f7aec83d5(props, ref) {
  let { inputElementType = "input", isDisabled = false, isRequired = false, isReadOnly = false, validationState, type = "text", onChange = () => {
  } } = props;
  let { focusableProps } = $e6afbd83fe6ebbd2$export$4c014de7c8940b4c(props, ref);
  let { labelProps, fieldProps, descriptionProps, errorMessageProps } = $2baaea4c71418dea$export$294aa081a6c6f55d(props);
  let domProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props, {
    labelable: true
  });
  const inputOnlyProps = {
    type,
    pattern: props.pattern
  };
  return {
    labelProps,
    inputProps: $3ef42575df84b30b$export$9d1611c77c2fe928(domProps, inputElementType === "input" && inputOnlyProps, {
      disabled: isDisabled,
      readOnly: isReadOnly,
      "aria-required": isRequired || void 0,
      "aria-invalid": validationState === "invalid" || void 0,
      "aria-errormessage": props["aria-errormessage"],
      "aria-activedescendant": props["aria-activedescendant"],
      "aria-autocomplete": props["aria-autocomplete"],
      "aria-haspopup": props["aria-haspopup"],
      value: props.value,
      defaultValue: props.value ? void 0 : props.defaultValue,
      onChange: (e2) => onChange(e2.target.value),
      autoComplete: props.autoComplete,
      maxLength: props.maxLength,
      minLength: props.minLength,
      name: props.name,
      placeholder: props.placeholder,
      inputMode: props.inputMode,
      onCopy: props.onCopy,
      onCut: props.onCut,
      onPaste: props.onPaste,
      onCompositionEnd: props.onCompositionEnd,
      onCompositionStart: props.onCompositionStart,
      onCompositionUpdate: props.onCompositionUpdate,
      onSelect: props.onSelect,
      onBeforeInput: props.onBeforeInput,
      onInput: props.onInput,
      ...focusableProps,
      ...fieldProps
    }),
    descriptionProps,
    errorMessageProps
  };
}
var $d841c8010a73d545$exports = {};
$parcel$export10($d841c8010a73d545$exports, "useFormattedTextField", () => $d841c8010a73d545$export$4f384c9210e583c3);
function $d841c8010a73d545$var$supportsNativeBeforeInputEvent() {
  return typeof window !== "undefined" && window.InputEvent && typeof InputEvent.prototype.getTargetRanges === "function";
}
function $d841c8010a73d545$export$4f384c9210e583c3(props, state1, inputRef) {
  let stateRef = (0, import_react11.useRef)(state1);
  stateRef.current = state1;
  (0, import_react11.useEffect)(() => {
    if (!$d841c8010a73d545$var$supportsNativeBeforeInputEvent())
      return;
    let input = inputRef.current;
    let onBeforeInput = (e2) => {
      let state = stateRef.current;
      let nextValue;
      switch (e2.inputType) {
        case "historyUndo":
        case "historyRedo":
          return;
        case "deleteContent":
        case "deleteByCut":
        case "deleteByDrag":
          nextValue = input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
          break;
        case "deleteContentForward":
          nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd + 1) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
          break;
        case "deleteContentBackward":
          nextValue = input.selectionEnd === input.selectionStart ? input.value.slice(0, input.selectionStart - 1) + input.value.slice(input.selectionStart) : input.value.slice(0, input.selectionStart) + input.value.slice(input.selectionEnd);
          break;
        case "deleteSoftLineBackward":
        case "deleteHardLineBackward":
          nextValue = input.value.slice(input.selectionStart);
          break;
        default:
          if (e2.data != null)
            nextValue = input.value.slice(0, input.selectionStart) + e2.data + input.value.slice(input.selectionEnd);
          break;
      }
      if (nextValue == null || !state.validate(nextValue))
        e2.preventDefault();
    };
    input.addEventListener("beforeinput", onBeforeInput, false);
    return () => {
      input.removeEventListener("beforeinput", onBeforeInput, false);
    };
  }, [
    inputRef,
    stateRef
  ]);
  let onBeforeInput1 = !$d841c8010a73d545$var$supportsNativeBeforeInputEvent() ? (e2) => {
    let nextValue = e2.target.value.slice(0, e2.target.selectionStart) + e2.data + e2.target.value.slice(e2.target.selectionEnd);
    if (!state1.validate(nextValue))
      e2.preventDefault();
  } : null;
  let { labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps } = $2d73ec29415bd339$export$712718f7aec83d5(props, inputRef);
  let compositionStartState = (0, import_react11.useRef)(null);
  return {
    inputProps: $3ef42575df84b30b$export$9d1611c77c2fe928(textFieldProps, {
      onBeforeInput: onBeforeInput1,
      onCompositionStart() {
        let { value, selectionStart, selectionEnd } = inputRef.current;
        compositionStartState.current = {
          value,
          selectionStart,
          selectionEnd
        };
      },
      onCompositionEnd() {
        if (!state1.validate(inputRef.current.value)) {
          let { value, selectionStart, selectionEnd } = compositionStartState.current;
          inputRef.current.value = value;
          inputRef.current.setSelectionRange(selectionStart, selectionEnd);
          state1.setInputValue(value);
        }
      }
    }),
    labelProps,
    descriptionProps,
    errorMessageProps
  };
}

// ../../ui/node_modules/@react-stately/numberfield/dist/module.js
init_react();
var import_react12 = __toESM(require_react());
function $parcel$export11(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $de67e98908f0c6ee$exports = {};
$parcel$export11($de67e98908f0c6ee$exports, "useNumberFieldState", () => $de67e98908f0c6ee$export$7f629e9dc1ecf37c);
function $de67e98908f0c6ee$export$7f629e9dc1ecf37c(props) {
  let { minValue, maxValue, step, formatOptions, value: value1, defaultValue, onChange, locale, isDisabled, isReadOnly } = props;
  let [numberValue, setNumberValue] = $bfee1151ccb0650f$export$40bfa8c7b0832715(value1, isNaN(defaultValue) ? NaN : defaultValue, onChange);
  let [inputValue, setInputValue] = (0, import_react12.useState)(() => isNaN(numberValue) ? "" : new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, formatOptions).format(numberValue));
  let numberParser = (0, import_react12.useMemo)(() => new $6c7bd7858deea686$export$cd11ab140839f11d(locale, formatOptions), [
    locale,
    formatOptions
  ]);
  let numberingSystem = (0, import_react12.useMemo)(() => numberParser.getNumberingSystem(inputValue), [
    numberParser,
    inputValue
  ]);
  let formatter = (0, import_react12.useMemo)(() => new $488c6ddbf4ef74c2$export$cc77c4ff7e8673c5(locale, {
    ...formatOptions,
    numberingSystem
  }), [
    locale,
    formatOptions,
    numberingSystem
  ]);
  let intlOptions = (0, import_react12.useMemo)(() => formatter.resolvedOptions(), [
    formatter
  ]);
  let format = (0, import_react12.useCallback)((value) => isNaN(value) ? "" : formatter.format(value), [
    formatter
  ]);
  let clampStep = !isNaN(step) ? step : 1;
  if (intlOptions.style === "percent" && isNaN(step))
    clampStep = 0.01;
  let prevValue = (0, import_react12.useRef)(numberValue);
  let prevLocale = (0, import_react12.useRef)(locale);
  let prevFormatOptions = (0, import_react12.useRef)(formatOptions);
  if (!Object.is(numberValue, prevValue.current) || locale !== prevLocale.current || formatOptions !== prevFormatOptions.current) {
    setInputValue(format(numberValue));
    prevValue.current = numberValue;
    prevLocale.current = locale;
    prevFormatOptions.current = formatOptions;
  }
  let parsedValue = (0, import_react12.useMemo)(() => numberParser.parse(inputValue), [
    numberParser,
    inputValue
  ]);
  let parsed = (0, import_react12.useRef)(0);
  parsed.current = parsedValue;
  let commit = () => {
    if (!inputValue.length) {
      setNumberValue(NaN);
      setInputValue(value1 === void 0 ? "" : format(numberValue));
      return;
    }
    if (isNaN(parsed.current)) {
      setInputValue(format(numberValue));
      return;
    }
    let clampedValue;
    if (isNaN(step))
      clampedValue = $48d9f1d165180307$export$7d15b64cf5a3a4c4(parsed.current, minValue, maxValue);
    else
      clampedValue = $48d9f1d165180307$export$cb6e0bb50bc19463(parsed.current, minValue, maxValue, step);
    clampedValue = numberParser.parse(format(clampedValue));
    setNumberValue(clampedValue);
    setInputValue(format(value1 === void 0 ? clampedValue : numberValue));
  };
  let safeNextStep = (operation, minMax) => {
    let prev = parsed.current;
    if (isNaN(prev)) {
      let newValue = isNaN(minMax) ? 0 : minMax;
      return $48d9f1d165180307$export$cb6e0bb50bc19463(newValue, minValue, maxValue, clampStep);
    } else {
      let newValue = $48d9f1d165180307$export$cb6e0bb50bc19463(prev, minValue, maxValue, clampStep);
      if (operation === "+" && newValue > prev || operation === "-" && newValue < prev)
        return newValue;
      return $48d9f1d165180307$export$cb6e0bb50bc19463($de67e98908f0c6ee$var$handleDecimalOperation(operation, prev, clampStep), minValue, maxValue, clampStep);
    }
  };
  let increment = () => {
    let newValue = safeNextStep("+", minValue);
    if (newValue === numberValue)
      setInputValue(format(newValue));
    setNumberValue(newValue);
  };
  let decrement = () => {
    let newValue = safeNextStep("-", maxValue);
    if (newValue === numberValue)
      setInputValue(format(newValue));
    setNumberValue(newValue);
  };
  let incrementToMax = () => {
    if (maxValue != null)
      setNumberValue($48d9f1d165180307$export$cb6e0bb50bc19463(maxValue, minValue, maxValue, clampStep));
  };
  let decrementToMin = () => {
    if (minValue != null)
      setNumberValue(minValue);
  };
  let canIncrement = (0, import_react12.useMemo)(() => !isDisabled && !isReadOnly && (isNaN(parsedValue) || isNaN(maxValue) || $48d9f1d165180307$export$cb6e0bb50bc19463(parsedValue, minValue, maxValue, clampStep) > parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation("+", parsedValue, clampStep) <= maxValue), [
    isDisabled,
    isReadOnly,
    minValue,
    maxValue,
    clampStep,
    parsedValue
  ]);
  let canDecrement = (0, import_react12.useMemo)(() => !isDisabled && !isReadOnly && (isNaN(parsedValue) || isNaN(minValue) || $48d9f1d165180307$export$cb6e0bb50bc19463(parsedValue, minValue, maxValue, clampStep) < parsedValue || $de67e98908f0c6ee$var$handleDecimalOperation("-", parsedValue, clampStep) >= minValue), [
    isDisabled,
    isReadOnly,
    minValue,
    maxValue,
    clampStep,
    parsedValue
  ]);
  let validate = (value) => numberParser.isValidPartialNumber(value, minValue, maxValue);
  return {
    validate,
    increment,
    incrementToMax,
    decrement,
    decrementToMin,
    canIncrement,
    canDecrement,
    minValue,
    maxValue,
    numberValue: parsedValue,
    setInputValue,
    inputValue,
    commit
  };
}
function $de67e98908f0c6ee$var$handleDecimalOperation(operator, value1, value2) {
  let result = operator === "+" ? value1 + value2 : value1 - value2;
  if (value1 % 1 !== 0 || value2 % 1 !== 0) {
    const value1Decimal = value1.toString().split(".");
    const value2Decimal = value2.toString().split(".");
    const value1DecimalLength = value1Decimal[1] && value1Decimal[1].length || 0;
    const value2DecimalLength = value2Decimal[1] && value2Decimal[1].length || 0;
    const multiplier = Math.pow(10, Math.max(value1DecimalLength, value2DecimalLength));
    value1 = Math.round(value1 * multiplier);
    value2 = Math.round(value2 * multiplier);
    result = operator === "+" ? value1 + value2 : value1 - value2;
    result /= multiplier;
  }
  return result;
}

// ../../ui/node_modules/@react-aria/numberfield/dist/module.js
init_react();
var import_react16 = __toESM(require_react());

// ../../ui/node_modules/@react-aria/spinbutton/dist/module.js
init_react();

// ../../ui/node_modules/@react-aria/live-announcer/dist/module.js
init_react();
var import_react14 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// ../../ui/node_modules/@react-aria/visually-hidden/dist/module.js
init_react();
var import_react13 = __toESM(require_react());
function $parcel$export12(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $5c3e21d68f1c4674$exports = {};
$parcel$export12($5c3e21d68f1c4674$exports, "useVisuallyHidden", () => $5c3e21d68f1c4674$export$a966af930f325cab);
$parcel$export12($5c3e21d68f1c4674$exports, "VisuallyHidden", () => $5c3e21d68f1c4674$export$439d29a4e110a164);
var $5c3e21d68f1c4674$var$styles = {
  border: 0,
  clip: "rect(0 0 0 0)",
  clipPath: "inset(50%)",
  height: 1,
  margin: "0 -1px -1px 0",
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  width: 1,
  whiteSpace: "nowrap"
};
function $5c3e21d68f1c4674$export$a966af930f325cab(props = {}) {
  let { style, isFocusable } = props;
  let [isFocused, setFocused] = (0, import_react13.useState)(false);
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    isDisabled: !isFocusable,
    onFocusChange: setFocused
  });
  let combinedStyles = (0, import_react13.useMemo)(() => {
    if (isFocused)
      return style;
    else if (style)
      return {
        ...$5c3e21d68f1c4674$var$styles,
        ...style
      };
    else
      return $5c3e21d68f1c4674$var$styles;
  }, [
    isFocused
  ]);
  return {
    visuallyHiddenProps: {
      ...focusProps,
      style: combinedStyles
    }
  };
}
function $5c3e21d68f1c4674$export$439d29a4e110a164(props) {
  let { children, elementType: Element2 = "div", isFocusable, style, ...otherProps } = props;
  let { visuallyHiddenProps } = $5c3e21d68f1c4674$export$a966af930f325cab(props);
  return /* @__PURE__ */ import_react13.default.createElement(Element2, $3ef42575df84b30b$export$9d1611c77c2fe928(otherProps, visuallyHiddenProps), children);
}

// ../../ui/node_modules/@react-aria/live-announcer/dist/module.js
function $parcel$export13(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $319e236875307eab$exports = {};
$parcel$export13($319e236875307eab$exports, "announce", () => $319e236875307eab$export$a9b970dcc4ae71a9);
$parcel$export13($319e236875307eab$exports, "clearAnnouncer", () => $319e236875307eab$export$d10ae4f68404609a);
$parcel$export13($319e236875307eab$exports, "destroyAnnouncer", () => $319e236875307eab$export$d8686216b8b81b2f);
var $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY = 7e3;
var $319e236875307eab$var$liveRegionAnnouncer = /* @__PURE__ */ import_react14.default.createRef();
var $319e236875307eab$var$node = null;
var $319e236875307eab$var$messageId = 0;
function $319e236875307eab$export$a9b970dcc4ae71a9(message, assertiveness = "assertive", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) {
  $319e236875307eab$var$ensureInstance((announcer) => announcer.announce(message, assertiveness, timeout));
}
function $319e236875307eab$export$d10ae4f68404609a(assertiveness) {
  $319e236875307eab$var$ensureInstance((announcer) => announcer.clear(assertiveness));
}
function $319e236875307eab$export$d8686216b8b81b2f() {
  if ($319e236875307eab$var$liveRegionAnnouncer.current) {
    import_react_dom2.default.unmountComponentAtNode($319e236875307eab$var$node);
    document.body.removeChild($319e236875307eab$var$node);
    $319e236875307eab$var$node = null;
  }
}
function $319e236875307eab$var$ensureInstance(callback) {
  if (!$319e236875307eab$var$liveRegionAnnouncer.current) {
    $319e236875307eab$var$node = document.createElement("div");
    $319e236875307eab$var$node.dataset.liveAnnouncer = "true";
    document.body.prepend($319e236875307eab$var$node);
    import_react_dom2.default.render(/* @__PURE__ */ import_react14.default.createElement($319e236875307eab$var$LiveRegionAnnouncer, {
      ref: $319e236875307eab$var$liveRegionAnnouncer
    }), $319e236875307eab$var$node, () => callback($319e236875307eab$var$liveRegionAnnouncer.current));
  } else
    callback($319e236875307eab$var$liveRegionAnnouncer.current);
}
var $319e236875307eab$var$LiveRegionAnnouncer = /* @__PURE__ */ import_react14.default.forwardRef((_2, ref) => {
  let [assertiveMessages, setAssertiveMessages] = (0, import_react14.useState)([]);
  let [politeMessages, setPoliteMessages] = (0, import_react14.useState)([]);
  let clear = (assertiveness) => {
    if (!assertiveness || assertiveness === "assertive")
      setAssertiveMessages([]);
    if (!assertiveness || assertiveness === "polite")
      setPoliteMessages([]);
  };
  let $319e236875307eab$export$a9b970dcc4ae71a92 = (message1, assertiveness = "assertive", timeout = $319e236875307eab$var$LIVEREGION_TIMEOUT_DELAY) => {
    let id = $319e236875307eab$var$messageId++;
    if (assertiveness === "assertive")
      setAssertiveMessages((messages) => [
        ...messages,
        {
          id,
          text: message1
        }
      ]);
    else
      setPoliteMessages((messages) => [
        ...messages,
        {
          id,
          text: message1
        }
      ]);
    if (message1 !== "")
      setTimeout(() => {
        if (assertiveness === "assertive")
          setAssertiveMessages((messages) => messages.filter((message) => message.id !== id));
        else
          setPoliteMessages((messages) => messages.filter((message) => message.id !== id));
      }, timeout);
  };
  (0, import_react14.useImperativeHandle)(ref, () => ({
    announce: $319e236875307eab$export$a9b970dcc4ae71a92,
    clear
  }));
  return /* @__PURE__ */ import_react14.default.createElement(import_react14.Fragment, null, /* @__PURE__ */ import_react14.default.createElement($319e236875307eab$var$MessageBlock, {
    "aria-live": "assertive"
  }, assertiveMessages.map((message) => /* @__PURE__ */ import_react14.default.createElement("div", {
    key: message.id
  }, message.text))), /* @__PURE__ */ import_react14.default.createElement($319e236875307eab$var$MessageBlock, {
    "aria-live": "polite"
  }, politeMessages.map((message) => /* @__PURE__ */ import_react14.default.createElement("div", {
    key: message.id
  }, message.text))));
});
function $319e236875307eab$var$MessageBlock({ children, "aria-live": ariaLive }) {
  return /* @__PURE__ */ import_react14.default.createElement($5c3e21d68f1c4674$export$439d29a4e110a164, {
    role: "log",
    "aria-live": ariaLive,
    "aria-relevant": "additions"
  }, children);
}

// ../../ui/node_modules/@react-aria/spinbutton/dist/module.js
var import_react15 = __toESM(require_react());
function $parcel$interopDefault(a2) {
  return a2 && a2.__esModule ? a2.default : a2;
}
function $parcel$export14(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $d2e8511e6f209edf$exports = {};
$parcel$export14($d2e8511e6f209edf$exports, "useSpinButton", () => $d2e8511e6f209edf$export$e908e06f4b8e3402);
var $c6208a7792e31a37$exports = {};
var $ed6aae4e5f766f1e$exports = {};
$ed6aae4e5f766f1e$exports = JSON.parse('{"Empty":"\u0641\u0627\u0631\u063A"}');
var $38854e2b175151fa$exports = {};
$38854e2b175151fa$exports = JSON.parse('{"Empty":"\u0418\u0437\u043F\u0440\u0430\u0437\u043D\u0438"}');
var $15b25ab20f3945b2$exports = {};
$15b25ab20f3945b2$exports = JSON.parse('{"Empty":"Pr\xE1zdn\xE9"}');
var $692a4298b6b649a2$exports = {};
$692a4298b6b649a2$exports = JSON.parse('{"Empty":"Tom"}');
var $1c6e1539193f1243$exports = {};
$1c6e1539193f1243$exports = JSON.parse('{"Empty":"Leer"}');
var $1e8678632c464b6d$exports = {};
$1e8678632c464b6d$exports = JSON.parse('{"Empty":"\u0386\u03B4\u03B5\u03B9\u03BF"}');
var $4adc85d9bf5b9eed$exports = {};
$4adc85d9bf5b9eed$exports = JSON.parse('{"Empty":"Empty"}');
var $41c4b2bb61dafbca$exports = {};
$41c4b2bb61dafbca$exports = JSON.parse('{"Empty":"Vac\xEDo"}');
var $405f8b24f5dd2a60$exports = {};
$405f8b24f5dd2a60$exports = JSON.parse('{"Empty":"T\xFChjenda"}');
var $7efe3ed02b9b9dd4$exports = {};
$7efe3ed02b9b9dd4$exports = JSON.parse('{"Empty":"Tyhj\xE4"}');
var $99fc4c101d92daf3$exports = {};
$99fc4c101d92daf3$exports = JSON.parse('{"Empty":"Vide"}');
var $f9e155e6e8cacaa2$exports = {};
$f9e155e6e8cacaa2$exports = JSON.parse('{"Empty":"\u05E8\u05D9\u05E7"}');
var $c31b5e8e9a249fd5$exports = {};
$c31b5e8e9a249fd5$exports = JSON.parse('{"Empty":"Prazno"}');
var $9c5435bc17499bd9$exports = {};
$9c5435bc17499bd9$exports = JSON.parse('{"Empty":"\xDCres"}');
var $6d1fc8e84d8165e1$exports = {};
$6d1fc8e84d8165e1$exports = JSON.parse('{"Empty":"Vuoto"}');
var $46ea6b3641b83e71$exports = {};
$46ea6b3641b83e71$exports = JSON.parse('{"Empty":"\u7A7A"}');
var $0e3cc9a288289dc5$exports = {};
$0e3cc9a288289dc5$exports = JSON.parse('{"Empty":"\uBE44\uC5B4 \uC788\uC74C"}');
var $4ff2bb25c0089ffb$exports = {};
$4ff2bb25c0089ffb$exports = JSON.parse('{"Empty":"Tu\u0161\u010Dias"}');
var $6cf33cd4c010a2fb$exports = {};
$6cf33cd4c010a2fb$exports = JSON.parse('{"Empty":"Tuk\u0161s"}');
var $5a9f8486f8b8837e$exports = {};
$5a9f8486f8b8837e$exports = JSON.parse('{"Empty":"Tom"}');
var $583f94d807f6ecea$exports = {};
$583f94d807f6ecea$exports = JSON.parse('{"Empty":"Leeg"}');
var $cc4dcfeea2b4050d$exports = {};
$cc4dcfeea2b4050d$exports = JSON.parse('{"Empty":"Pusty"}');
var $68ac2954d56e12b4$exports = {};
$68ac2954d56e12b4$exports = JSON.parse('{"Empty":"Vazio"}');
var $fdb0616f309780b0$exports = {};
$fdb0616f309780b0$exports = JSON.parse('{"Empty":"Vazio"}');
var $fe1eccf4ee1d6f52$exports = {};
$fe1eccf4ee1d6f52$exports = JSON.parse('{"Empty":"Gol"}');
var $a38b6c4e18725976$exports = {};
$a38b6c4e18725976$exports = JSON.parse('{"Empty":"\u041D\u0435 \u0437\u0430\u043F\u043E\u043B\u043D\u0435\u043D\u043E"}');
var $6c14ae2b766b652c$exports = {};
$6c14ae2b766b652c$exports = JSON.parse('{"Empty":"Pr\xE1zdne"}');
var $8f1c9692e16dc5eb$exports = {};
$8f1c9692e16dc5eb$exports = JSON.parse('{"Empty":"Prazen"}');
var $d2aa7abea627cafa$exports = {};
$d2aa7abea627cafa$exports = JSON.parse('{"Empty":"Prazno"}');
var $676b82e4b56408e6$exports = {};
$676b82e4b56408e6$exports = JSON.parse('{"Empty":"Tomt"}');
var $14c9042552d7ce08$exports = {};
$14c9042552d7ce08$exports = JSON.parse('{"Empty":"Bo\u015F"}');
var $393254ebcb66c9f5$exports = {};
$393254ebcb66c9f5$exports = JSON.parse('{"Empty":"\u041F\u0443\u0441\u0442\u043E"}');
var $d49d621f310cf6ce$exports = {};
$d49d621f310cf6ce$exports = JSON.parse('{"Empty":"\u7A7A"}');
var $94b60c866ca5dfe6$exports = {};
$94b60c866ca5dfe6$exports = JSON.parse('{"Empty":"\u7A7A\u767D"}');
$c6208a7792e31a37$exports = {
  "ar-AE": $ed6aae4e5f766f1e$exports,
  "bg-BG": $38854e2b175151fa$exports,
  "cs-CZ": $15b25ab20f3945b2$exports,
  "da-DK": $692a4298b6b649a2$exports,
  "de-DE": $1c6e1539193f1243$exports,
  "el-GR": $1e8678632c464b6d$exports,
  "en-US": $4adc85d9bf5b9eed$exports,
  "es-ES": $41c4b2bb61dafbca$exports,
  "et-EE": $405f8b24f5dd2a60$exports,
  "fi-FI": $7efe3ed02b9b9dd4$exports,
  "fr-FR": $99fc4c101d92daf3$exports,
  "he-IL": $f9e155e6e8cacaa2$exports,
  "hr-HR": $c31b5e8e9a249fd5$exports,
  "hu-HU": $9c5435bc17499bd9$exports,
  "it-IT": $6d1fc8e84d8165e1$exports,
  "ja-JP": $46ea6b3641b83e71$exports,
  "ko-KR": $0e3cc9a288289dc5$exports,
  "lt-LT": $4ff2bb25c0089ffb$exports,
  "lv-LV": $6cf33cd4c010a2fb$exports,
  "nb-NO": $5a9f8486f8b8837e$exports,
  "nl-NL": $583f94d807f6ecea$exports,
  "pl-PL": $cc4dcfeea2b4050d$exports,
  "pt-BR": $68ac2954d56e12b4$exports,
  "pt-PT": $fdb0616f309780b0$exports,
  "ro-RO": $fe1eccf4ee1d6f52$exports,
  "ru-RU": $a38b6c4e18725976$exports,
  "sk-SK": $6c14ae2b766b652c$exports,
  "sl-SI": $8f1c9692e16dc5eb$exports,
  "sr-SP": $d2aa7abea627cafa$exports,
  "sv-SE": $676b82e4b56408e6$exports,
  "tr-TR": $14c9042552d7ce08$exports,
  "uk-UA": $393254ebcb66c9f5$exports,
  "zh-CN": $d49d621f310cf6ce$exports,
  "zh-TW": $94b60c866ca5dfe6$exports
};
function $d2e8511e6f209edf$export$e908e06f4b8e3402(props) {
  const _async = (0, import_react15.useRef)();
  let { value, textValue, minValue, maxValue, isDisabled, isReadOnly, isRequired, onIncrement, onIncrementPage, onDecrement, onDecrementPage, onDecrementToMin, onIncrementToMax } = props;
  const formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85(/* @__PURE__ */ $parcel$interopDefault($c6208a7792e31a37$exports));
  const propsRef = (0, import_react15.useRef)(props);
  propsRef.current = props;
  const clearAsync = () => clearTimeout(_async.current);
  (0, import_react15.useEffect)(() => {
    return () => clearAsync();
  }, []);
  let onKeyDown = (e2) => {
    if (e2.ctrlKey || e2.metaKey || e2.shiftKey || e2.altKey || isReadOnly)
      return;
    switch (e2.key) {
      case "PageUp":
        if (onIncrementPage) {
          e2.preventDefault();
          onIncrementPage();
          break;
        }
      case "ArrowUp":
      case "Up":
        if (onIncrement) {
          e2.preventDefault();
          onIncrement();
        }
        break;
      case "PageDown":
        if (onDecrementPage) {
          e2.preventDefault();
          onDecrementPage();
          break;
        }
      case "ArrowDown":
      case "Down":
        if (onDecrement) {
          e2.preventDefault();
          onDecrement();
        }
        break;
      case "Home":
        if (onDecrementToMin) {
          e2.preventDefault();
          onDecrementToMin();
        }
        break;
      case "End":
        if (onIncrementToMax) {
          e2.preventDefault();
          onIncrementToMax();
        }
        break;
    }
  };
  let isFocused = (0, import_react15.useRef)(false);
  let onFocus = () => {
    isFocused.current = true;
  };
  let onBlur = () => {
    isFocused.current = false;
  };
  textValue = textValue === "" ? formatMessage("Empty") : (textValue || `${value}`).replace("-", "\u2212");
  (0, import_react15.useEffect)(() => {
    if (isFocused.current)
      $319e236875307eab$export$a9b970dcc4ae71a9(textValue, "assertive");
  }, [
    textValue
  ]);
  const onIncrementPressStart = (0, import_react15.useCallback)((initialStepDelay) => {
    clearAsync();
    propsRef.current.onIncrement();
    _async.current = window.setTimeout(() => {
      if (isNaN(maxValue) || isNaN(value) || value < maxValue)
        onIncrementPressStart(60);
    }, initialStepDelay);
  }, [
    onIncrement,
    maxValue,
    value
  ]);
  const onDecrementPressStart = (0, import_react15.useCallback)((initialStepDelay) => {
    clearAsync();
    propsRef.current.onDecrement();
    _async.current = window.setTimeout(() => {
      if (isNaN(minValue) || isNaN(value) || value > minValue)
        onDecrementPressStart(60);
    }, initialStepDelay);
  }, [
    onDecrement,
    minValue,
    value
  ]);
  let cancelContextMenu = (e2) => {
    e2.preventDefault();
  };
  let { addGlobalListener, removeAllGlobalListeners } = $03deb23ff14920c4$export$4eaf04e54aa8eed6();
  return {
    spinButtonProps: {
      role: "spinbutton",
      "aria-valuenow": !isNaN(value) ? value : null,
      "aria-valuetext": textValue,
      "aria-valuemin": minValue,
      "aria-valuemax": maxValue,
      "aria-disabled": isDisabled || null,
      "aria-readonly": isReadOnly || null,
      "aria-required": isRequired || null,
      onKeyDown,
      onFocus,
      onBlur
    },
    incrementButtonProps: {
      onPressStart: () => {
        onIncrementPressStart(400);
        addGlobalListener(window, "contextmenu", cancelContextMenu);
      },
      onPressEnd: () => {
        clearAsync();
        removeAllGlobalListeners();
      },
      onFocus,
      onBlur
    },
    decrementButtonProps: {
      onPressStart: () => {
        onDecrementPressStart(400);
        addGlobalListener(window, "contextmenu", cancelContextMenu);
      },
      onPressEnd: () => {
        clearAsync();
        removeAllGlobalListeners();
      },
      onFocus,
      onBlur
    }
  };
}

// ../../ui/node_modules/@react-aria/numberfield/dist/module.js
function $parcel$interopDefault2(a2) {
  return a2 && a2.__esModule ? a2.default : a2;
}
function $parcel$export15(e2, n2, v2, s2) {
  Object.defineProperty(e2, n2, { get: v2, set: s2, enumerable: true, configurable: true });
}
var $81397a9303501bda$exports = {};
$parcel$export15($81397a9303501bda$exports, "useNumberField", () => $81397a9303501bda$export$23f548e970bdf099);
var $c3ef0f8b54adbb57$exports = {};
var $fb78e0f6ab6349ed$exports = {};
$fb78e0f6ab6349ed$exports = JSON.parse('{"decrease":"\u062E\u0641\u0636 {fieldLabel}","increase":"\u0632\u064A\u0627\u062F\u0629 {fieldLabel}","numberField":"\u062D\u0642\u0644 \u0631\u0642\u0645\u064A"}');
var $2776acdd9959a647$exports = {};
$2776acdd9959a647$exports = JSON.parse('{"decrease":"\u041D\u0430\u043C\u0430\u043B\u044F\u0432\u0430\u043D\u0435 {fieldLabel}","increase":"\u0423\u0441\u0438\u043B\u0432\u0430\u043D\u0435 {fieldLabel}","numberField":"\u041D\u043E\u043C\u0435\u0440 \u043D\u0430 \u043F\u043E\u043B\u0435\u0442\u043E"}');
var $741954410a365ad3$exports = {};
$741954410a365ad3$exports = JSON.parse('{"decrease":"Sn\xED\u017Eit {fieldLabel}","increase":"Zv\xFD\u0161it {fieldLabel}","numberField":"\u010C\xEDseln\xE9 pole"}');
var $8321ed0f8ab642f0$exports = {};
$8321ed0f8ab642f0$exports = JSON.parse('{"decrease":"Reducer {fieldLabel}","increase":"\xD8g {fieldLabel}","numberField":"Talfelt"}');
var $92978e0c4ecafa32$exports = {};
$92978e0c4ecafa32$exports = JSON.parse('{"decrease":"{fieldLabel} verringern","increase":"{fieldLabel} erh\xF6hen","numberField":"Nummernfeld"}');
var $ac5ff71962864a84$exports = {};
$ac5ff71962864a84$exports = JSON.parse('{"decrease":"\u039C\u03B5\u03AF\u03C9\u03C3\u03B7 {fieldLabel}","increase":"\u0391\u03CD\u03BE\u03B7\u03C3\u03B7 {fieldLabel}","numberField":"\u03A0\u03B5\u03B4\u03AF\u03BF \u03B1\u03C1\u03B9\u03B8\u03BC\u03BF\u03CD"}');
var $efe4685e2440d8be$exports = {};
$efe4685e2440d8be$exports = JSON.parse('{"decrease":"Decrease {fieldLabel}","increase":"Increase {fieldLabel}","numberField":"Number field"}');
var $e50a9a48739b90e1$exports = {};
$e50a9a48739b90e1$exports = JSON.parse('{"decrease":"Reducir {fieldLabel}","increase":"Aumentar {fieldLabel}","numberField":"Campo de n\xFAmero"}');
var $6e0d5294ecbb8ab6$exports = {};
$6e0d5294ecbb8ab6$exports = JSON.parse('{"decrease":"V\xE4henda {fieldLabel}","increase":"Suurenda {fieldLabel}","numberField":"Numbri v\xE4li"}');
var $e7129d65f607f77f$exports = {};
$e7129d65f607f77f$exports = JSON.parse('{"decrease":"V\xE4henn\xE4 {fieldLabel}","increase":"Lis\xE4\xE4 {fieldLabel}","numberField":"Numerokentt\xE4"}');
var $d72adf5b20573e34$exports = {};
$d72adf5b20573e34$exports = JSON.parse('{"decrease":"Diminuer {fieldLabel}","increase":"Augmenter {fieldLabel}","numberField":"Champ de nombre"}');
var $a25c707e88b844a7$exports = {};
$a25c707e88b844a7$exports = JSON.parse('{"decrease":"\u05D4\u05E7\u05D8\u05DF {fieldLabel}","increase":"\u05D4\u05D2\u05D3\u05DC {fieldLabel}","numberField":"\u05E9\u05D3\u05D4 \u05DE\u05E1\u05E4\u05E8"}');
var $69b41140b9a4ca54$exports = {};
$69b41140b9a4ca54$exports = JSON.parse('{"decrease":"Smanji {fieldLabel}","increase":"Pove\u0107aj {fieldLabel}","numberField":"Polje broja"}');
var $81dab28f37f59d1a$exports = {};
$81dab28f37f59d1a$exports = JSON.parse('{"decrease":"{fieldLabel} cs\xF6kkent\xE9se","increase":"{fieldLabel} n\xF6vel\xE9se","numberField":"Sz\xE1mmez\u0151"}');
var $866555b31f2d7711$exports = {};
$866555b31f2d7711$exports = JSON.parse('{"decrease":"Riduci {fieldLabel}","increase":"Aumenta {fieldLabel}","numberField":"Campo numero"}');
var $dafcd55d52b9d371$exports = {};
$dafcd55d52b9d371$exports = JSON.parse('{"decrease":"{fieldLabel}\u3092\u7E2E\u5C0F","increase":"{fieldLabel}\u3092\u62E1\u5927","numberField":"\u6570\u5024\u30D5\u30A3\u30FC\u30EB\u30C9"}');
var $f090c1f8c5da0145$exports = {};
$f090c1f8c5da0145$exports = JSON.parse('{"decrease":"{fieldLabel} \uAC10\uC18C","increase":"{fieldLabel} \uC99D\uAC00","numberField":"\uBC88\uD638 \uD544\uB4DC"}');
var $6f10f3a13360a75c$exports = {};
$6f10f3a13360a75c$exports = JSON.parse('{"decrease":"Suma\u017Einti {fieldLabel}","increase":"Padidinti {fieldLabel}","numberField":"Numerio laukas"}');
var $47432cefd4b7bd1b$exports = {};
$47432cefd4b7bd1b$exports = JSON.parse('{"decrease":"Samazin\u0101\u0161ana {fieldLabel}","increase":"Palielin\u0101\u0161ana {fieldLabel}","numberField":"Skait\u013Cu lauks"}');
var $dc578a950a2bf23d$exports = {};
$dc578a950a2bf23d$exports = JSON.parse('{"decrease":"Reduser {fieldLabel}","increase":"\xD8k {fieldLabel}","numberField":"Tallfelt"}');
var $353f1bfca4dc395a$exports = {};
$353f1bfca4dc395a$exports = JSON.parse('{"decrease":"{fieldLabel} verlagen","increase":"{fieldLabel} verhogen","numberField":"Getalveld"}');
var $241bc0bbd870e982$exports = {};
$241bc0bbd870e982$exports = JSON.parse('{"decrease":"Zmniejsz {fieldLabel}","increase":"Zwi\u0119ksz {fieldLabel}","numberField":"Pole numeru"}');
var $da3005c7bd72b0a8$exports = {};
$da3005c7bd72b0a8$exports = JSON.parse('{"decrease":"Diminuir {fieldLabel}","increase":"Aumentar {fieldLabel}","numberField":"Campo de n\xFAmero"}');
var $cf48bfc540882310$exports = {};
$cf48bfc540882310$exports = JSON.parse('{"decrease":"Diminuir {fieldLabel}","increase":"Aumentar {fieldLabel}","numberField":"Campo num\xE9rico"}');
var $b63a28c481ab9ee3$exports = {};
$b63a28c481ab9ee3$exports = JSON.parse('{"decrease":"Sc\u0103dere {fieldLabel}","increase":"Cre\u0219tere {fieldLabel}","numberField":"C\xE2mp numeric"}');
var $19f9df95c2464ab6$exports = {};
$19f9df95c2464ab6$exports = JSON.parse('{"decrease":"\u0423\u043C\u0435\u043D\u044C\u0448\u0435\u043D\u0438\u0435 {fieldLabel}","increase":"\u0423\u0432\u0435\u043B\u0438\u0447\u0435\u043D\u0438\u0435 {fieldLabel}","numberField":"\u0427\u0438\u0441\u043B\u043E\u0432\u043E\u0435 \u043F\u043E\u043B\u0435"}');
var $b272932a685e8482$exports = {};
$b272932a685e8482$exports = JSON.parse('{"decrease":"Zn\xED\u017Ei\u0165 {fieldLabel}","increase":"Zv\xFD\u0161i\u0165 {fieldLabel}","numberField":"\u010C\xEDseln\xE9 pole"}');
var $cbaf8b5b61f9e544$exports = {};
$cbaf8b5b61f9e544$exports = JSON.parse('{"decrease":"Upadati {fieldLabel}","increase":"Pove\u010Dajte {fieldLabel}","numberField":"\u0160tevil\u010Dno polje"}');
var $e0a3af6ac1449b2f$exports = {};
$e0a3af6ac1449b2f$exports = JSON.parse('{"decrease":"Decrease {fieldLabel}","increase":"Increase {fieldLabel}","numberField":"Number field"}');
var $71e167d2458a6019$exports = {};
$71e167d2458a6019$exports = JSON.parse('{"decrease":"Minska {fieldLabel}","increase":"\xD6ka {fieldLabel}","numberField":"Nummerf\xE4lt"}');
var $3719245abc082946$exports = {};
$3719245abc082946$exports = JSON.parse('{"decrease":"{fieldLabel} azalt","increase":"{fieldLabel} artt\u0131r","numberField":"Say\u0131 alan\u0131"}');
var $2ccc589e2f51824d$exports = {};
$2ccc589e2f51824d$exports = JSON.parse('{"decrease":"\u0417\u043C\u0435\u043D\u0448\u0438\u0442\u0438 {fieldLabel}","increase":"\u0417\u0431\u0456\u043B\u044C\u0448\u0438\u0442\u0438 {fieldLabel}","numberField":"\u041F\u043E\u043B\u0435 \u043D\u043E\u043C\u0435\u0440\u0430"}');
var $e1103cb9b4c13942$exports = {};
$e1103cb9b4c13942$exports = JSON.parse('{"decrease":"\u964D\u4F4E {fieldLabel}","increase":"\u63D0\u9AD8 {fieldLabel}","numberField":"\u6570\u5B57\u5B57\u6BB5"}');
var $448607634f80dccb$exports = {};
$448607634f80dccb$exports = JSON.parse('{"decrease":"\u7E2E\u5C0F {fieldLabel}","increase":"\u653E\u5927 {fieldLabel}","numberField":"\u6578\u5B57\u6B04\u4F4D"}');
$c3ef0f8b54adbb57$exports = {
  "ar-AE": $fb78e0f6ab6349ed$exports,
  "bg-BG": $2776acdd9959a647$exports,
  "cs-CZ": $741954410a365ad3$exports,
  "da-DK": $8321ed0f8ab642f0$exports,
  "de-DE": $92978e0c4ecafa32$exports,
  "el-GR": $ac5ff71962864a84$exports,
  "en-US": $efe4685e2440d8be$exports,
  "es-ES": $e50a9a48739b90e1$exports,
  "et-EE": $6e0d5294ecbb8ab6$exports,
  "fi-FI": $e7129d65f607f77f$exports,
  "fr-FR": $d72adf5b20573e34$exports,
  "he-IL": $a25c707e88b844a7$exports,
  "hr-HR": $69b41140b9a4ca54$exports,
  "hu-HU": $81dab28f37f59d1a$exports,
  "it-IT": $866555b31f2d7711$exports,
  "ja-JP": $dafcd55d52b9d371$exports,
  "ko-KR": $f090c1f8c5da0145$exports,
  "lt-LT": $6f10f3a13360a75c$exports,
  "lv-LV": $47432cefd4b7bd1b$exports,
  "nb-NO": $dc578a950a2bf23d$exports,
  "nl-NL": $353f1bfca4dc395a$exports,
  "pl-PL": $241bc0bbd870e982$exports,
  "pt-BR": $da3005c7bd72b0a8$exports,
  "pt-PT": $cf48bfc540882310$exports,
  "ro-RO": $b63a28c481ab9ee3$exports,
  "ru-RU": $19f9df95c2464ab6$exports,
  "sk-SK": $b272932a685e8482$exports,
  "sl-SI": $cbaf8b5b61f9e544$exports,
  "sr-SP": $e0a3af6ac1449b2f$exports,
  "sv-SE": $71e167d2458a6019$exports,
  "tr-TR": $3719245abc082946$exports,
  "uk-UA": $2ccc589e2f51824d$exports,
  "zh-CN": $e1103cb9b4c13942$exports,
  "zh-TW": $448607634f80dccb$exports
};
function $81397a9303501bda$export$23f548e970bdf099(props, state, inputRef) {
  let { id, decrementAriaLabel, incrementAriaLabel, isDisabled, isReadOnly, isRequired, minValue, maxValue, autoFocus, validationState, label, formatOptions, onBlur, onFocus, onFocusChange, onKeyDown, onKeyUp, description, errorMessage } = props;
  let { increment, incrementToMax, decrement, decrementToMin, numberValue, commit } = state;
  const formatMessage = $321bc95feeb923dd$export$ec23bf898b1eed85(/* @__PURE__ */ $parcel$interopDefault2($c3ef0f8b54adbb57$exports));
  let inputId = $bdb11010cef70236$export$f680877a34711e37(id);
  let { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    onBlur: () => {
      commit();
    }
  });
  let { spinButtonProps, incrementButtonProps: incButtonProps, decrementButtonProps: decButtonProps } = $d2e8511e6f209edf$export$e908e06f4b8e3402({
    isDisabled,
    isReadOnly,
    isRequired,
    maxValue,
    minValue,
    onIncrement: increment,
    onIncrementToMax: incrementToMax,
    onDecrement: decrement,
    onDecrementToMin: decrementToMin,
    value: numberValue,
    textValue: state.inputValue
  });
  let [focusWithin, setFocusWithin] = (0, import_react16.useState)(false);
  let { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled,
    onFocusWithinChange: setFocusWithin
  });
  let onWheel = (0, import_react16.useCallback)((e2) => {
    if (Math.abs(e2.deltaY) <= Math.abs(e2.deltaX))
      return;
    if (e2.deltaY > 0)
      increment();
    else if (e2.deltaY < 0)
      decrement();
  }, [
    decrement,
    increment
  ]);
  let scrollingDisabled = isDisabled || isReadOnly || !focusWithin;
  $7d0a636d7a4dcefd$export$2123ff2b87c81ca({
    onScroll: onWheel,
    isDisabled: scrollingDisabled
  }, inputRef);
  let numberFormatter = $a916eb452884faea$export$b7a616150fdb9f44(formatOptions);
  let intlOptions = (0, import_react16.useMemo)(() => numberFormatter.resolvedOptions(), [
    numberFormatter
  ]);
  let hasDecimals = intlOptions.maximumFractionDigits > 0;
  let hasNegative = isNaN(state.minValue) || state.minValue < 0;
  let inputMode = "numeric";
  if ($c87311424ea30a05$export$186c6964ca17d99()) {
    if (hasNegative)
      inputMode = "text";
    else if (hasDecimals)
      inputMode = "decimal";
  } else if ($c87311424ea30a05$export$a11b0059900ceec8()) {
    if (hasNegative)
      inputMode = "numeric";
    else if (hasDecimals)
      inputMode = "decimal";
  }
  let onChange = (value) => {
    state.setInputValue(value);
  };
  let domProps = $65484d02dcb7eb3e$export$457c3d6518dd4c6f(props);
  let { labelProps, inputProps: textFieldProps, descriptionProps, errorMessageProps } = $d841c8010a73d545$export$4f384c9210e583c3({
    ...domProps,
    label,
    autoFocus,
    isDisabled,
    isReadOnly,
    isRequired,
    validationState,
    value: state.inputValue,
    autoComplete: "off",
    "aria-label": props["aria-label"] || null,
    "aria-labelledby": props["aria-labelledby"] || null,
    id: inputId,
    type: "text",
    inputMode,
    onChange,
    onBlur,
    onFocus,
    onFocusChange,
    onKeyDown,
    onKeyUp,
    description,
    errorMessage
  }, state, inputRef);
  let inputProps = $3ef42575df84b30b$export$9d1611c77c2fe928(spinButtonProps, textFieldProps, focusProps, {
    role: null,
    "aria-roledescription": !$c87311424ea30a05$export$fedb369cb70207f1() ? formatMessage("numberField") : null,
    "aria-valuemax": null,
    "aria-valuemin": null,
    "aria-valuenow": null,
    "aria-valuetext": null,
    autoCorrect: "off",
    spellCheck: "false"
  });
  let onButtonPressStart = (e2) => {
    if (document.activeElement === inputRef.current)
      return;
    if (e2.pointerType === "mouse")
      inputRef.current.focus();
    else
      e2.target.focus();
  };
  let fieldLabel = props["aria-label"] || (typeof props.label === "string" ? props.label : "");
  let ariaLabelledby;
  if (!fieldLabel)
    ariaLabelledby = props.label != null ? labelProps.id : props["aria-labelledby"];
  let incrementId = $bdb11010cef70236$export$f680877a34711e37();
  let decrementId = $bdb11010cef70236$export$f680877a34711e37();
  let incrementButtonProps = $3ef42575df84b30b$export$9d1611c77c2fe928(incButtonProps, {
    "aria-label": incrementAriaLabel || formatMessage("increase", {
      fieldLabel
    }).trim(),
    id: ariaLabelledby && !incrementAriaLabel ? incrementId : null,
    "aria-labelledby": ariaLabelledby && !incrementAriaLabel ? `${incrementId} ${ariaLabelledby}` : null,
    "aria-controls": inputId,
    excludeFromTabOrder: true,
    preventFocusOnPress: true,
    allowFocusWhenDisabled: true,
    isDisabled: !state.canIncrement,
    onPressStart: onButtonPressStart
  });
  let decrementButtonProps = $3ef42575df84b30b$export$9d1611c77c2fe928(decButtonProps, {
    "aria-label": decrementAriaLabel || formatMessage("decrease", {
      fieldLabel
    }).trim(),
    id: ariaLabelledby && !decrementAriaLabel ? decrementId : null,
    "aria-labelledby": ariaLabelledby && !decrementAriaLabel ? `${decrementId} ${ariaLabelledby}` : null,
    "aria-controls": inputId,
    excludeFromTabOrder: true,
    preventFocusOnPress: true,
    allowFocusWhenDisabled: true,
    isDisabled: !state.canDecrement,
    onPressStart: onButtonPressStart
  });
  return {
    groupProps: {
      role: "group",
      "aria-disabled": isDisabled,
      "aria-invalid": validationState === "invalid" ? "true" : void 0,
      ...focusWithinProps
    },
    labelProps,
    inputProps,
    incrementButtonProps,
    decrementButtonProps,
    errorMessageProps,
    descriptionProps
  };
}

// ../../ui/dist/ui.es.js
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var _a2;
var CSS_VAR_REGEX = /(?:var\(--)[a-zA-z0-9-]*(?:\))/g;
function getThemeValue(theme2, value) {
  if (!value.includes("var(")) {
    return value;
  }
  const cssVars = value.match(CSS_VAR_REGEX) || [];
  return cssVars.reduce((output, cssVar) => {
    const keys = cssVar.replace(`var(--`, "").replace(")", "").split("-");
    const cssValue = theme2[keys[0]][keys[1]].value;
    return output.replace(cssVar, cssValue);
  }, value);
}
function enumKeys(obj) {
  return Object.keys(obj).filter((k2) => Number.isNaN(+k2));
}
function enumValues(obj) {
  return Object.values(obj);
}
function capitalizeFirstLetter(source) {
  return source.charAt(0).toUpperCase() + source.slice(1);
}
function omitProps(source, ...props) {
  return props.reduce((output, prop) => {
    delete output[prop];
    return output;
  }, __spreadValues({}, source));
}
var isSSR = !(typeof window !== "undefined" && ((_a2 = window.document) == null ? void 0 : _a2.createElement));
function mergeRefs2(refs) {
  return (node) => {
    refs.forEach((ref) => {
      if (ref) {
        if (typeof ref === "function") {
          ref(node);
        } else {
          try {
            ref.current = node;
          } catch (error) {
          }
        }
      }
    });
  };
}
var IconType = /* @__PURE__ */ ((IconType2) => {
  IconType2["fill"] = "fill";
  IconType2["line"] = "line";
  return IconType2;
})(IconType || {});
var IconName = /* @__PURE__ */ ((IconName2) => {
  IconName2["24Hours"] = "24Hours";
  IconName2["4K"] = "4K";
  IconName2["accountBox"] = "accountBox";
  IconName2["accountCircle"] = "accountCircle";
  IconName2["accountPinBox"] = "accountPinBox";
  IconName2["accountPinCircle"] = "accountPinCircle";
  IconName2["add"] = "add";
  IconName2["addBox"] = "addBox";
  IconName2["addCircle"] = "addCircle";
  IconName2["admin"] = "admin";
  IconName2["advertisement"] = "advertisement";
  IconName2["airplay"] = "airplay";
  IconName2["alarm"] = "alarm";
  IconName2["alarmWarning"] = "alarmWarning";
  IconName2["album"] = "album";
  IconName2["alert"] = "alert";
  IconName2["aliens"] = "aliens";
  IconName2["alipay"] = "alipay";
  IconName2["amazon"] = "amazon";
  IconName2["anchor"] = "anchor";
  IconName2["ancientGate"] = "ancientGate";
  IconName2["ancientPavilion"] = "ancientPavilion";
  IconName2["android"] = "android";
  IconName2["angularjs"] = "angularjs";
  IconName2["anticlockwise"] = "anticlockwise";
  IconName2["anticlockwise2"] = "anticlockwise2";
  IconName2["appStore"] = "appStore";
  IconName2["apple"] = "apple";
  IconName2["apps"] = "apps";
  IconName2["apps2"] = "apps2";
  IconName2["archive"] = "archive";
  IconName2["archiveDrawer"] = "archiveDrawer";
  IconName2["arrowDown"] = "arrowDown";
  IconName2["arrowDownCircle"] = "arrowDownCircle";
  IconName2["arrowDownS"] = "arrowDownS";
  IconName2["arrowDropDown"] = "arrowDropDown";
  IconName2["arrowDropLeft"] = "arrowDropLeft";
  IconName2["arrowDropRight"] = "arrowDropRight";
  IconName2["arrowDropUp"] = "arrowDropUp";
  IconName2["arrowGoBack"] = "arrowGoBack";
  IconName2["arrowGoForward"] = "arrowGoForward";
  IconName2["arrowLeft"] = "arrowLeft";
  IconName2["arrowLeftCircle"] = "arrowLeftCircle";
  IconName2["arrowLeftDown"] = "arrowLeftDown";
  IconName2["arrowLeftRight"] = "arrowLeftRight";
  IconName2["arrowLeftS"] = "arrowLeftS";
  IconName2["arrowLeftUp"] = "arrowLeftUp";
  IconName2["arrowRight"] = "arrowRight";
  IconName2["arrowRightCircle"] = "arrowRightCircle";
  IconName2["arrowRightDown"] = "arrowRightDown";
  IconName2["arrowRightS"] = "arrowRightS";
  IconName2["arrowRightUp"] = "arrowRightUp";
  IconName2["arrowUp"] = "arrowUp";
  IconName2["arrowUpCircle"] = "arrowUpCircle";
  IconName2["arrowUpDown"] = "arrowUpDown";
  IconName2["arrowUpS"] = "arrowUpS";
  IconName2["artboard"] = "artboard";
  IconName2["artboard2"] = "artboard2";
  IconName2["article"] = "article";
  IconName2["aspectRatio"] = "aspectRatio";
  IconName2["at"] = "at";
  IconName2["attachment"] = "attachment";
  IconName2["auction"] = "auction";
  IconName2["award"] = "award";
  IconName2["baidu"] = "baidu";
  IconName2["ballPen"] = "ballPen";
  IconName2["bank"] = "bank";
  IconName2["bankCard"] = "bankCard";
  IconName2["bankCard2"] = "bankCard2";
  IconName2["barChart"] = "barChart";
  IconName2["barChart2"] = "barChart2";
  IconName2["barChartBox"] = "barChartBox";
  IconName2["barChartGrouped"] = "barChartGrouped";
  IconName2["barChartHorizontal"] = "barChartHorizontal";
  IconName2["barcode"] = "barcode";
  IconName2["barcodeBox"] = "barcodeBox";
  IconName2["barricade"] = "barricade";
  IconName2["baseStation"] = "baseStation";
  IconName2["basketball"] = "basketball";
  IconName2["battery"] = "battery";
  IconName2["battery2"] = "battery2";
  IconName2["battery2Charge"] = "battery2Charge";
  IconName2["batteryCharge"] = "batteryCharge";
  IconName2["batteryLow"] = "batteryLow";
  IconName2["batterySaver"] = "batterySaver";
  IconName2["batteryShare"] = "batteryShare";
  IconName2["bearSmile"] = "bearSmile";
  IconName2["behance"] = "behance";
  IconName2["bell"] = "bell";
  IconName2["bike"] = "bike";
  IconName2["bilibili"] = "bilibili";
  IconName2["bill"] = "bill";
  IconName2["billiards"] = "billiards";
  IconName2["bitCoin"] = "bitCoin";
  IconName2["blaze"] = "blaze";
  IconName2["bluetooth"] = "bluetooth";
  IconName2["bluetoothConnect"] = "bluetoothConnect";
  IconName2["blurOff"] = "blurOff";
  IconName2["bodyScan"] = "bodyScan";
  IconName2["book"] = "book";
  IconName2["book2"] = "book2";
  IconName2["book3"] = "book3";
  IconName2["bookMark"] = "bookMark";
  IconName2["bookOpen"] = "bookOpen";
  IconName2["bookRead"] = "bookRead";
  IconName2["booklet"] = "booklet";
  IconName2["bookmark"] = "bookmark";
  IconName2["bookmark2"] = "bookmark2";
  IconName2["bookmark3"] = "bookmark3";
  IconName2["boxing"] = "boxing";
  IconName2["braces"] = "braces";
  IconName2["brackets"] = "brackets";
  IconName2["briefcase"] = "briefcase";
  IconName2["briefcase2"] = "briefcase2";
  IconName2["briefcase3"] = "briefcase3";
  IconName2["briefcase4"] = "briefcase4";
  IconName2["briefcase5"] = "briefcase5";
  IconName2["broadcast"] = "broadcast";
  IconName2["brush"] = "brush";
  IconName2["brush2"] = "brush2";
  IconName2["brush3"] = "brush3";
  IconName2["brush4"] = "brush4";
  IconName2["bubbleChart"] = "bubbleChart";
  IconName2["bug"] = "bug";
  IconName2["bug2"] = "bug2";
  IconName2["building"] = "building";
  IconName2["building2"] = "building2";
  IconName2["building3"] = "building3";
  IconName2["building4"] = "building4";
  IconName2["bus"] = "bus";
  IconName2["bus2"] = "bus2";
  IconName2["busWifi"] = "busWifi";
  IconName2["cactus"] = "cactus";
  IconName2["cake"] = "cake";
  IconName2["cake2"] = "cake2";
  IconName2["cake3"] = "cake3";
  IconName2["calculator"] = "calculator";
  IconName2["calendar"] = "calendar";
  IconName2["calendar2"] = "calendar2";
  IconName2["calendarCheck"] = "calendarCheck";
  IconName2["calendarEvent"] = "calendarEvent";
  IconName2["calendarTodo"] = "calendarTodo";
  IconName2["camera"] = "camera";
  IconName2["camera2"] = "camera2";
  IconName2["camera3"] = "camera3";
  IconName2["cameraLens"] = "cameraLens";
  IconName2["cameraOff"] = "cameraOff";
  IconName2["cameraSwitch"] = "cameraSwitch";
  IconName2["capsule"] = "capsule";
  IconName2["car"] = "car";
  IconName2["carWashing"] = "carWashing";
  IconName2["caravan"] = "caravan";
  IconName2["cast"] = "cast";
  IconName2["cellphone"] = "cellphone";
  IconName2["celsius"] = "celsius";
  IconName2["centos"] = "centos";
  IconName2["characterRecognition"] = "characterRecognition";
  IconName2["chargingPile"] = "chargingPile";
  IconName2["chargingPile2"] = "chargingPile2";
  IconName2["chat1"] = "chat1";
  IconName2["chat2"] = "chat2";
  IconName2["chat3"] = "chat3";
  IconName2["chat4"] = "chat4";
  IconName2["chatCheck"] = "chatCheck";
  IconName2["chatDelete"] = "chatDelete";
  IconName2["chatDownload"] = "chatDownload";
  IconName2["chatFollowUp"] = "chatFollowUp";
  IconName2["chatForward"] = "chatForward";
  IconName2["chatHeart"] = "chatHeart";
  IconName2["chatHistory"] = "chatHistory";
  IconName2["chatNew"] = "chatNew";
  IconName2["chatOff"] = "chatOff";
  IconName2["chatPoll"] = "chatPoll";
  IconName2["chatPrivate"] = "chatPrivate";
  IconName2["chatQuote"] = "chatQuote";
  IconName2["chatSettings"] = "chatSettings";
  IconName2["chatSmile"] = "chatSmile";
  IconName2["chatSmile2"] = "chatSmile2";
  IconName2["chatSmile3"] = "chatSmile3";
  IconName2["chatUpload"] = "chatUpload";
  IconName2["chatVoice"] = "chatVoice";
  IconName2["check"] = "check";
  IconName2["checkDouble"] = "checkDouble";
  IconName2["checkbox"] = "checkbox";
  IconName2["checkboxBlank"] = "checkboxBlank";
  IconName2["checkboxBlankCircle"] = "checkboxBlankCircle";
  IconName2["checkboxCircle"] = "checkboxCircle";
  IconName2["checkboxIndeterminate"] = "checkboxIndeterminate";
  IconName2["checkboxMultiple"] = "checkboxMultiple";
  IconName2["checkboxMultipleBlank"] = "checkboxMultipleBlank";
  IconName2["chinaRailway"] = "chinaRailway";
  IconName2["chrome"] = "chrome";
  IconName2["clapperboard"] = "clapperboard";
  IconName2["clipboard"] = "clipboard";
  IconName2["clockwise"] = "clockwise";
  IconName2["clockwise2"] = "clockwise2";
  IconName2["close"] = "close";
  IconName2["closeCircle"] = "closeCircle";
  IconName2["closedCaptioning"] = "closedCaptioning";
  IconName2["cloud"] = "cloud";
  IconName2["cloudOff"] = "cloudOff";
  IconName2["cloudWindy"] = "cloudWindy";
  IconName2["cloudy"] = "cloudy";
  IconName2["cloudy2"] = "cloudy2";
  IconName2["code"] = "code";
  IconName2["codeBox"] = "codeBox";
  IconName2["codeS"] = "codeS";
  IconName2["codeSSlash"] = "codeSSlash";
  IconName2["codepen"] = "codepen";
  IconName2["coin"] = "coin";
  IconName2["coins"] = "coins";
  IconName2["collage"] = "collage";
  IconName2["command"] = "command";
  IconName2["community"] = "community";
  IconName2["compass"] = "compass";
  IconName2["compass2"] = "compass2";
  IconName2["compass3"] = "compass3";
  IconName2["compass4"] = "compass4";
  IconName2["compassDiscover"] = "compassDiscover";
  IconName2["compasses"] = "compasses";
  IconName2["compasses2"] = "compasses2";
  IconName2["computer"] = "computer";
  IconName2["contacts"] = "contacts";
  IconName2["contactsBook"] = "contactsBook";
  IconName2["contactsBook2"] = "contactsBook2";
  IconName2["contactsBookUpload"] = "contactsBookUpload";
  IconName2["contrast"] = "contrast";
  IconName2["contrast2"] = "contrast2";
  IconName2["contrastDrop"] = "contrastDrop";
  IconName2["contrastDrop2"] = "contrastDrop2";
  IconName2["copperCoin"] = "copperCoin";
  IconName2["copperDiamond"] = "copperDiamond";
  IconName2["copyleft"] = "copyleft";
  IconName2["copyright"] = "copyright";
  IconName2["coreos"] = "coreos";
  IconName2["coupon"] = "coupon";
  IconName2["coupon2"] = "coupon2";
  IconName2["coupon3"] = "coupon3";
  IconName2["coupon4"] = "coupon4";
  IconName2["coupon5"] = "coupon5";
  IconName2["cpu"] = "cpu";
  IconName2["creativeCommons"] = "creativeCommons";
  IconName2["creativeCommonsBy"] = "creativeCommonsBy";
  IconName2["creativeCommonsNc"] = "creativeCommonsNc";
  IconName2["creativeCommonsNd"] = "creativeCommonsNd";
  IconName2["creativeCommonsSa"] = "creativeCommonsSa";
  IconName2["creativeCommonsZero"] = "creativeCommonsZero";
  IconName2["criminal"] = "criminal";
  IconName2["crop"] = "crop";
  IconName2["crop2"] = "crop2";
  IconName2["css3"] = "css3";
  IconName2["cup"] = "cup";
  IconName2["currency"] = "currency";
  IconName2["cursor"] = "cursor";
  IconName2["customerService"] = "customerService";
  IconName2["customerService2"] = "customerService2";
  IconName2["dashboard"] = "dashboard";
  IconName2["dashboard2"] = "dashboard2";
  IconName2["dashboard3"] = "dashboard3";
  IconName2["database"] = "database";
  IconName2["database2"] = "database2";
  IconName2["deleteBack"] = "deleteBack";
  IconName2["deleteBack2"] = "deleteBack2";
  IconName2["deleteBin"] = "deleteBin";
  IconName2["deleteBin2"] = "deleteBin2";
  IconName2["deleteBin3"] = "deleteBin3";
  IconName2["deleteBin4"] = "deleteBin4";
  IconName2["deleteBin5"] = "deleteBin5";
  IconName2["deleteBin6"] = "deleteBin6";
  IconName2["deleteBin7"] = "deleteBin7";
  IconName2["device"] = "device";
  IconName2["deviceRecover"] = "deviceRecover";
  IconName2["dingding"] = "dingding";
  IconName2["direction"] = "direction";
  IconName2["disc"] = "disc";
  IconName2["discord"] = "discord";
  IconName2["discuss"] = "discuss";
  IconName2["dislike"] = "dislike";
  IconName2["disqus"] = "disqus";
  IconName2["divide"] = "divide";
  IconName2["donutChart"] = "donutChart";
  IconName2["door"] = "door";
  IconName2["doorClosed"] = "doorClosed";
  IconName2["doorLock"] = "doorLock";
  IconName2["doorLockBox"] = "doorLockBox";
  IconName2["doorOpen"] = "doorOpen";
  IconName2["dossier"] = "dossier";
  IconName2["douban"] = "douban";
  IconName2["download"] = "download";
  IconName2["download2"] = "download2";
  IconName2["downloadCloud"] = "downloadCloud";
  IconName2["downloadCloud2"] = "downloadCloud2";
  IconName2["draft"] = "draft";
  IconName2["dragDrop"] = "dragDrop";
  IconName2["dragMove"] = "dragMove";
  IconName2["dragMove2"] = "dragMove2";
  IconName2["dribbble"] = "dribbble";
  IconName2["drive"] = "drive";
  IconName2["drizzle"] = "drizzle";
  IconName2["drop"] = "drop";
  IconName2["dropbox"] = "dropbox";
  IconName2["dualSim1"] = "dualSim1";
  IconName2["dualSim2"] = "dualSim2";
  IconName2["dv"] = "dv";
  IconName2["dvd"] = "dvd";
  IconName2["eBike"] = "eBike";
  IconName2["eBike2"] = "eBike2";
  IconName2["earth"] = "earth";
  IconName2["earthquake"] = "earthquake";
  IconName2["edge"] = "edge";
  IconName2["edit"] = "edit";
  IconName2["edit2"] = "edit2";
  IconName2["editBox"] = "editBox";
  IconName2["editCircle"] = "editCircle";
  IconName2["eject"] = "eject";
  IconName2["emotion"] = "emotion";
  IconName2["emotion2"] = "emotion2";
  IconName2["emotionHappy"] = "emotionHappy";
  IconName2["emotionLaugh"] = "emotionLaugh";
  IconName2["emotionNormal"] = "emotionNormal";
  IconName2["emotionSad"] = "emotionSad";
  IconName2["emotionUnhappy"] = "emotionUnhappy";
  IconName2["empathize"] = "empathize";
  IconName2["equalizer"] = "equalizer";
  IconName2["eraser"] = "eraser";
  IconName2["errorWarning"] = "errorWarning";
  IconName2["evernote"] = "evernote";
  IconName2["exchange"] = "exchange";
  IconName2["exchangeBox"] = "exchangeBox";
  IconName2["exchangeCny"] = "exchangeCny";
  IconName2["exchangeDollar"] = "exchangeDollar";
  IconName2["exchangeFunds"] = "exchangeFunds";
  IconName2["externalLink"] = "externalLink";
  IconName2["eye"] = "eye";
  IconName2["eye2"] = "eye2";
  IconName2["eyeClose"] = "eyeClose";
  IconName2["eyeOff"] = "eyeOff";
  IconName2["facebook"] = "facebook";
  IconName2["facebookBox"] = "facebookBox";
  IconName2["facebookCircle"] = "facebookCircle";
  IconName2["fahrenheit"] = "fahrenheit";
  IconName2["feedback"] = "feedback";
  IconName2["file"] = "file";
  IconName2["file2"] = "file2";
  IconName2["file3"] = "file3";
  IconName2["file4"] = "file4";
  IconName2["fileAdd"] = "fileAdd";
  IconName2["fileChart"] = "fileChart";
  IconName2["fileChart2"] = "fileChart2";
  IconName2["fileCloud"] = "fileCloud";
  IconName2["fileCode"] = "fileCode";
  IconName2["fileCopy"] = "fileCopy";
  IconName2["fileCopy2"] = "fileCopy2";
  IconName2["fileDamage"] = "fileDamage";
  IconName2["fileDownload"] = "fileDownload";
  IconName2["fileEdit"] = "fileEdit";
  IconName2["fileExcel"] = "fileExcel";
  IconName2["fileExcel2"] = "fileExcel2";
  IconName2["fileForbid"] = "fileForbid";
  IconName2["fileGif"] = "fileGif";
  IconName2["fileHistory"] = "fileHistory";
  IconName2["fileHwp"] = "fileHwp";
  IconName2["fileInfo"] = "fileInfo";
  IconName2["fileList"] = "fileList";
  IconName2["fileList2"] = "fileList2";
  IconName2["fileList3"] = "fileList3";
  IconName2["fileLock"] = "fileLock";
  IconName2["fileMark"] = "fileMark";
  IconName2["fileMusic"] = "fileMusic";
  IconName2["filePaper"] = "filePaper";
  IconName2["filePaper2"] = "filePaper2";
  IconName2["filePdf"] = "filePdf";
  IconName2["filePpt"] = "filePpt";
  IconName2["filePpt2"] = "filePpt2";
  IconName2["fileReduce"] = "fileReduce";
  IconName2["fileSearch"] = "fileSearch";
  IconName2["fileSettings"] = "fileSettings";
  IconName2["fileShield"] = "fileShield";
  IconName2["fileShield2"] = "fileShield2";
  IconName2["fileShred"] = "fileShred";
  IconName2["fileText"] = "fileText";
  IconName2["fileTransfer"] = "fileTransfer";
  IconName2["fileUnknow"] = "fileUnknow";
  IconName2["fileUpload"] = "fileUpload";
  IconName2["fileUser"] = "fileUser";
  IconName2["fileWarning"] = "fileWarning";
  IconName2["fileWord"] = "fileWord";
  IconName2["fileWord2"] = "fileWord2";
  IconName2["fileZip"] = "fileZip";
  IconName2["film"] = "film";
  IconName2["filter"] = "filter";
  IconName2["filter2"] = "filter2";
  IconName2["filter3"] = "filter3";
  IconName2["filterOff"] = "filterOff";
  IconName2["findReplace"] = "findReplace";
  IconName2["finder"] = "finder";
  IconName2["fingerprint"] = "fingerprint";
  IconName2["fingerprint2"] = "fingerprint2";
  IconName2["fire"] = "fire";
  IconName2["firefox"] = "firefox";
  IconName2["firstAidKit"] = "firstAidKit";
  IconName2["flag"] = "flag";
  IconName2["flag2"] = "flag2";
  IconName2["flashlight"] = "flashlight";
  IconName2["flask"] = "flask";
  IconName2["flightLand"] = "flightLand";
  IconName2["flightTakeoff"] = "flightTakeoff";
  IconName2["flood"] = "flood";
  IconName2["flutter"] = "flutter";
  IconName2["focus"] = "focus";
  IconName2["focus2"] = "focus2";
  IconName2["focus3"] = "focus3";
  IconName2["foggy"] = "foggy";
  IconName2["folder"] = "folder";
  IconName2["folder2"] = "folder2";
  IconName2["folder3"] = "folder3";
  IconName2["folder4"] = "folder4";
  IconName2["folder5"] = "folder5";
  IconName2["folderAdd"] = "folderAdd";
  IconName2["folderChart"] = "folderChart";
  IconName2["folderChart2"] = "folderChart2";
  IconName2["folderDownload"] = "folderDownload";
  IconName2["folderForbid"] = "folderForbid";
  IconName2["folderHistory"] = "folderHistory";
  IconName2["folderInfo"] = "folderInfo";
  IconName2["folderKeyhole"] = "folderKeyhole";
  IconName2["folderLock"] = "folderLock";
  IconName2["folderMusic"] = "folderMusic";
  IconName2["folderOpen"] = "folderOpen";
  IconName2["folderReceived"] = "folderReceived";
  IconName2["folderReduce"] = "folderReduce";
  IconName2["folderSettings"] = "folderSettings";
  IconName2["folderShared"] = "folderShared";
  IconName2["folderShield"] = "folderShield";
  IconName2["folderShield2"] = "folderShield2";
  IconName2["folderTransfer"] = "folderTransfer";
  IconName2["folderUnknow"] = "folderUnknow";
  IconName2["folderUpload"] = "folderUpload";
  IconName2["folderUser"] = "folderUser";
  IconName2["folderWarning"] = "folderWarning";
  IconName2["folderZip"] = "folderZip";
  IconName2["folders"] = "folders";
  IconName2["football"] = "football";
  IconName2["footprint"] = "footprint";
  IconName2["forbid"] = "forbid";
  IconName2["forbid2"] = "forbid2";
  IconName2["fridge"] = "fridge";
  IconName2["fullscreen"] = "fullscreen";
  IconName2["fullscreenExit"] = "fullscreenExit";
  IconName2["function"] = "function";
  IconName2["funds"] = "funds";
  IconName2["fundsBox"] = "fundsBox";
  IconName2["gallery"] = "gallery";
  IconName2["galleryUpload"] = "galleryUpload";
  IconName2["game"] = "game";
  IconName2["gamepad"] = "gamepad";
  IconName2["gasStation"] = "gasStation";
  IconName2["gatsby"] = "gatsby";
  IconName2["genderless"] = "genderless";
  IconName2["ghost"] = "ghost";
  IconName2["ghost2"] = "ghost2";
  IconName2["ghostSmile"] = "ghostSmile";
  IconName2["gift"] = "gift";
  IconName2["gift2"] = "gift2";
  IconName2["gitBranch"] = "gitBranch";
  IconName2["gitCommit"] = "gitCommit";
  IconName2["gitMerge"] = "gitMerge";
  IconName2["gitPullRequest"] = "gitPullRequest";
  IconName2["gitRepository"] = "gitRepository";
  IconName2["gitRepositoryCommits"] = "gitRepositoryCommits";
  IconName2["gitRepositoryPrivate"] = "gitRepositoryPrivate";
  IconName2["github"] = "github";
  IconName2["gitlab"] = "gitlab";
  IconName2["global"] = "global";
  IconName2["globe"] = "globe";
  IconName2["goblet"] = "goblet";
  IconName2["google"] = "google";
  IconName2["googlePlay"] = "googlePlay";
  IconName2["government"] = "government";
  IconName2["gps"] = "gps";
  IconName2["gradienter"] = "gradienter";
  IconName2["grid"] = "grid";
  IconName2["group"] = "group";
  IconName2["group2"] = "group2";
  IconName2["guide"] = "guide";
  IconName2["hail"] = "hail";
  IconName2["hammer"] = "hammer";
  IconName2["handCoin"] = "handCoin";
  IconName2["handHeart"] = "handHeart";
  IconName2["handSanitizer"] = "handSanitizer";
  IconName2["handbag"] = "handbag";
  IconName2["hardDrive"] = "hardDrive";
  IconName2["hardDrive2"] = "hardDrive2";
  IconName2["haze"] = "haze";
  IconName2["haze2"] = "haze2";
  IconName2["hd"] = "hd";
  IconName2["headphone"] = "headphone";
  IconName2["healthBook"] = "healthBook";
  IconName2["heart"] = "heart";
  IconName2["heart2"] = "heart2";
  IconName2["heart3"] = "heart3";
  IconName2["heartAdd"] = "heartAdd";
  IconName2["heartPulse"] = "heartPulse";
  IconName2["hearts"] = "hearts";
  IconName2["heavyShowers"] = "heavyShowers";
  IconName2["history"] = "history";
  IconName2["home"] = "home";
  IconName2["home2"] = "home2";
  IconName2["home3"] = "home3";
  IconName2["home4"] = "home4";
  IconName2["home5"] = "home5";
  IconName2["home6"] = "home6";
  IconName2["home7"] = "home7";
  IconName2["home8"] = "home8";
  IconName2["homeGear"] = "homeGear";
  IconName2["homeHeart"] = "homeHeart";
  IconName2["homeSmile"] = "homeSmile";
  IconName2["homeSmile2"] = "homeSmile2";
  IconName2["homeWifi"] = "homeWifi";
  IconName2["honorOfKings"] = "honorOfKings";
  IconName2["honour"] = "honour";
  IconName2["hospital"] = "hospital";
  IconName2["hotel"] = "hotel";
  IconName2["hotelBed"] = "hotelBed";
  IconName2["hotspot"] = "hotspot";
  IconName2["hq"] = "hq";
  IconName2["html5"] = "html5";
  IconName2["ie"] = "ie";
  IconName2["image"] = "image";
  IconName2["image2"] = "image2";
  IconName2["imageAdd"] = "imageAdd";
  IconName2["imageEdit"] = "imageEdit";
  IconName2["inbox"] = "inbox";
  IconName2["inboxArchive"] = "inboxArchive";
  IconName2["inboxUnarchive"] = "inboxUnarchive";
  IconName2["increaseDecrease"] = "increaseDecrease";
  IconName2["indeterminateCircle"] = "indeterminateCircle";
  IconName2["information"] = "information";
  IconName2["infraredThermometer"] = "infraredThermometer";
  IconName2["inkBottle"] = "inkBottle";
  IconName2["inputMethod"] = "inputMethod";
  IconName2["instagram"] = "instagram";
  IconName2["install"] = "install";
  IconName2["invision"] = "invision";
  IconName2["kakaoTalk"] = "kakaoTalk";
  IconName2["key"] = "key";
  IconName2["key2"] = "key2";
  IconName2["keyboard"] = "keyboard";
  IconName2["keyboardBox"] = "keyboardBox";
  IconName2["keynote"] = "keynote";
  IconName2["knife"] = "knife";
  IconName2["knifeBlood"] = "knifeBlood";
  IconName2["landscape"] = "landscape";
  IconName2["layout"] = "layout";
  IconName2["layout2"] = "layout2";
  IconName2["layout3"] = "layout3";
  IconName2["layout4"] = "layout4";
  IconName2["layout5"] = "layout5";
  IconName2["layout6"] = "layout6";
  IconName2["layoutBottom"] = "layoutBottom";
  IconName2["layoutBottom2"] = "layoutBottom2";
  IconName2["layoutColumn"] = "layoutColumn";
  IconName2["layoutGrid"] = "layoutGrid";
  IconName2["layoutLeft"] = "layoutLeft";
  IconName2["layoutLeft2"] = "layoutLeft2";
  IconName2["layoutMasonry"] = "layoutMasonry";
  IconName2["layoutRight"] = "layoutRight";
  IconName2["layoutRight2"] = "layoutRight2";
  IconName2["layoutRow"] = "layoutRow";
  IconName2["layoutTop"] = "layoutTop";
  IconName2["layoutTop2"] = "layoutTop2";
  IconName2["leaf"] = "leaf";
  IconName2["lifebuoy"] = "lifebuoy";
  IconName2["lightbulb"] = "lightbulb";
  IconName2["lightbulbFlash"] = "lightbulbFlash";
  IconName2["line"] = "line";
  IconName2["lineChart"] = "lineChart";
  IconName2["linkedin"] = "linkedin";
  IconName2["linkedinBox"] = "linkedinBox";
  IconName2["links"] = "links";
  IconName2["listSettings"] = "listSettings";
  IconName2["live"] = "live";
  IconName2["loader"] = "loader";
  IconName2["loader2"] = "loader2";
  IconName2["loader3"] = "loader3";
  IconName2["loader4"] = "loader4";
  IconName2["loader5"] = "loader5";
  IconName2["lock"] = "lock";
  IconName2["lock2"] = "lock2";
  IconName2["lockPassword"] = "lockPassword";
  IconName2["lockUnlock"] = "lockUnlock";
  IconName2["loginBox"] = "loginBox";
  IconName2["loginCircle"] = "loginCircle";
  IconName2["logoutBox"] = "logoutBox";
  IconName2["logoutBoxR"] = "logoutBoxR";
  IconName2["logoutCircle"] = "logoutCircle";
  IconName2["logoutCircleR"] = "logoutCircleR";
  IconName2["luggageCart"] = "luggageCart";
  IconName2["luggageDeposit"] = "luggageDeposit";
  IconName2["lungs"] = "lungs";
  IconName2["mac"] = "mac";
  IconName2["macbook"] = "macbook";
  IconName2["magic"] = "magic";
  IconName2["mail"] = "mail";
  IconName2["mailAdd"] = "mailAdd";
  IconName2["mailCheck"] = "mailCheck";
  IconName2["mailClose"] = "mailClose";
  IconName2["mailDownload"] = "mailDownload";
  IconName2["mailForbid"] = "mailForbid";
  IconName2["mailLock"] = "mailLock";
  IconName2["mailOpen"] = "mailOpen";
  IconName2["mailSend"] = "mailSend";
  IconName2["mailSettings"] = "mailSettings";
  IconName2["mailStar"] = "mailStar";
  IconName2["mailUnread"] = "mailUnread";
  IconName2["mailVolume"] = "mailVolume";
  IconName2["map"] = "map";
  IconName2["map2"] = "map2";
  IconName2["mapPin"] = "mapPin";
  IconName2["mapPin2"] = "mapPin2";
  IconName2["mapPin3"] = "mapPin3";
  IconName2["mapPin4"] = "mapPin4";
  IconName2["mapPin5"] = "mapPin5";
  IconName2["mapPinAdd"] = "mapPinAdd";
  IconName2["mapPinRange"] = "mapPinRange";
  IconName2["mapPinTime"] = "mapPinTime";
  IconName2["mapPinUser"] = "mapPinUser";
  IconName2["markPen"] = "markPen";
  IconName2["markdown"] = "markdown";
  IconName2["markup"] = "markup";
  IconName2["mastercard"] = "mastercard";
  IconName2["mastodon"] = "mastodon";
  IconName2["medal"] = "medal";
  IconName2["medal2"] = "medal2";
  IconName2["medicineBottle"] = "medicineBottle";
  IconName2["medium"] = "medium";
  IconName2["men"] = "men";
  IconName2["mentalHealth"] = "mentalHealth";
  IconName2["menu"] = "menu";
  IconName2["menu2"] = "menu2";
  IconName2["menu3"] = "menu3";
  IconName2["menu4"] = "menu4";
  IconName2["menu5"] = "menu5";
  IconName2["menuAdd"] = "menuAdd";
  IconName2["menuFold"] = "menuFold";
  IconName2["menuUnfold"] = "menuUnfold";
  IconName2["message"] = "message";
  IconName2["message2"] = "message2";
  IconName2["message3"] = "message3";
  IconName2["messenger"] = "messenger";
  IconName2["meteor"] = "meteor";
  IconName2["mic"] = "mic";
  IconName2["mic2"] = "mic2";
  IconName2["micOff"] = "micOff";
  IconName2["mickey"] = "mickey";
  IconName2["microscope"] = "microscope";
  IconName2["microsoft"] = "microsoft";
  IconName2["miniProgram"] = "miniProgram";
  IconName2["mist"] = "mist";
  IconName2["moneyCnyBox"] = "moneyCnyBox";
  IconName2["moneyCnyCircle"] = "moneyCnyCircle";
  IconName2["moneyDollarBox"] = "moneyDollarBox";
  IconName2["moneyDollarCircle"] = "moneyDollarCircle";
  IconName2["moneyEuroBox"] = "moneyEuroBox";
  IconName2["moneyEuroCircle"] = "moneyEuroCircle";
  IconName2["moneyPoundBox"] = "moneyPoundBox";
  IconName2["moneyPoundCircle"] = "moneyPoundCircle";
  IconName2["moon"] = "moon";
  IconName2["moonClear"] = "moonClear";
  IconName2["moonCloudy"] = "moonCloudy";
  IconName2["moonFoggy"] = "moonFoggy";
  IconName2["more"] = "more";
  IconName2["more2"] = "more2";
  IconName2["motorbike"] = "motorbike";
  IconName2["mouse"] = "mouse";
  IconName2["movie"] = "movie";
  IconName2["movie2"] = "movie2";
  IconName2["music"] = "music";
  IconName2["music2"] = "music2";
  IconName2["mv"] = "mv";
  IconName2["navigation"] = "navigation";
  IconName2["neteaseCloudMusic"] = "neteaseCloudMusic";
  IconName2["netflix"] = "netflix";
  IconName2["newspaper"] = "newspaper";
  IconName2["notification"] = "notification";
  IconName2["notification2"] = "notification2";
  IconName2["notification3"] = "notification3";
  IconName2["notification4"] = "notification4";
  IconName2["notificationBadge"] = "notificationBadge";
  IconName2["notificationOff"] = "notificationOff";
  IconName2["npmjs"] = "npmjs";
  IconName2["numbers"] = "numbers";
  IconName2["nurse"] = "nurse";
  IconName2["oil"] = "oil";
  IconName2["openArm"] = "openArm";
  IconName2["openSource"] = "openSource";
  IconName2["opera"] = "opera";
  IconName2["orderPlay"] = "orderPlay";
  IconName2["outlet"] = "outlet";
  IconName2["outlet2"] = "outlet2";
  IconName2["pages"] = "pages";
  IconName2["paint"] = "paint";
  IconName2["paintBrush"] = "paintBrush";
  IconName2["palette"] = "palette";
  IconName2["pantone"] = "pantone";
  IconName2["parent"] = "parent";
  IconName2["parentheses"] = "parentheses";
  IconName2["parking"] = "parking";
  IconName2["parkingBox"] = "parkingBox";
  IconName2["passport"] = "passport";
  IconName2["patreon"] = "patreon";
  IconName2["pause"] = "pause";
  IconName2["pauseCircle"] = "pauseCircle";
  IconName2["pauseMini"] = "pauseMini";
  IconName2["paypal"] = "paypal";
  IconName2["penNib"] = "penNib";
  IconName2["pencil"] = "pencil";
  IconName2["pencilRuler"] = "pencilRuler";
  IconName2["pencilRuler2"] = "pencilRuler2";
  IconName2["percent"] = "percent";
  IconName2["phone"] = "phone";
  IconName2["phoneCamera"] = "phoneCamera";
  IconName2["phoneFind"] = "phoneFind";
  IconName2["phoneLock"] = "phoneLock";
  IconName2["pictureInPicture"] = "pictureInPicture";
  IconName2["pictureInPicture2"] = "pictureInPicture2";
  IconName2["pictureInPictureExit"] = "pictureInPictureExit";
  IconName2["pieChart"] = "pieChart";
  IconName2["pieChart2"] = "pieChart2";
  IconName2["pieChartBox"] = "pieChartBox";
  IconName2["pinDistance"] = "pinDistance";
  IconName2["pingPong"] = "pingPong";
  IconName2["pinterest"] = "pinterest";
  IconName2["pixelfed"] = "pixelfed";
  IconName2["plane"] = "plane";
  IconName2["plant"] = "plant";
  IconName2["play"] = "play";
  IconName2["playCircle"] = "playCircle";
  IconName2["playList"] = "playList";
  IconName2["playList2"] = "playList2";
  IconName2["playListAdd"] = "playListAdd";
  IconName2["playMini"] = "playMini";
  IconName2["playstation"] = "playstation";
  IconName2["plug"] = "plug";
  IconName2["plug2"] = "plug2";
  IconName2["polaroid"] = "polaroid";
  IconName2["polaroid2"] = "polaroid2";
  IconName2["policeCar"] = "policeCar";
  IconName2["priceTag"] = "priceTag";
  IconName2["priceTag2"] = "priceTag2";
  IconName2["priceTag3"] = "priceTag3";
  IconName2["printer"] = "printer";
  IconName2["printerCloud"] = "printerCloud";
  IconName2["productHunt"] = "productHunt";
  IconName2["profile"] = "profile";
  IconName2["projector"] = "projector";
  IconName2["projector2"] = "projector2";
  IconName2["psychotherapy"] = "psychotherapy";
  IconName2["pulse"] = "pulse";
  IconName2["pushpin"] = "pushpin";
  IconName2["pushpin2"] = "pushpin2";
  IconName2["qq"] = "qq";
  IconName2["qrCode"] = "qrCode";
  IconName2["qrScan"] = "qrScan";
  IconName2["qrScan2"] = "qrScan2";
  IconName2["question"] = "question";
  IconName2["questionAnswer"] = "questionAnswer";
  IconName2["questionnaire"] = "questionnaire";
  IconName2["quillPen"] = "quillPen";
  IconName2["radar"] = "radar";
  IconName2["radio"] = "radio";
  IconName2["radio2"] = "radio2";
  IconName2["radioButton"] = "radioButton";
  IconName2["rainbow"] = "rainbow";
  IconName2["rainy"] = "rainy";
  IconName2["reactjs"] = "reactjs";
  IconName2["recordCircle"] = "recordCircle";
  IconName2["recordMail"] = "recordMail";
  IconName2["recycle"] = "recycle";
  IconName2["redPacket"] = "redPacket";
  IconName2["reddit"] = "reddit";
  IconName2["refresh"] = "refresh";
  IconName2["refund"] = "refund";
  IconName2["refund2"] = "refund2";
  IconName2["registered"] = "registered";
  IconName2["remixicon"] = "remixicon";
  IconName2["remoteControl"] = "remoteControl";
  IconName2["remoteControl2"] = "remoteControl2";
  IconName2["repeat"] = "repeat";
  IconName2["repeat2"] = "repeat2";
  IconName2["repeatOne"] = "repeatOne";
  IconName2["reply"] = "reply";
  IconName2["replyAll"] = "replyAll";
  IconName2["reserved"] = "reserved";
  IconName2["restTime"] = "restTime";
  IconName2["restart"] = "restart";
  IconName2["restaurant"] = "restaurant";
  IconName2["restaurant2"] = "restaurant2";
  IconName2["rewind"] = "rewind";
  IconName2["rewindMini"] = "rewindMini";
  IconName2["rhythm"] = "rhythm";
  IconName2["riding"] = "riding";
  IconName2["roadMap"] = "roadMap";
  IconName2["roadster"] = "roadster";
  IconName2["robot"] = "robot";
  IconName2["rocket"] = "rocket";
  IconName2["rocket2"] = "rocket2";
  IconName2["rotateLock"] = "rotateLock";
  IconName2["route"] = "route";
  IconName2["router"] = "router";
  IconName2["rss"] = "rss";
  IconName2["ruler"] = "ruler";
  IconName2["ruler2"] = "ruler2";
  IconName2["run"] = "run";
  IconName2["safari"] = "safari";
  IconName2["safe"] = "safe";
  IconName2["safe2"] = "safe2";
  IconName2["sailboat"] = "sailboat";
  IconName2["save"] = "save";
  IconName2["save2"] = "save2";
  IconName2["save3"] = "save3";
  IconName2["scales"] = "scales";
  IconName2["scales2"] = "scales2";
  IconName2["scales3"] = "scales3";
  IconName2["scan"] = "scan";
  IconName2["scan2"] = "scan2";
  IconName2["scissors"] = "scissors";
  IconName2["scissors2"] = "scissors2";
  IconName2["scissorsCut"] = "scissorsCut";
  IconName2["screenshot"] = "screenshot";
  IconName2["screenshot2"] = "screenshot2";
  IconName2["sdCard"] = "sdCard";
  IconName2["sdCardMini"] = "sdCardMini";
  IconName2["search"] = "search";
  IconName2["search2"] = "search2";
  IconName2["searchEye"] = "searchEye";
  IconName2["securePayment"] = "securePayment";
  IconName2["seedling"] = "seedling";
  IconName2["sendPlane"] = "sendPlane";
  IconName2["sendPlane2"] = "sendPlane2";
  IconName2["sensor"] = "sensor";
  IconName2["server"] = "server";
  IconName2["service"] = "service";
  IconName2["settings"] = "settings";
  IconName2["settings2"] = "settings2";
  IconName2["settings3"] = "settings3";
  IconName2["settings4"] = "settings4";
  IconName2["settings5"] = "settings5";
  IconName2["settings6"] = "settings6";
  IconName2["shape"] = "shape";
  IconName2["shape2"] = "shape2";
  IconName2["share"] = "share";
  IconName2["shareBox"] = "shareBox";
  IconName2["shareCircle"] = "shareCircle";
  IconName2["shareForward"] = "shareForward";
  IconName2["shareForward2"] = "shareForward2";
  IconName2["shareForwardBox"] = "shareForwardBox";
  IconName2["shield"] = "shield";
  IconName2["shieldCheck"] = "shieldCheck";
  IconName2["shieldCross"] = "shieldCross";
  IconName2["shieldFlash"] = "shieldFlash";
  IconName2["shieldKeyhole"] = "shieldKeyhole";
  IconName2["shieldStar"] = "shieldStar";
  IconName2["shieldUser"] = "shieldUser";
  IconName2["ship"] = "ship";
  IconName2["ship2"] = "ship2";
  IconName2["shirt"] = "shirt";
  IconName2["shoppingBag"] = "shoppingBag";
  IconName2["shoppingBag2"] = "shoppingBag2";
  IconName2["shoppingBag3"] = "shoppingBag3";
  IconName2["shoppingBasket"] = "shoppingBasket";
  IconName2["shoppingBasket2"] = "shoppingBasket2";
  IconName2["shoppingCart"] = "shoppingCart";
  IconName2["shoppingCart2"] = "shoppingCart2";
  IconName2["showers"] = "showers";
  IconName2["shuffle"] = "shuffle";
  IconName2["shutDown"] = "shutDown";
  IconName2["sideBar"] = "sideBar";
  IconName2["signalTower"] = "signalTower";
  IconName2["signalWifi"] = "signalWifi";
  IconName2["signalWifi1"] = "signalWifi1";
  IconName2["signalWifi2"] = "signalWifi2";
  IconName2["signalWifi3"] = "signalWifi3";
  IconName2["signalWifiError"] = "signalWifiError";
  IconName2["signalWifiOff"] = "signalWifiOff";
  IconName2["simCard"] = "simCard";
  IconName2["simCard2"] = "simCard2";
  IconName2["sip"] = "sip";
  IconName2["skipBack"] = "skipBack";
  IconName2["skipBackMini"] = "skipBackMini";
  IconName2["skipForward"] = "skipForward";
  IconName2["skipForwardMini"] = "skipForwardMini";
  IconName2["skull"] = "skull";
  IconName2["skull2"] = "skull2";
  IconName2["skype"] = "skype";
  IconName2["slack"] = "slack";
  IconName2["slice"] = "slice";
  IconName2["slideshow"] = "slideshow";
  IconName2["slideshow2"] = "slideshow2";
  IconName2["slideshow3"] = "slideshow3";
  IconName2["slideshow4"] = "slideshow4";
  IconName2["smartphone"] = "smartphone";
  IconName2["snapchat"] = "snapchat";
  IconName2["snowy"] = "snowy";
  IconName2["soundModule"] = "soundModule";
  IconName2["soundcloud"] = "soundcloud";
  IconName2["spaceShip"] = "spaceShip";
  IconName2["spam"] = "spam";
  IconName2["spam2"] = "spam2";
  IconName2["spam3"] = "spam3";
  IconName2["speaker"] = "speaker";
  IconName2["speaker2"] = "speaker2";
  IconName2["speaker3"] = "speaker3";
  IconName2["spectrum"] = "spectrum";
  IconName2["speed"] = "speed";
  IconName2["speedMini"] = "speedMini";
  IconName2["spotify"] = "spotify";
  IconName2["spy"] = "spy";
  IconName2["stack"] = "stack";
  IconName2["stackOverflow"] = "stackOverflow";
  IconName2["stackshare"] = "stackshare";
  IconName2["star"] = "star";
  IconName2["starHalf"] = "starHalf";
  IconName2["starHalfS"] = "starHalfS";
  IconName2["starS"] = "starS";
  IconName2["starSmile"] = "starSmile";
  IconName2["steam"] = "steam";
  IconName2["steering"] = "steering";
  IconName2["steering2"] = "steering2";
  IconName2["stethoscope"] = "stethoscope";
  IconName2["stickyNote"] = "stickyNote";
  IconName2["stickyNote2"] = "stickyNote2";
  IconName2["stock"] = "stock";
  IconName2["stop"] = "stop";
  IconName2["stopCircle"] = "stopCircle";
  IconName2["stopMini"] = "stopMini";
  IconName2["store"] = "store";
  IconName2["store2"] = "store2";
  IconName2["store3"] = "store3";
  IconName2["subtract"] = "subtract";
  IconName2["subway"] = "subway";
  IconName2["subwayWifi"] = "subwayWifi";
  IconName2["suitcase"] = "suitcase";
  IconName2["suitcase2"] = "suitcase2";
  IconName2["suitcase3"] = "suitcase3";
  IconName2["sun"] = "sun";
  IconName2["sunCloudy"] = "sunCloudy";
  IconName2["sunFoggy"] = "sunFoggy";
  IconName2["surgicalMask"] = "surgicalMask";
  IconName2["surroundSound"] = "surroundSound";
  IconName2["survey"] = "survey";
  IconName2["swap"] = "swap";
  IconName2["swapBox"] = "swapBox";
  IconName2["switch"] = "switch";
  IconName2["sword"] = "sword";
  IconName2["syringe"] = "syringe";
  IconName2["tBox"] = "tBox";
  IconName2["tShirt"] = "tShirt";
  IconName2["tShirt2"] = "tShirt2";
  IconName2["tShirtAir"] = "tShirtAir";
  IconName2["table"] = "table";
  IconName2["tableAlt"] = "tableAlt";
  IconName2["tablet"] = "tablet";
  IconName2["takeaway"] = "takeaway";
  IconName2["taobao"] = "taobao";
  IconName2["tape"] = "tape";
  IconName2["task"] = "task";
  IconName2["taxi"] = "taxi";
  IconName2["taxiWifi"] = "taxiWifi";
  IconName2["team"] = "team";
  IconName2["telegram"] = "telegram";
  IconName2["tempCold"] = "tempCold";
  IconName2["tempHot"] = "tempHot";
  IconName2["terminal"] = "terminal";
  IconName2["terminalBox"] = "terminalBox";
  IconName2["terminalWindow"] = "terminalWindow";
  IconName2["testTube"] = "testTube";
  IconName2["thermometer"] = "thermometer";
  IconName2["thumbDown"] = "thumbDown";
  IconName2["thumbUp"] = "thumbUp";
  IconName2["thunderstorms"] = "thunderstorms";
  IconName2["ticket"] = "ticket";
  IconName2["ticket2"] = "ticket2";
  IconName2["time"] = "time";
  IconName2["timer"] = "timer";
  IconName2["timer2"] = "timer2";
  IconName2["timerFlash"] = "timerFlash";
  IconName2["todo"] = "todo";
  IconName2["toggle"] = "toggle";
  IconName2["tools"] = "tools";
  IconName2["tornado"] = "tornado";
  IconName2["trademark"] = "trademark";
  IconName2["trafficLight"] = "trafficLight";
  IconName2["train"] = "train";
  IconName2["trainWifi"] = "trainWifi";
  IconName2["travesti"] = "travesti";
  IconName2["treasureMap"] = "treasureMap";
  IconName2["trello"] = "trello";
  IconName2["trophy"] = "trophy";
  IconName2["truck"] = "truck";
  IconName2["tumblr"] = "tumblr";
  IconName2["tv"] = "tv";
  IconName2["tv2"] = "tv2";
  IconName2["twitch"] = "twitch";
  IconName2["twitter"] = "twitter";
  IconName2["typhoon"] = "typhoon";
  IconName2["uDisk"] = "uDisk";
  IconName2["ubuntu"] = "ubuntu";
  IconName2["umbrella"] = "umbrella";
  IconName2["uninstall"] = "uninstall";
  IconName2["unsplash"] = "unsplash";
  IconName2["upload"] = "upload";
  IconName2["upload2"] = "upload2";
  IconName2["uploadCloud"] = "uploadCloud";
  IconName2["uploadCloud2"] = "uploadCloud2";
  IconName2["usb"] = "usb";
  IconName2["user"] = "user";
  IconName2["user2"] = "user2";
  IconName2["user3"] = "user3";
  IconName2["user4"] = "user4";
  IconName2["user5"] = "user5";
  IconName2["user6"] = "user6";
  IconName2["userAdd"] = "userAdd";
  IconName2["userFollow"] = "userFollow";
  IconName2["userHeart"] = "userHeart";
  IconName2["userLocation"] = "userLocation";
  IconName2["userReceived"] = "userReceived";
  IconName2["userReceived2"] = "userReceived2";
  IconName2["userSearch"] = "userSearch";
  IconName2["userSettings"] = "userSettings";
  IconName2["userShared"] = "userShared";
  IconName2["userShared2"] = "userShared2";
  IconName2["userSmile"] = "userSmile";
  IconName2["userStar"] = "userStar";
  IconName2["userUnfollow"] = "userUnfollow";
  IconName2["userVoice"] = "userVoice";
  IconName2["video"] = "video";
  IconName2["videoAdd"] = "videoAdd";
  IconName2["videoChat"] = "videoChat";
  IconName2["videoDownload"] = "videoDownload";
  IconName2["videoUpload"] = "videoUpload";
  IconName2["vidicon"] = "vidicon";
  IconName2["vidicon2"] = "vidicon2";
  IconName2["vimeo"] = "vimeo";
  IconName2["vip"] = "vip";
  IconName2["vipCrown"] = "vipCrown";
  IconName2["vipCrown2"] = "vipCrown2";
  IconName2["vipDiamond"] = "vipDiamond";
  IconName2["virus"] = "virus";
  IconName2["visa"] = "visa";
  IconName2["voiceRecognition"] = "voiceRecognition";
  IconName2["voiceprint"] = "voiceprint";
  IconName2["volumeDown"] = "volumeDown";
  IconName2["volumeMute"] = "volumeMute";
  IconName2["volumeOffVibrate"] = "volumeOffVibrate";
  IconName2["volumeUp"] = "volumeUp";
  IconName2["volumeVibrate"] = "volumeVibrate";
  IconName2["vuejs"] = "vuejs";
  IconName2["walk"] = "walk";
  IconName2["wallet"] = "wallet";
  IconName2["wallet2"] = "wallet2";
  IconName2["wallet3"] = "wallet3";
  IconName2["waterFlash"] = "waterFlash";
  IconName2["webcam"] = "webcam";
  IconName2["wechat"] = "wechat";
  IconName2["wechat2"] = "wechat2";
  IconName2["wechatPay"] = "wechatPay";
  IconName2["weibo"] = "weibo";
  IconName2["whatsapp"] = "whatsapp";
  IconName2["wheelchair"] = "wheelchair";
  IconName2["wifi"] = "wifi";
  IconName2["wifiOff"] = "wifiOff";
  IconName2["window"] = "window";
  IconName2["window2"] = "window2";
  IconName2["windows"] = "windows";
  IconName2["windy"] = "windy";
  IconName2["wirelessCharging"] = "wirelessCharging";
  IconName2["women"] = "women";
  IconName2["xbox"] = "xbox";
  IconName2["xing"] = "xing";
  IconName2["youtube"] = "youtube";
  IconName2["zcool"] = "zcool";
  IconName2["zhihu"] = "zhihu";
  IconName2["zoomIn"] = "zoomIn";
  IconName2["zoomOut"] = "zoomOut";
  IconName2["zzz"] = "zzz";
  return IconName2;
})(IconName || {});
var DISABLED_ICON_NAME = "forbid";
var LOADER_ICON_NAME = "loader4";
var FillIcon = /* @__PURE__ */ ((FillIcon2) => {
  FillIcon2["24HoursFill"] = "Ri24HoursFill";
  FillIcon2["4KFill"] = "Ri4KFill";
  FillIcon2["accountBox"] = "RiAccountBoxFill";
  FillIcon2["accountCircle"] = "RiAccountCircleFill";
  FillIcon2["accountPinBox"] = "RiAccountPinBoxFill";
  FillIcon2["accountPinCircle"] = "RiAccountPinCircleFill";
  FillIcon2["add"] = "RiAddFill";
  FillIcon2["addBox"] = "RiAddBoxFill";
  FillIcon2["addCircle"] = "RiAddCircleFill";
  FillIcon2["admin"] = "RiAdminFill";
  FillIcon2["advertisement"] = "RiAdvertisementFill";
  FillIcon2["airplay"] = "RiAirplayFill";
  FillIcon2["alarm"] = "RiAlarmFill";
  FillIcon2["alarmWarning"] = "RiAlarmWarningFill";
  FillIcon2["album"] = "RiAlbumFill";
  FillIcon2["alert"] = "RiAlertFill";
  FillIcon2["aliens"] = "RiAliensFill";
  FillIcon2["alipay"] = "RiAlipayFill";
  FillIcon2["amazon"] = "RiAmazonFill";
  FillIcon2["anchor"] = "RiAnchorFill";
  FillIcon2["ancientGate"] = "RiAncientGateFill";
  FillIcon2["ancientPavilion"] = "RiAncientPavilionFill";
  FillIcon2["android"] = "RiAndroidFill";
  FillIcon2["angularjs"] = "RiAngularjsFill";
  FillIcon2["anticlockwise"] = "RiAnticlockwiseFill";
  FillIcon2["anticlockwise2"] = "RiAnticlockwise2Fill";
  FillIcon2["appStore"] = "RiAppStoreFill";
  FillIcon2["apple"] = "RiAppleFill";
  FillIcon2["apps"] = "RiAppsFill";
  FillIcon2["apps2"] = "RiApps2Fill";
  FillIcon2["archive"] = "RiArchiveFill";
  FillIcon2["archiveDrawer"] = "RiArchiveDrawerFill";
  FillIcon2["arrowDown"] = "RiArrowDownFill";
  FillIcon2["arrowDownCircle"] = "RiArrowDownCircleFill";
  FillIcon2["arrowDownS"] = "RiArrowDownSFill";
  FillIcon2["arrowDropDown"] = "RiArrowDropDownFill";
  FillIcon2["arrowDropLeft"] = "RiArrowDropLeftFill";
  FillIcon2["arrowDropRight"] = "RiArrowDropRightFill";
  FillIcon2["arrowDropUp"] = "RiArrowDropUpFill";
  FillIcon2["arrowGoBack"] = "RiArrowGoBackFill";
  FillIcon2["arrowGoForward"] = "RiArrowGoForwardFill";
  FillIcon2["arrowLeft"] = "RiArrowLeftFill";
  FillIcon2["arrowLeftCircle"] = "RiArrowLeftCircleFill";
  FillIcon2["arrowLeftDown"] = "RiArrowLeftDownFill";
  FillIcon2["arrowLeftRight"] = "RiArrowLeftRightFill";
  FillIcon2["arrowLeftS"] = "RiArrowLeftSFill";
  FillIcon2["arrowLeftUp"] = "RiArrowLeftUpFill";
  FillIcon2["arrowRight"] = "RiArrowRightFill";
  FillIcon2["arrowRightCircle"] = "RiArrowRightCircleFill";
  FillIcon2["arrowRightDown"] = "RiArrowRightDownFill";
  FillIcon2["arrowRightS"] = "RiArrowRightSFill";
  FillIcon2["arrowRightUp"] = "RiArrowRightUpFill";
  FillIcon2["arrowUp"] = "RiArrowUpFill";
  FillIcon2["arrowUpCircle"] = "RiArrowUpCircleFill";
  FillIcon2["arrowUpDown"] = "RiArrowUpDownFill";
  FillIcon2["arrowUpS"] = "RiArrowUpSFill";
  FillIcon2["artboard"] = "RiArtboardFill";
  FillIcon2["artboard2"] = "RiArtboard2Fill";
  FillIcon2["article"] = "RiArticleFill";
  FillIcon2["aspectRatio"] = "RiAspectRatioFill";
  FillIcon2["at"] = "RiAtFill";
  FillIcon2["attachment"] = "RiAttachmentFill";
  FillIcon2["auction"] = "RiAuctionFill";
  FillIcon2["award"] = "RiAwardFill";
  FillIcon2["baidu"] = "RiBaiduFill";
  FillIcon2["ballPen"] = "RiBallPenFill";
  FillIcon2["bank"] = "RiBankFill";
  FillIcon2["bankCard"] = "RiBankCardFill";
  FillIcon2["bankCard2"] = "RiBankCard2Fill";
  FillIcon2["barChart"] = "RiBarChartFill";
  FillIcon2["barChart2"] = "RiBarChart2Fill";
  FillIcon2["barChartBox"] = "RiBarChartBoxFill";
  FillIcon2["barChartGrouped"] = "RiBarChartGroupedFill";
  FillIcon2["barChartHorizontal"] = "RiBarChartHorizontalFill";
  FillIcon2["barcode"] = "RiBarcodeFill";
  FillIcon2["barcodeBox"] = "RiBarcodeBoxFill";
  FillIcon2["barricade"] = "RiBarricadeFill";
  FillIcon2["baseStation"] = "RiBaseStationFill";
  FillIcon2["basketball"] = "RiBasketballFill";
  FillIcon2["battery"] = "RiBatteryFill";
  FillIcon2["battery2"] = "RiBattery2Fill";
  FillIcon2["battery2Charge"] = "RiBattery2ChargeFill";
  FillIcon2["batteryCharge"] = "RiBatteryChargeFill";
  FillIcon2["batteryLow"] = "RiBatteryLowFill";
  FillIcon2["batterySaver"] = "RiBatterySaverFill";
  FillIcon2["batteryShare"] = "RiBatteryShareFill";
  FillIcon2["bearSmile"] = "RiBearSmileFill";
  FillIcon2["behance"] = "RiBehanceFill";
  FillIcon2["bell"] = "RiBellFill";
  FillIcon2["bike"] = "RiBikeFill";
  FillIcon2["bilibili"] = "RiBilibiliFill";
  FillIcon2["bill"] = "RiBillFill";
  FillIcon2["billiards"] = "RiBilliardsFill";
  FillIcon2["bitCoin"] = "RiBitCoinFill";
  FillIcon2["blaze"] = "RiBlazeFill";
  FillIcon2["bluetooth"] = "RiBluetoothFill";
  FillIcon2["bluetoothConnect"] = "RiBluetoothConnectFill";
  FillIcon2["blurOff"] = "RiBlurOffFill";
  FillIcon2["bodyScan"] = "RiBodyScanFill";
  FillIcon2["book"] = "RiBookFill";
  FillIcon2["book2"] = "RiBook2Fill";
  FillIcon2["book3"] = "RiBook3Fill";
  FillIcon2["bookMark"] = "RiBookMarkFill";
  FillIcon2["bookOpen"] = "RiBookOpenFill";
  FillIcon2["bookRead"] = "RiBookReadFill";
  FillIcon2["booklet"] = "RiBookletFill";
  FillIcon2["bookmark"] = "RiBookmarkFill";
  FillIcon2["bookmark2"] = "RiBookmark2Fill";
  FillIcon2["bookmark3"] = "RiBookmark3Fill";
  FillIcon2["boxing"] = "RiBoxingFill";
  FillIcon2["braces"] = "RiBracesFill";
  FillIcon2["brackets"] = "RiBracketsFill";
  FillIcon2["briefcase"] = "RiBriefcaseFill";
  FillIcon2["briefcase2"] = "RiBriefcase2Fill";
  FillIcon2["briefcase3"] = "RiBriefcase3Fill";
  FillIcon2["briefcase4"] = "RiBriefcase4Fill";
  FillIcon2["briefcase5"] = "RiBriefcase5Fill";
  FillIcon2["broadcast"] = "RiBroadcastFill";
  FillIcon2["brush"] = "RiBrushFill";
  FillIcon2["brush2"] = "RiBrush2Fill";
  FillIcon2["brush3"] = "RiBrush3Fill";
  FillIcon2["brush4"] = "RiBrush4Fill";
  FillIcon2["bubbleChart"] = "RiBubbleChartFill";
  FillIcon2["bug"] = "RiBugFill";
  FillIcon2["bug2"] = "RiBug2Fill";
  FillIcon2["building"] = "RiBuildingFill";
  FillIcon2["building2"] = "RiBuilding2Fill";
  FillIcon2["building3"] = "RiBuilding3Fill";
  FillIcon2["building4"] = "RiBuilding4Fill";
  FillIcon2["bus"] = "RiBusFill";
  FillIcon2["bus2"] = "RiBus2Fill";
  FillIcon2["busWifi"] = "RiBusWifiFill";
  FillIcon2["cactus"] = "RiCactusFill";
  FillIcon2["cake"] = "RiCakeFill";
  FillIcon2["cake2"] = "RiCake2Fill";
  FillIcon2["cake3"] = "RiCake3Fill";
  FillIcon2["calculator"] = "RiCalculatorFill";
  FillIcon2["calendar"] = "RiCalendarFill";
  FillIcon2["calendar2"] = "RiCalendar2Fill";
  FillIcon2["calendarCheck"] = "RiCalendarCheckFill";
  FillIcon2["calendarEvent"] = "RiCalendarEventFill";
  FillIcon2["calendarTodo"] = "RiCalendarTodoFill";
  FillIcon2["camera"] = "RiCameraFill";
  FillIcon2["camera2"] = "RiCamera2Fill";
  FillIcon2["camera3"] = "RiCamera3Fill";
  FillIcon2["cameraLens"] = "RiCameraLensFill";
  FillIcon2["cameraOff"] = "RiCameraOffFill";
  FillIcon2["cameraSwitch"] = "RiCameraSwitchFill";
  FillIcon2["capsule"] = "RiCapsuleFill";
  FillIcon2["car"] = "RiCarFill";
  FillIcon2["carWashing"] = "RiCarWashingFill";
  FillIcon2["caravan"] = "RiCaravanFill";
  FillIcon2["cast"] = "RiCastFill";
  FillIcon2["cellphone"] = "RiCellphoneFill";
  FillIcon2["celsius"] = "RiCelsiusFill";
  FillIcon2["centos"] = "RiCentosFill";
  FillIcon2["characterRecognition"] = "RiCharacterRecognitionFill";
  FillIcon2["chargingPile"] = "RiChargingPileFill";
  FillIcon2["chargingPile2"] = "RiChargingPile2Fill";
  FillIcon2["chat1"] = "RiChat1Fill";
  FillIcon2["chat2"] = "RiChat2Fill";
  FillIcon2["chat3"] = "RiChat3Fill";
  FillIcon2["chat4"] = "RiChat4Fill";
  FillIcon2["chatCheck"] = "RiChatCheckFill";
  FillIcon2["chatDelete"] = "RiChatDeleteFill";
  FillIcon2["chatDownload"] = "RiChatDownloadFill";
  FillIcon2["chatFollowUp"] = "RiChatFollowUpFill";
  FillIcon2["chatForward"] = "RiChatForwardFill";
  FillIcon2["chatHeart"] = "RiChatHeartFill";
  FillIcon2["chatHistory"] = "RiChatHistoryFill";
  FillIcon2["chatNew"] = "RiChatNewFill";
  FillIcon2["chatOff"] = "RiChatOffFill";
  FillIcon2["chatPoll"] = "RiChatPollFill";
  FillIcon2["chatPrivate"] = "RiChatPrivateFill";
  FillIcon2["chatQuote"] = "RiChatQuoteFill";
  FillIcon2["chatSettings"] = "RiChatSettingsFill";
  FillIcon2["chatSmile"] = "RiChatSmileFill";
  FillIcon2["chatSmile2"] = "RiChatSmile2Fill";
  FillIcon2["chatSmile3"] = "RiChatSmile3Fill";
  FillIcon2["chatUpload"] = "RiChatUploadFill";
  FillIcon2["chatVoice"] = "RiChatVoiceFill";
  FillIcon2["check"] = "RiCheckFill";
  FillIcon2["checkDouble"] = "RiCheckDoubleFill";
  FillIcon2["checkbox"] = "RiCheckboxFill";
  FillIcon2["checkboxBlank"] = "RiCheckboxBlankFill";
  FillIcon2["checkboxBlankCircle"] = "RiCheckboxBlankCircleFill";
  FillIcon2["checkboxCircle"] = "RiCheckboxCircleFill";
  FillIcon2["checkboxIndeterminate"] = "RiCheckboxIndeterminateFill";
  FillIcon2["checkboxMultiple"] = "RiCheckboxMultipleFill";
  FillIcon2["checkboxMultipleBlank"] = "RiCheckboxMultipleBlankFill";
  FillIcon2["chinaRailway"] = "RiChinaRailwayFill";
  FillIcon2["chrome"] = "RiChromeFill";
  FillIcon2["clapperboard"] = "RiClapperboardFill";
  FillIcon2["clipboard"] = "RiClipboardFill";
  FillIcon2["clockwise"] = "RiClockwiseFill";
  FillIcon2["clockwise2"] = "RiClockwise2Fill";
  FillIcon2["close"] = "RiCloseFill";
  FillIcon2["closeCircle"] = "RiCloseCircleFill";
  FillIcon2["closedCaptioning"] = "RiClosedCaptioningFill";
  FillIcon2["cloud"] = "RiCloudFill";
  FillIcon2["cloudOff"] = "RiCloudOffFill";
  FillIcon2["cloudWindy"] = "RiCloudWindyFill";
  FillIcon2["cloudy"] = "RiCloudyFill";
  FillIcon2["cloudy2"] = "RiCloudy2Fill";
  FillIcon2["code"] = "RiCodeFill";
  FillIcon2["codeBox"] = "RiCodeBoxFill";
  FillIcon2["codeS"] = "RiCodeSFill";
  FillIcon2["codeSSlash"] = "RiCodeSSlashFill";
  FillIcon2["codepen"] = "RiCodepenFill";
  FillIcon2["coin"] = "RiCoinFill";
  FillIcon2["coins"] = "RiCoinsFill";
  FillIcon2["collage"] = "RiCollageFill";
  FillIcon2["command"] = "RiCommandFill";
  FillIcon2["community"] = "RiCommunityFill";
  FillIcon2["compass"] = "RiCompassFill";
  FillIcon2["compass2"] = "RiCompass2Fill";
  FillIcon2["compass3"] = "RiCompass3Fill";
  FillIcon2["compass4"] = "RiCompass4Fill";
  FillIcon2["compassDiscover"] = "RiCompassDiscoverFill";
  FillIcon2["compasses"] = "RiCompassesFill";
  FillIcon2["compasses2"] = "RiCompasses2Fill";
  FillIcon2["computer"] = "RiComputerFill";
  FillIcon2["contacts"] = "RiContactsFill";
  FillIcon2["contactsBook"] = "RiContactsBookFill";
  FillIcon2["contactsBook2"] = "RiContactsBook2Fill";
  FillIcon2["contactsBookUpload"] = "RiContactsBookUploadFill";
  FillIcon2["contrast"] = "RiContrastFill";
  FillIcon2["contrast2"] = "RiContrast2Fill";
  FillIcon2["contrastDrop"] = "RiContrastDropFill";
  FillIcon2["contrastDrop2"] = "RiContrastDrop2Fill";
  FillIcon2["copperCoin"] = "RiCopperCoinFill";
  FillIcon2["copperDiamond"] = "RiCopperDiamondFill";
  FillIcon2["copyleft"] = "RiCopyleftFill";
  FillIcon2["copyright"] = "RiCopyrightFill";
  FillIcon2["coreos"] = "RiCoreosFill";
  FillIcon2["coupon"] = "RiCouponFill";
  FillIcon2["coupon2"] = "RiCoupon2Fill";
  FillIcon2["coupon3"] = "RiCoupon3Fill";
  FillIcon2["coupon4"] = "RiCoupon4Fill";
  FillIcon2["coupon5"] = "RiCoupon5Fill";
  FillIcon2["cpu"] = "RiCpuFill";
  FillIcon2["creativeCommons"] = "RiCreativeCommonsFill";
  FillIcon2["creativeCommonsBy"] = "RiCreativeCommonsByFill";
  FillIcon2["creativeCommonsNc"] = "RiCreativeCommonsNcFill";
  FillIcon2["creativeCommonsNd"] = "RiCreativeCommonsNdFill";
  FillIcon2["creativeCommonsSa"] = "RiCreativeCommonsSaFill";
  FillIcon2["creativeCommonsZero"] = "RiCreativeCommonsZeroFill";
  FillIcon2["criminal"] = "RiCriminalFill";
  FillIcon2["crop"] = "RiCropFill";
  FillIcon2["crop2"] = "RiCrop2Fill";
  FillIcon2["css3"] = "RiCss3Fill";
  FillIcon2["cup"] = "RiCupFill";
  FillIcon2["currency"] = "RiCurrencyFill";
  FillIcon2["cursor"] = "RiCursorFill";
  FillIcon2["customerService"] = "RiCustomerServiceFill";
  FillIcon2["customerService2"] = "RiCustomerService2Fill";
  FillIcon2["dashboard"] = "RiDashboardFill";
  FillIcon2["dashboard2"] = "RiDashboard2Fill";
  FillIcon2["dashboard3"] = "RiDashboard3Fill";
  FillIcon2["database"] = "RiDatabaseFill";
  FillIcon2["database2"] = "RiDatabase2Fill";
  FillIcon2["deleteBack"] = "RiDeleteBackFill";
  FillIcon2["deleteBack2"] = "RiDeleteBack2Fill";
  FillIcon2["deleteBin"] = "RiDeleteBinFill";
  FillIcon2["deleteBin2"] = "RiDeleteBin2Fill";
  FillIcon2["deleteBin3"] = "RiDeleteBin3Fill";
  FillIcon2["deleteBin4"] = "RiDeleteBin4Fill";
  FillIcon2["deleteBin5"] = "RiDeleteBin5Fill";
  FillIcon2["deleteBin6"] = "RiDeleteBin6Fill";
  FillIcon2["deleteBin7"] = "RiDeleteBin7Fill";
  FillIcon2["device"] = "RiDeviceFill";
  FillIcon2["deviceRecover"] = "RiDeviceRecoverFill";
  FillIcon2["dingding"] = "RiDingdingFill";
  FillIcon2["direction"] = "RiDirectionFill";
  FillIcon2["disc"] = "RiDiscFill";
  FillIcon2["discord"] = "RiDiscordFill";
  FillIcon2["discuss"] = "RiDiscussFill";
  FillIcon2["dislike"] = "RiDislikeFill";
  FillIcon2["disqus"] = "RiDisqusFill";
  FillIcon2["divide"] = "RiDivideFill";
  FillIcon2["donutChart"] = "RiDonutChartFill";
  FillIcon2["door"] = "RiDoorFill";
  FillIcon2["doorClosed"] = "RiDoorClosedFill";
  FillIcon2["doorLock"] = "RiDoorLockFill";
  FillIcon2["doorLockBox"] = "RiDoorLockBoxFill";
  FillIcon2["doorOpen"] = "RiDoorOpenFill";
  FillIcon2["dossier"] = "RiDossierFill";
  FillIcon2["douban"] = "RiDoubanFill";
  FillIcon2["download"] = "RiDownloadFill";
  FillIcon2["download2"] = "RiDownload2Fill";
  FillIcon2["downloadCloud"] = "RiDownloadCloudFill";
  FillIcon2["downloadCloud2"] = "RiDownloadCloud2Fill";
  FillIcon2["draft"] = "RiDraftFill";
  FillIcon2["dragDrop"] = "RiDragDropFill";
  FillIcon2["dragMove"] = "RiDragMoveFill";
  FillIcon2["dragMove2"] = "RiDragMove2Fill";
  FillIcon2["dribbble"] = "RiDribbbleFill";
  FillIcon2["drive"] = "RiDriveFill";
  FillIcon2["drizzle"] = "RiDrizzleFill";
  FillIcon2["drop"] = "RiDropFill";
  FillIcon2["dropbox"] = "RiDropboxFill";
  FillIcon2["dualSim1"] = "RiDualSim1Fill";
  FillIcon2["dualSim2"] = "RiDualSim2Fill";
  FillIcon2["dv"] = "RiDvFill";
  FillIcon2["dvd"] = "RiDvdFill";
  FillIcon2["eBike"] = "RiEBikeFill";
  FillIcon2["eBike2"] = "RiEBike2Fill";
  FillIcon2["earth"] = "RiEarthFill";
  FillIcon2["earthquake"] = "RiEarthquakeFill";
  FillIcon2["edge"] = "RiEdgeFill";
  FillIcon2["edit"] = "RiEditFill";
  FillIcon2["edit2"] = "RiEdit2Fill";
  FillIcon2["editBox"] = "RiEditBoxFill";
  FillIcon2["editCircle"] = "RiEditCircleFill";
  FillIcon2["eject"] = "RiEjectFill";
  FillIcon2["emotion"] = "RiEmotionFill";
  FillIcon2["emotion2"] = "RiEmotion2Fill";
  FillIcon2["emotionHappy"] = "RiEmotionHappyFill";
  FillIcon2["emotionLaugh"] = "RiEmotionLaughFill";
  FillIcon2["emotionNormal"] = "RiEmotionNormalFill";
  FillIcon2["emotionSad"] = "RiEmotionSadFill";
  FillIcon2["emotionUnhappy"] = "RiEmotionUnhappyFill";
  FillIcon2["empathize"] = "RiEmpathizeFill";
  FillIcon2["equalizer"] = "RiEqualizerFill";
  FillIcon2["eraser"] = "RiEraserFill";
  FillIcon2["errorWarning"] = "RiErrorWarningFill";
  FillIcon2["evernote"] = "RiEvernoteFill";
  FillIcon2["exchange"] = "RiExchangeFill";
  FillIcon2["exchangeBox"] = "RiExchangeBoxFill";
  FillIcon2["exchangeCny"] = "RiExchangeCnyFill";
  FillIcon2["exchangeDollar"] = "RiExchangeDollarFill";
  FillIcon2["exchangeFunds"] = "RiExchangeFundsFill";
  FillIcon2["externalLink"] = "RiExternalLinkFill";
  FillIcon2["eye"] = "RiEyeFill";
  FillIcon2["eye2"] = "RiEye2Fill";
  FillIcon2["eyeClose"] = "RiEyeCloseFill";
  FillIcon2["eyeOff"] = "RiEyeOffFill";
  FillIcon2["facebook"] = "RiFacebookFill";
  FillIcon2["facebookBox"] = "RiFacebookBoxFill";
  FillIcon2["facebookCircle"] = "RiFacebookCircleFill";
  FillIcon2["fahrenheit"] = "RiFahrenheitFill";
  FillIcon2["feedback"] = "RiFeedbackFill";
  FillIcon2["file"] = "RiFileFill";
  FillIcon2["file2"] = "RiFile2Fill";
  FillIcon2["file3"] = "RiFile3Fill";
  FillIcon2["file4"] = "RiFile4Fill";
  FillIcon2["fileAdd"] = "RiFileAddFill";
  FillIcon2["fileChart"] = "RiFileChartFill";
  FillIcon2["fileChart2"] = "RiFileChart2Fill";
  FillIcon2["fileCloud"] = "RiFileCloudFill";
  FillIcon2["fileCode"] = "RiFileCodeFill";
  FillIcon2["fileCopy"] = "RiFileCopyFill";
  FillIcon2["fileCopy2"] = "RiFileCopy2Fill";
  FillIcon2["fileDamage"] = "RiFileDamageFill";
  FillIcon2["fileDownload"] = "RiFileDownloadFill";
  FillIcon2["fileEdit"] = "RiFileEditFill";
  FillIcon2["fileExcel"] = "RiFileExcelFill";
  FillIcon2["fileExcel2"] = "RiFileExcel2Fill";
  FillIcon2["fileForbid"] = "RiFileForbidFill";
  FillIcon2["fileGif"] = "RiFileGifFill";
  FillIcon2["fileHistory"] = "RiFileHistoryFill";
  FillIcon2["fileHwp"] = "RiFileHwpFill";
  FillIcon2["fileInfo"] = "RiFileInfoFill";
  FillIcon2["fileList"] = "RiFileListFill";
  FillIcon2["fileList2"] = "RiFileList2Fill";
  FillIcon2["fileList3"] = "RiFileList3Fill";
  FillIcon2["fileLock"] = "RiFileLockFill";
  FillIcon2["fileMark"] = "RiFileMarkFill";
  FillIcon2["fileMusic"] = "RiFileMusicFill";
  FillIcon2["filePaper"] = "RiFilePaperFill";
  FillIcon2["filePaper2"] = "RiFilePaper2Fill";
  FillIcon2["filePdf"] = "RiFilePdfFill";
  FillIcon2["filePpt"] = "RiFilePptFill";
  FillIcon2["filePpt2"] = "RiFilePpt2Fill";
  FillIcon2["fileReduce"] = "RiFileReduceFill";
  FillIcon2["fileSearch"] = "RiFileSearchFill";
  FillIcon2["fileSettings"] = "RiFileSettingsFill";
  FillIcon2["fileShield"] = "RiFileShieldFill";
  FillIcon2["fileShield2"] = "RiFileShield2Fill";
  FillIcon2["fileShred"] = "RiFileShredFill";
  FillIcon2["fileText"] = "RiFileTextFill";
  FillIcon2["fileTransfer"] = "RiFileTransferFill";
  FillIcon2["fileUnknow"] = "RiFileUnknowFill";
  FillIcon2["fileUpload"] = "RiFileUploadFill";
  FillIcon2["fileUser"] = "RiFileUserFill";
  FillIcon2["fileWarning"] = "RiFileWarningFill";
  FillIcon2["fileWord"] = "RiFileWordFill";
  FillIcon2["fileWord2"] = "RiFileWord2Fill";
  FillIcon2["fileZip"] = "RiFileZipFill";
  FillIcon2["film"] = "RiFilmFill";
  FillIcon2["filter"] = "RiFilterFill";
  FillIcon2["filter2"] = "RiFilter2Fill";
  FillIcon2["filter3"] = "RiFilter3Fill";
  FillIcon2["filterOff"] = "RiFilterOffFill";
  FillIcon2["findReplace"] = "RiFindReplaceFill";
  FillIcon2["finder"] = "RiFinderFill";
  FillIcon2["fingerprint"] = "RiFingerprintFill";
  FillIcon2["fingerprint2"] = "RiFingerprint2Fill";
  FillIcon2["fire"] = "RiFireFill";
  FillIcon2["firefox"] = "RiFirefoxFill";
  FillIcon2["firstAidKit"] = "RiFirstAidKitFill";
  FillIcon2["flag"] = "RiFlagFill";
  FillIcon2["flag2"] = "RiFlag2Fill";
  FillIcon2["flashlight"] = "RiFlashlightFill";
  FillIcon2["flask"] = "RiFlaskFill";
  FillIcon2["flightLand"] = "RiFlightLandFill";
  FillIcon2["flightTakeoff"] = "RiFlightTakeoffFill";
  FillIcon2["flood"] = "RiFloodFill";
  FillIcon2["flutter"] = "RiFlutterFill";
  FillIcon2["focus"] = "RiFocusFill";
  FillIcon2["focus2"] = "RiFocus2Fill";
  FillIcon2["focus3"] = "RiFocus3Fill";
  FillIcon2["foggy"] = "RiFoggyFill";
  FillIcon2["folder"] = "RiFolderFill";
  FillIcon2["folder2"] = "RiFolder2Fill";
  FillIcon2["folder3"] = "RiFolder3Fill";
  FillIcon2["folder4"] = "RiFolder4Fill";
  FillIcon2["folder5"] = "RiFolder5Fill";
  FillIcon2["folderAdd"] = "RiFolderAddFill";
  FillIcon2["folderChart"] = "RiFolderChartFill";
  FillIcon2["folderChart2"] = "RiFolderChart2Fill";
  FillIcon2["folderDownload"] = "RiFolderDownloadFill";
  FillIcon2["folderForbid"] = "RiFolderForbidFill";
  FillIcon2["folderHistory"] = "RiFolderHistoryFill";
  FillIcon2["folderInfo"] = "RiFolderInfoFill";
  FillIcon2["folderKeyhole"] = "RiFolderKeyholeFill";
  FillIcon2["folderLock"] = "RiFolderLockFill";
  FillIcon2["folderMusic"] = "RiFolderMusicFill";
  FillIcon2["folderOpen"] = "RiFolderOpenFill";
  FillIcon2["folderReceived"] = "RiFolderReceivedFill";
  FillIcon2["folderReduce"] = "RiFolderReduceFill";
  FillIcon2["folderSettings"] = "RiFolderSettingsFill";
  FillIcon2["folderShared"] = "RiFolderSharedFill";
  FillIcon2["folderShield"] = "RiFolderShieldFill";
  FillIcon2["folderShield2"] = "RiFolderShield2Fill";
  FillIcon2["folderTransfer"] = "RiFolderTransferFill";
  FillIcon2["folderUnknow"] = "RiFolderUnknowFill";
  FillIcon2["folderUpload"] = "RiFolderUploadFill";
  FillIcon2["folderUser"] = "RiFolderUserFill";
  FillIcon2["folderWarning"] = "RiFolderWarningFill";
  FillIcon2["folderZip"] = "RiFolderZipFill";
  FillIcon2["folders"] = "RiFoldersFill";
  FillIcon2["football"] = "RiFootballFill";
  FillIcon2["footprint"] = "RiFootprintFill";
  FillIcon2["forbid"] = "RiForbidFill";
  FillIcon2["forbid2"] = "RiForbid2Fill";
  FillIcon2["fridge"] = "RiFridgeFill";
  FillIcon2["fullscreen"] = "RiFullscreenFill";
  FillIcon2["fullscreenExit"] = "RiFullscreenExitFill";
  FillIcon2["function"] = "RiFunctionFill";
  FillIcon2["funds"] = "RiFundsFill";
  FillIcon2["fundsBox"] = "RiFundsBoxFill";
  FillIcon2["gallery"] = "RiGalleryFill";
  FillIcon2["galleryUpload"] = "RiGalleryUploadFill";
  FillIcon2["game"] = "RiGameFill";
  FillIcon2["gamepad"] = "RiGamepadFill";
  FillIcon2["gasStation"] = "RiGasStationFill";
  FillIcon2["gatsby"] = "RiGatsbyFill";
  FillIcon2["genderless"] = "RiGenderlessFill";
  FillIcon2["ghost"] = "RiGhostFill";
  FillIcon2["ghost2"] = "RiGhost2Fill";
  FillIcon2["ghostSmile"] = "RiGhostSmileFill";
  FillIcon2["gift"] = "RiGiftFill";
  FillIcon2["gift2"] = "RiGift2Fill";
  FillIcon2["gitBranch"] = "RiGitBranchFill";
  FillIcon2["gitCommit"] = "RiGitCommitFill";
  FillIcon2["gitMerge"] = "RiGitMergeFill";
  FillIcon2["gitPullRequest"] = "RiGitPullRequestFill";
  FillIcon2["gitRepository"] = "RiGitRepositoryFill";
  FillIcon2["gitRepositoryCommits"] = "RiGitRepositoryCommitsFill";
  FillIcon2["gitRepositoryPrivate"] = "RiGitRepositoryPrivateFill";
  FillIcon2["github"] = "RiGithubFill";
  FillIcon2["gitlab"] = "RiGitlabFill";
  FillIcon2["global"] = "RiGlobalFill";
  FillIcon2["globe"] = "RiGlobeFill";
  FillIcon2["goblet"] = "RiGobletFill";
  FillIcon2["google"] = "RiGoogleFill";
  FillIcon2["googlePlay"] = "RiGooglePlayFill";
  FillIcon2["government"] = "RiGovernmentFill";
  FillIcon2["gps"] = "RiGpsFill";
  FillIcon2["gradienter"] = "RiGradienterFill";
  FillIcon2["grid"] = "RiGridFill";
  FillIcon2["group"] = "RiGroupFill";
  FillIcon2["group2"] = "RiGroup2Fill";
  FillIcon2["guide"] = "RiGuideFill";
  FillIcon2["hail"] = "RiHailFill";
  FillIcon2["hammer"] = "RiHammerFill";
  FillIcon2["handCoin"] = "RiHandCoinFill";
  FillIcon2["handHeart"] = "RiHandHeartFill";
  FillIcon2["handSanitizer"] = "RiHandSanitizerFill";
  FillIcon2["handbag"] = "RiHandbagFill";
  FillIcon2["hardDrive"] = "RiHardDriveFill";
  FillIcon2["hardDrive2"] = "RiHardDrive2Fill";
  FillIcon2["haze"] = "RiHazeFill";
  FillIcon2["haze2"] = "RiHaze2Fill";
  FillIcon2["hd"] = "RiHdFill";
  FillIcon2["headphone"] = "RiHeadphoneFill";
  FillIcon2["healthBook"] = "RiHealthBookFill";
  FillIcon2["heart"] = "RiHeartFill";
  FillIcon2["heart2"] = "RiHeart2Fill";
  FillIcon2["heart3"] = "RiHeart3Fill";
  FillIcon2["heartAdd"] = "RiHeartAddFill";
  FillIcon2["heartPulse"] = "RiHeartPulseFill";
  FillIcon2["hearts"] = "RiHeartsFill";
  FillIcon2["heavyShowers"] = "RiHeavyShowersFill";
  FillIcon2["history"] = "RiHistoryFill";
  FillIcon2["home"] = "RiHomeFill";
  FillIcon2["home2"] = "RiHome2Fill";
  FillIcon2["home3"] = "RiHome3Fill";
  FillIcon2["home4"] = "RiHome4Fill";
  FillIcon2["home5"] = "RiHome5Fill";
  FillIcon2["home6"] = "RiHome6Fill";
  FillIcon2["home7"] = "RiHome7Fill";
  FillIcon2["home8"] = "RiHome8Fill";
  FillIcon2["homeGear"] = "RiHomeGearFill";
  FillIcon2["homeHeart"] = "RiHomeHeartFill";
  FillIcon2["homeSmile"] = "RiHomeSmileFill";
  FillIcon2["homeSmile2"] = "RiHomeSmile2Fill";
  FillIcon2["homeWifi"] = "RiHomeWifiFill";
  FillIcon2["honorOfKings"] = "RiHonorOfKingsFill";
  FillIcon2["honour"] = "RiHonourFill";
  FillIcon2["hospital"] = "RiHospitalFill";
  FillIcon2["hotel"] = "RiHotelFill";
  FillIcon2["hotelBed"] = "RiHotelBedFill";
  FillIcon2["hotspot"] = "RiHotspotFill";
  FillIcon2["hq"] = "RiHqFill";
  FillIcon2["html5"] = "RiHtml5Fill";
  FillIcon2["ie"] = "RiIeFill";
  FillIcon2["image"] = "RiImageFill";
  FillIcon2["image2"] = "RiImage2Fill";
  FillIcon2["imageAdd"] = "RiImageAddFill";
  FillIcon2["imageEdit"] = "RiImageEditFill";
  FillIcon2["inbox"] = "RiInboxFill";
  FillIcon2["inboxArchive"] = "RiInboxArchiveFill";
  FillIcon2["inboxUnarchive"] = "RiInboxUnarchiveFill";
  FillIcon2["increaseDecrease"] = "RiIncreaseDecreaseFill";
  FillIcon2["indeterminateCircle"] = "RiIndeterminateCircleFill";
  FillIcon2["information"] = "RiInformationFill";
  FillIcon2["infraredThermometer"] = "RiInfraredThermometerFill";
  FillIcon2["inkBottle"] = "RiInkBottleFill";
  FillIcon2["inputMethod"] = "RiInputMethodFill";
  FillIcon2["instagram"] = "RiInstagramFill";
  FillIcon2["install"] = "RiInstallFill";
  FillIcon2["invision"] = "RiInvisionFill";
  FillIcon2["kakaoTalk"] = "RiKakaoTalkFill";
  FillIcon2["key"] = "RiKeyFill";
  FillIcon2["key2"] = "RiKey2Fill";
  FillIcon2["keyboard"] = "RiKeyboardFill";
  FillIcon2["keyboardBox"] = "RiKeyboardBoxFill";
  FillIcon2["keynote"] = "RiKeynoteFill";
  FillIcon2["knife"] = "RiKnifeFill";
  FillIcon2["knifeBlood"] = "RiKnifeBloodFill";
  FillIcon2["landscape"] = "RiLandscapeFill";
  FillIcon2["layout"] = "RiLayoutFill";
  FillIcon2["layout2"] = "RiLayout2Fill";
  FillIcon2["layout3"] = "RiLayout3Fill";
  FillIcon2["layout4"] = "RiLayout4Fill";
  FillIcon2["layout5"] = "RiLayout5Fill";
  FillIcon2["layout6"] = "RiLayout6Fill";
  FillIcon2["layoutBottom"] = "RiLayoutBottomFill";
  FillIcon2["layoutBottom2"] = "RiLayoutBottom2Fill";
  FillIcon2["layoutColumn"] = "RiLayoutColumnFill";
  FillIcon2["layoutGrid"] = "RiLayoutGridFill";
  FillIcon2["layoutLeft"] = "RiLayoutLeftFill";
  FillIcon2["layoutLeft2"] = "RiLayoutLeft2Fill";
  FillIcon2["layoutMasonry"] = "RiLayoutMasonryFill";
  FillIcon2["layoutRight"] = "RiLayoutRightFill";
  FillIcon2["layoutRight2"] = "RiLayoutRight2Fill";
  FillIcon2["layoutRow"] = "RiLayoutRowFill";
  FillIcon2["layoutTop"] = "RiLayoutTopFill";
  FillIcon2["layoutTop2"] = "RiLayoutTop2Fill";
  FillIcon2["leaf"] = "RiLeafFill";
  FillIcon2["lifebuoy"] = "RiLifebuoyFill";
  FillIcon2["lightbulb"] = "RiLightbulbFill";
  FillIcon2["lightbulbFlash"] = "RiLightbulbFlashFill";
  FillIcon2["line"] = "RiLineFill";
  FillIcon2["lineChart"] = "RiLineChartFill";
  FillIcon2["linkedin"] = "RiLinkedinFill";
  FillIcon2["linkedinBox"] = "RiLinkedinBoxFill";
  FillIcon2["links"] = "RiLinksFill";
  FillIcon2["listSettings"] = "RiListSettingsFill";
  FillIcon2["live"] = "RiLiveFill";
  FillIcon2["loader"] = "RiLoaderFill";
  FillIcon2["loader2"] = "RiLoader2Fill";
  FillIcon2["loader3"] = "RiLoader3Fill";
  FillIcon2["loader4"] = "RiLoader4Fill";
  FillIcon2["loader5"] = "RiLoader5Fill";
  FillIcon2["lock"] = "RiLockFill";
  FillIcon2["lock2"] = "RiLock2Fill";
  FillIcon2["lockPassword"] = "RiLockPasswordFill";
  FillIcon2["lockUnlock"] = "RiLockUnlockFill";
  FillIcon2["loginBox"] = "RiLoginBoxFill";
  FillIcon2["loginCircle"] = "RiLoginCircleFill";
  FillIcon2["logoutBox"] = "RiLogoutBoxFill";
  FillIcon2["logoutBoxR"] = "RiLogoutBoxRFill";
  FillIcon2["logoutCircle"] = "RiLogoutCircleFill";
  FillIcon2["logoutCircleR"] = "RiLogoutCircleRFill";
  FillIcon2["luggageCart"] = "RiLuggageCartFill";
  FillIcon2["luggageDeposit"] = "RiLuggageDepositFill";
  FillIcon2["lungs"] = "RiLungsFill";
  FillIcon2["mac"] = "RiMacFill";
  FillIcon2["macbook"] = "RiMacbookFill";
  FillIcon2["magic"] = "RiMagicFill";
  FillIcon2["mail"] = "RiMailFill";
  FillIcon2["mailAdd"] = "RiMailAddFill";
  FillIcon2["mailCheck"] = "RiMailCheckFill";
  FillIcon2["mailClose"] = "RiMailCloseFill";
  FillIcon2["mailDownload"] = "RiMailDownloadFill";
  FillIcon2["mailForbid"] = "RiMailForbidFill";
  FillIcon2["mailLock"] = "RiMailLockFill";
  FillIcon2["mailOpen"] = "RiMailOpenFill";
  FillIcon2["mailSend"] = "RiMailSendFill";
  FillIcon2["mailSettings"] = "RiMailSettingsFill";
  FillIcon2["mailStar"] = "RiMailStarFill";
  FillIcon2["mailUnread"] = "RiMailUnreadFill";
  FillIcon2["mailVolume"] = "RiMailVolumeFill";
  FillIcon2["map"] = "RiMapFill";
  FillIcon2["map2"] = "RiMap2Fill";
  FillIcon2["mapPin"] = "RiMapPinFill";
  FillIcon2["mapPin2"] = "RiMapPin2Fill";
  FillIcon2["mapPin3"] = "RiMapPin3Fill";
  FillIcon2["mapPin4"] = "RiMapPin4Fill";
  FillIcon2["mapPin5"] = "RiMapPin5Fill";
  FillIcon2["mapPinAdd"] = "RiMapPinAddFill";
  FillIcon2["mapPinRange"] = "RiMapPinRangeFill";
  FillIcon2["mapPinTime"] = "RiMapPinTimeFill";
  FillIcon2["mapPinUser"] = "RiMapPinUserFill";
  FillIcon2["markPen"] = "RiMarkPenFill";
  FillIcon2["markdown"] = "RiMarkdownFill";
  FillIcon2["markup"] = "RiMarkupFill";
  FillIcon2["mastercard"] = "RiMastercardFill";
  FillIcon2["mastodon"] = "RiMastodonFill";
  FillIcon2["medal"] = "RiMedalFill";
  FillIcon2["medal2"] = "RiMedal2Fill";
  FillIcon2["medicineBottle"] = "RiMedicineBottleFill";
  FillIcon2["medium"] = "RiMediumFill";
  FillIcon2["men"] = "RiMenFill";
  FillIcon2["mentalHealth"] = "RiMentalHealthFill";
  FillIcon2["menu"] = "RiMenuFill";
  FillIcon2["menu2"] = "RiMenu2Fill";
  FillIcon2["menu3"] = "RiMenu3Fill";
  FillIcon2["menu4"] = "RiMenu4Fill";
  FillIcon2["menu5"] = "RiMenu5Fill";
  FillIcon2["menuAdd"] = "RiMenuAddFill";
  FillIcon2["menuFold"] = "RiMenuFoldFill";
  FillIcon2["menuUnfold"] = "RiMenuUnfoldFill";
  FillIcon2["message"] = "RiMessageFill";
  FillIcon2["message2"] = "RiMessage2Fill";
  FillIcon2["message3"] = "RiMessage3Fill";
  FillIcon2["messenger"] = "RiMessengerFill";
  FillIcon2["meteor"] = "RiMeteorFill";
  FillIcon2["mic"] = "RiMicFill";
  FillIcon2["mic2"] = "RiMic2Fill";
  FillIcon2["micOff"] = "RiMicOffFill";
  FillIcon2["mickey"] = "RiMickeyFill";
  FillIcon2["microscope"] = "RiMicroscopeFill";
  FillIcon2["microsoft"] = "RiMicrosoftFill";
  FillIcon2["miniProgram"] = "RiMiniProgramFill";
  FillIcon2["mist"] = "RiMistFill";
  FillIcon2["moneyCnyBox"] = "RiMoneyCnyBoxFill";
  FillIcon2["moneyCnyCircle"] = "RiMoneyCnyCircleFill";
  FillIcon2["moneyDollarBox"] = "RiMoneyDollarBoxFill";
  FillIcon2["moneyDollarCircle"] = "RiMoneyDollarCircleFill";
  FillIcon2["moneyEuroBox"] = "RiMoneyEuroBoxFill";
  FillIcon2["moneyEuroCircle"] = "RiMoneyEuroCircleFill";
  FillIcon2["moneyPoundBox"] = "RiMoneyPoundBoxFill";
  FillIcon2["moneyPoundCircle"] = "RiMoneyPoundCircleFill";
  FillIcon2["moon"] = "RiMoonFill";
  FillIcon2["moonClear"] = "RiMoonClearFill";
  FillIcon2["moonCloudy"] = "RiMoonCloudyFill";
  FillIcon2["moonFoggy"] = "RiMoonFoggyFill";
  FillIcon2["more"] = "RiMoreFill";
  FillIcon2["more2"] = "RiMore2Fill";
  FillIcon2["motorbike"] = "RiMotorbikeFill";
  FillIcon2["mouse"] = "RiMouseFill";
  FillIcon2["movie"] = "RiMovieFill";
  FillIcon2["movie2"] = "RiMovie2Fill";
  FillIcon2["music"] = "RiMusicFill";
  FillIcon2["music2"] = "RiMusic2Fill";
  FillIcon2["mv"] = "RiMvFill";
  FillIcon2["navigation"] = "RiNavigationFill";
  FillIcon2["neteaseCloudMusic"] = "RiNeteaseCloudMusicFill";
  FillIcon2["netflix"] = "RiNetflixFill";
  FillIcon2["newspaper"] = "RiNewspaperFill";
  FillIcon2["notification"] = "RiNotificationFill";
  FillIcon2["notification2"] = "RiNotification2Fill";
  FillIcon2["notification3"] = "RiNotification3Fill";
  FillIcon2["notification4"] = "RiNotification4Fill";
  FillIcon2["notificationBadge"] = "RiNotificationBadgeFill";
  FillIcon2["notificationOff"] = "RiNotificationOffFill";
  FillIcon2["npmjs"] = "RiNpmjsFill";
  FillIcon2["numbers"] = "RiNumbersFill";
  FillIcon2["nurse"] = "RiNurseFill";
  FillIcon2["oil"] = "RiOilFill";
  FillIcon2["openArm"] = "RiOpenArmFill";
  FillIcon2["openSource"] = "RiOpenSourceFill";
  FillIcon2["opera"] = "RiOperaFill";
  FillIcon2["orderPlay"] = "RiOrderPlayFill";
  FillIcon2["outlet"] = "RiOutletFill";
  FillIcon2["outlet2"] = "RiOutlet2Fill";
  FillIcon2["pages"] = "RiPagesFill";
  FillIcon2["paint"] = "RiPaintFill";
  FillIcon2["paintBrush"] = "RiPaintBrushFill";
  FillIcon2["palette"] = "RiPaletteFill";
  FillIcon2["pantone"] = "RiPantoneFill";
  FillIcon2["parent"] = "RiParentFill";
  FillIcon2["parentheses"] = "RiParenthesesFill";
  FillIcon2["parking"] = "RiParkingFill";
  FillIcon2["parkingBox"] = "RiParkingBoxFill";
  FillIcon2["passport"] = "RiPassportFill";
  FillIcon2["patreon"] = "RiPatreonFill";
  FillIcon2["pause"] = "RiPauseFill";
  FillIcon2["pauseCircle"] = "RiPauseCircleFill";
  FillIcon2["pauseMini"] = "RiPauseMiniFill";
  FillIcon2["paypal"] = "RiPaypalFill";
  FillIcon2["penNib"] = "RiPenNibFill";
  FillIcon2["pencil"] = "RiPencilFill";
  FillIcon2["pencilRuler"] = "RiPencilRulerFill";
  FillIcon2["pencilRuler2"] = "RiPencilRuler2Fill";
  FillIcon2["percent"] = "RiPercentFill";
  FillIcon2["phone"] = "RiPhoneFill";
  FillIcon2["phoneCamera"] = "RiPhoneCameraFill";
  FillIcon2["phoneFind"] = "RiPhoneFindFill";
  FillIcon2["phoneLock"] = "RiPhoneLockFill";
  FillIcon2["pictureInPicture"] = "RiPictureInPictureFill";
  FillIcon2["pictureInPicture2"] = "RiPictureInPicture2Fill";
  FillIcon2["pictureInPictureExit"] = "RiPictureInPictureExitFill";
  FillIcon2["pieChart"] = "RiPieChartFill";
  FillIcon2["pieChart2"] = "RiPieChart2Fill";
  FillIcon2["pieChartBox"] = "RiPieChartBoxFill";
  FillIcon2["pinDistance"] = "RiPinDistanceFill";
  FillIcon2["pingPong"] = "RiPingPongFill";
  FillIcon2["pinterest"] = "RiPinterestFill";
  FillIcon2["pixelfed"] = "RiPixelfedFill";
  FillIcon2["plane"] = "RiPlaneFill";
  FillIcon2["plant"] = "RiPlantFill";
  FillIcon2["play"] = "RiPlayFill";
  FillIcon2["playCircle"] = "RiPlayCircleFill";
  FillIcon2["playList"] = "RiPlayListFill";
  FillIcon2["playList2"] = "RiPlayList2Fill";
  FillIcon2["playListAdd"] = "RiPlayListAddFill";
  FillIcon2["playMini"] = "RiPlayMiniFill";
  FillIcon2["playstation"] = "RiPlaystationFill";
  FillIcon2["plug"] = "RiPlugFill";
  FillIcon2["plug2"] = "RiPlug2Fill";
  FillIcon2["polaroid"] = "RiPolaroidFill";
  FillIcon2["polaroid2"] = "RiPolaroid2Fill";
  FillIcon2["policeCar"] = "RiPoliceCarFill";
  FillIcon2["priceTag"] = "RiPriceTagFill";
  FillIcon2["priceTag2"] = "RiPriceTag2Fill";
  FillIcon2["priceTag3"] = "RiPriceTag3Fill";
  FillIcon2["printer"] = "RiPrinterFill";
  FillIcon2["printerCloud"] = "RiPrinterCloudFill";
  FillIcon2["productHunt"] = "RiProductHuntFill";
  FillIcon2["profile"] = "RiProfileFill";
  FillIcon2["projector"] = "RiProjectorFill";
  FillIcon2["projector2"] = "RiProjector2Fill";
  FillIcon2["psychotherapy"] = "RiPsychotherapyFill";
  FillIcon2["pulse"] = "RiPulseFill";
  FillIcon2["pushpin"] = "RiPushpinFill";
  FillIcon2["pushpin2"] = "RiPushpin2Fill";
  FillIcon2["qq"] = "RiQqFill";
  FillIcon2["qrCode"] = "RiQrCodeFill";
  FillIcon2["qrScan"] = "RiQrScanFill";
  FillIcon2["qrScan2"] = "RiQrScan2Fill";
  FillIcon2["question"] = "RiQuestionFill";
  FillIcon2["questionAnswer"] = "RiQuestionAnswerFill";
  FillIcon2["questionnaire"] = "RiQuestionnaireFill";
  FillIcon2["quillPen"] = "RiQuillPenFill";
  FillIcon2["radar"] = "RiRadarFill";
  FillIcon2["radio"] = "RiRadioFill";
  FillIcon2["radio2"] = "RiRadio2Fill";
  FillIcon2["radioButton"] = "RiRadioButtonFill";
  FillIcon2["rainbow"] = "RiRainbowFill";
  FillIcon2["rainy"] = "RiRainyFill";
  FillIcon2["reactjs"] = "RiReactjsFill";
  FillIcon2["recordCircle"] = "RiRecordCircleFill";
  FillIcon2["recordMail"] = "RiRecordMailFill";
  FillIcon2["recycle"] = "RiRecycleFill";
  FillIcon2["redPacket"] = "RiRedPacketFill";
  FillIcon2["reddit"] = "RiRedditFill";
  FillIcon2["refresh"] = "RiRefreshFill";
  FillIcon2["refund"] = "RiRefundFill";
  FillIcon2["refund2"] = "RiRefund2Fill";
  FillIcon2["registered"] = "RiRegisteredFill";
  FillIcon2["remixicon"] = "RiRemixiconFill";
  FillIcon2["remoteControl"] = "RiRemoteControlFill";
  FillIcon2["remoteControl2"] = "RiRemoteControl2Fill";
  FillIcon2["repeat"] = "RiRepeatFill";
  FillIcon2["repeat2"] = "RiRepeat2Fill";
  FillIcon2["repeatOne"] = "RiRepeatOneFill";
  FillIcon2["reply"] = "RiReplyFill";
  FillIcon2["replyAll"] = "RiReplyAllFill";
  FillIcon2["reserved"] = "RiReservedFill";
  FillIcon2["restTime"] = "RiRestTimeFill";
  FillIcon2["restart"] = "RiRestartFill";
  FillIcon2["restaurant"] = "RiRestaurantFill";
  FillIcon2["restaurant2"] = "RiRestaurant2Fill";
  FillIcon2["rewind"] = "RiRewindFill";
  FillIcon2["rewindMini"] = "RiRewindMiniFill";
  FillIcon2["rhythm"] = "RiRhythmFill";
  FillIcon2["riding"] = "RiRidingFill";
  FillIcon2["roadMap"] = "RiRoadMapFill";
  FillIcon2["roadster"] = "RiRoadsterFill";
  FillIcon2["robot"] = "RiRobotFill";
  FillIcon2["rocket"] = "RiRocketFill";
  FillIcon2["rocket2"] = "RiRocket2Fill";
  FillIcon2["rotateLock"] = "RiRotateLockFill";
  FillIcon2["route"] = "RiRouteFill";
  FillIcon2["router"] = "RiRouterFill";
  FillIcon2["rss"] = "RiRssFill";
  FillIcon2["ruler"] = "RiRulerFill";
  FillIcon2["ruler2"] = "RiRuler2Fill";
  FillIcon2["run"] = "RiRunFill";
  FillIcon2["safari"] = "RiSafariFill";
  FillIcon2["safe"] = "RiSafeFill";
  FillIcon2["safe2"] = "RiSafe2Fill";
  FillIcon2["sailboat"] = "RiSailboatFill";
  FillIcon2["save"] = "RiSaveFill";
  FillIcon2["save2"] = "RiSave2Fill";
  FillIcon2["save3"] = "RiSave3Fill";
  FillIcon2["scales"] = "RiScalesFill";
  FillIcon2["scales2"] = "RiScales2Fill";
  FillIcon2["scales3"] = "RiScales3Fill";
  FillIcon2["scan"] = "RiScanFill";
  FillIcon2["scan2"] = "RiScan2Fill";
  FillIcon2["scissors"] = "RiScissorsFill";
  FillIcon2["scissors2"] = "RiScissors2Fill";
  FillIcon2["scissorsCut"] = "RiScissorsCutFill";
  FillIcon2["screenshot"] = "RiScreenshotFill";
  FillIcon2["screenshot2"] = "RiScreenshot2Fill";
  FillIcon2["sdCard"] = "RiSdCardFill";
  FillIcon2["sdCardMini"] = "RiSdCardMiniFill";
  FillIcon2["search"] = "RiSearchFill";
  FillIcon2["search2"] = "RiSearch2Fill";
  FillIcon2["searchEye"] = "RiSearchEyeFill";
  FillIcon2["securePayment"] = "RiSecurePaymentFill";
  FillIcon2["seedling"] = "RiSeedlingFill";
  FillIcon2["sendPlane"] = "RiSendPlaneFill";
  FillIcon2["sendPlane2"] = "RiSendPlane2Fill";
  FillIcon2["sensor"] = "RiSensorFill";
  FillIcon2["server"] = "RiServerFill";
  FillIcon2["service"] = "RiServiceFill";
  FillIcon2["settings"] = "RiSettingsFill";
  FillIcon2["settings2"] = "RiSettings2Fill";
  FillIcon2["settings3"] = "RiSettings3Fill";
  FillIcon2["settings4"] = "RiSettings4Fill";
  FillIcon2["settings5"] = "RiSettings5Fill";
  FillIcon2["settings6"] = "RiSettings6Fill";
  FillIcon2["shape"] = "RiShapeFill";
  FillIcon2["shape2"] = "RiShape2Fill";
  FillIcon2["share"] = "RiShareFill";
  FillIcon2["shareBox"] = "RiShareBoxFill";
  FillIcon2["shareCircle"] = "RiShareCircleFill";
  FillIcon2["shareForward"] = "RiShareForwardFill";
  FillIcon2["shareForward2"] = "RiShareForward2Fill";
  FillIcon2["shareForwardBox"] = "RiShareForwardBoxFill";
  FillIcon2["shield"] = "RiShieldFill";
  FillIcon2["shieldCheck"] = "RiShieldCheckFill";
  FillIcon2["shieldCross"] = "RiShieldCrossFill";
  FillIcon2["shieldFlash"] = "RiShieldFlashFill";
  FillIcon2["shieldKeyhole"] = "RiShieldKeyholeFill";
  FillIcon2["shieldStar"] = "RiShieldStarFill";
  FillIcon2["shieldUser"] = "RiShieldUserFill";
  FillIcon2["ship"] = "RiShipFill";
  FillIcon2["ship2"] = "RiShip2Fill";
  FillIcon2["shirt"] = "RiShirtFill";
  FillIcon2["shoppingBag"] = "RiShoppingBagFill";
  FillIcon2["shoppingBag2"] = "RiShoppingBag2Fill";
  FillIcon2["shoppingBag3"] = "RiShoppingBag3Fill";
  FillIcon2["shoppingBasket"] = "RiShoppingBasketFill";
  FillIcon2["shoppingBasket2"] = "RiShoppingBasket2Fill";
  FillIcon2["shoppingCart"] = "RiShoppingCartFill";
  FillIcon2["shoppingCart2"] = "RiShoppingCart2Fill";
  FillIcon2["showers"] = "RiShowersFill";
  FillIcon2["shuffle"] = "RiShuffleFill";
  FillIcon2["shutDown"] = "RiShutDownFill";
  FillIcon2["sideBar"] = "RiSideBarFill";
  FillIcon2["signalTower"] = "RiSignalTowerFill";
  FillIcon2["signalWifi"] = "RiSignalWifiFill";
  FillIcon2["signalWifi1"] = "RiSignalWifi1Fill";
  FillIcon2["signalWifi2"] = "RiSignalWifi2Fill";
  FillIcon2["signalWifi3"] = "RiSignalWifi3Fill";
  FillIcon2["signalWifiError"] = "RiSignalWifiErrorFill";
  FillIcon2["signalWifiOff"] = "RiSignalWifiOffFill";
  FillIcon2["simCard"] = "RiSimCardFill";
  FillIcon2["simCard2"] = "RiSimCard2Fill";
  FillIcon2["sip"] = "RiSipFill";
  FillIcon2["skipBack"] = "RiSkipBackFill";
  FillIcon2["skipBackMini"] = "RiSkipBackMiniFill";
  FillIcon2["skipForward"] = "RiSkipForwardFill";
  FillIcon2["skipForwardMini"] = "RiSkipForwardMiniFill";
  FillIcon2["skull"] = "RiSkullFill";
  FillIcon2["skull2"] = "RiSkull2Fill";
  FillIcon2["skype"] = "RiSkypeFill";
  FillIcon2["slack"] = "RiSlackFill";
  FillIcon2["slice"] = "RiSliceFill";
  FillIcon2["slideshow"] = "RiSlideshowFill";
  FillIcon2["slideshow2"] = "RiSlideshow2Fill";
  FillIcon2["slideshow3"] = "RiSlideshow3Fill";
  FillIcon2["slideshow4"] = "RiSlideshow4Fill";
  FillIcon2["smartphone"] = "RiSmartphoneFill";
  FillIcon2["snapchat"] = "RiSnapchatFill";
  FillIcon2["snowy"] = "RiSnowyFill";
  FillIcon2["soundModule"] = "RiSoundModuleFill";
  FillIcon2["soundcloud"] = "RiSoundcloudFill";
  FillIcon2["spaceShip"] = "RiSpaceShipFill";
  FillIcon2["spam"] = "RiSpamFill";
  FillIcon2["spam2"] = "RiSpam2Fill";
  FillIcon2["spam3"] = "RiSpam3Fill";
  FillIcon2["speaker"] = "RiSpeakerFill";
  FillIcon2["speaker2"] = "RiSpeaker2Fill";
  FillIcon2["speaker3"] = "RiSpeaker3Fill";
  FillIcon2["spectrum"] = "RiSpectrumFill";
  FillIcon2["speed"] = "RiSpeedFill";
  FillIcon2["speedMini"] = "RiSpeedMiniFill";
  FillIcon2["spotify"] = "RiSpotifyFill";
  FillIcon2["spy"] = "RiSpyFill";
  FillIcon2["stack"] = "RiStackFill";
  FillIcon2["stackOverflow"] = "RiStackOverflowFill";
  FillIcon2["stackshare"] = "RiStackshareFill";
  FillIcon2["star"] = "RiStarFill";
  FillIcon2["starHalf"] = "RiStarHalfFill";
  FillIcon2["starHalfS"] = "RiStarHalfSFill";
  FillIcon2["starS"] = "RiStarSFill";
  FillIcon2["starSmile"] = "RiStarSmileFill";
  FillIcon2["steam"] = "RiSteamFill";
  FillIcon2["steering"] = "RiSteeringFill";
  FillIcon2["steering2"] = "RiSteering2Fill";
  FillIcon2["stethoscope"] = "RiStethoscopeFill";
  FillIcon2["stickyNote"] = "RiStickyNoteFill";
  FillIcon2["stickyNote2"] = "RiStickyNote2Fill";
  FillIcon2["stock"] = "RiStockFill";
  FillIcon2["stop"] = "RiStopFill";
  FillIcon2["stopCircle"] = "RiStopCircleFill";
  FillIcon2["stopMini"] = "RiStopMiniFill";
  FillIcon2["store"] = "RiStoreFill";
  FillIcon2["store2"] = "RiStore2Fill";
  FillIcon2["store3"] = "RiStore3Fill";
  FillIcon2["subtract"] = "RiSubtractFill";
  FillIcon2["subway"] = "RiSubwayFill";
  FillIcon2["subwayWifi"] = "RiSubwayWifiFill";
  FillIcon2["suitcase"] = "RiSuitcaseFill";
  FillIcon2["suitcase2"] = "RiSuitcase2Fill";
  FillIcon2["suitcase3"] = "RiSuitcase3Fill";
  FillIcon2["sun"] = "RiSunFill";
  FillIcon2["sunCloudy"] = "RiSunCloudyFill";
  FillIcon2["sunFoggy"] = "RiSunFoggyFill";
  FillIcon2["surgicalMask"] = "RiSurgicalMaskFill";
  FillIcon2["surroundSound"] = "RiSurroundSoundFill";
  FillIcon2["survey"] = "RiSurveyFill";
  FillIcon2["swap"] = "RiSwapFill";
  FillIcon2["swapBox"] = "RiSwapBoxFill";
  FillIcon2["switch"] = "RiSwitchFill";
  FillIcon2["sword"] = "RiSwordFill";
  FillIcon2["syringe"] = "RiSyringeFill";
  FillIcon2["tBox"] = "RiTBoxFill";
  FillIcon2["tShirt"] = "RiTShirtFill";
  FillIcon2["tShirt2"] = "RiTShirt2Fill";
  FillIcon2["tShirtAir"] = "RiTShirtAirFill";
  FillIcon2["table"] = "RiTableFill";
  FillIcon2["tableAlt"] = "RiTableAltFill";
  FillIcon2["tablet"] = "RiTabletFill";
  FillIcon2["takeaway"] = "RiTakeawayFill";
  FillIcon2["taobao"] = "RiTaobaoFill";
  FillIcon2["tape"] = "RiTapeFill";
  FillIcon2["task"] = "RiTaskFill";
  FillIcon2["taxi"] = "RiTaxiFill";
  FillIcon2["taxiWifi"] = "RiTaxiWifiFill";
  FillIcon2["team"] = "RiTeamFill";
  FillIcon2["telegram"] = "RiTelegramFill";
  FillIcon2["tempCold"] = "RiTempColdFill";
  FillIcon2["tempHot"] = "RiTempHotFill";
  FillIcon2["terminal"] = "RiTerminalFill";
  FillIcon2["terminalBox"] = "RiTerminalBoxFill";
  FillIcon2["terminalWindow"] = "RiTerminalWindowFill";
  FillIcon2["testTube"] = "RiTestTubeFill";
  FillIcon2["thermometer"] = "RiThermometerFill";
  FillIcon2["thumbDown"] = "RiThumbDownFill";
  FillIcon2["thumbUp"] = "RiThumbUpFill";
  FillIcon2["thunderstorms"] = "RiThunderstormsFill";
  FillIcon2["ticket"] = "RiTicketFill";
  FillIcon2["ticket2"] = "RiTicket2Fill";
  FillIcon2["time"] = "RiTimeFill";
  FillIcon2["timer"] = "RiTimerFill";
  FillIcon2["timer2"] = "RiTimer2Fill";
  FillIcon2["timerFlash"] = "RiTimerFlashFill";
  FillIcon2["todo"] = "RiTodoFill";
  FillIcon2["toggle"] = "RiToggleFill";
  FillIcon2["tools"] = "RiToolsFill";
  FillIcon2["tornado"] = "RiTornadoFill";
  FillIcon2["trademark"] = "RiTrademarkFill";
  FillIcon2["trafficLight"] = "RiTrafficLightFill";
  FillIcon2["train"] = "RiTrainFill";
  FillIcon2["trainWifi"] = "RiTrainWifiFill";
  FillIcon2["travesti"] = "RiTravestiFill";
  FillIcon2["treasureMap"] = "RiTreasureMapFill";
  FillIcon2["trello"] = "RiTrelloFill";
  FillIcon2["trophy"] = "RiTrophyFill";
  FillIcon2["truck"] = "RiTruckFill";
  FillIcon2["tumblr"] = "RiTumblrFill";
  FillIcon2["tv"] = "RiTvFill";
  FillIcon2["tv2"] = "RiTv2Fill";
  FillIcon2["twitch"] = "RiTwitchFill";
  FillIcon2["twitter"] = "RiTwitterFill";
  FillIcon2["typhoon"] = "RiTyphoonFill";
  FillIcon2["uDisk"] = "RiUDiskFill";
  FillIcon2["ubuntu"] = "RiUbuntuFill";
  FillIcon2["umbrella"] = "RiUmbrellaFill";
  FillIcon2["uninstall"] = "RiUninstallFill";
  FillIcon2["unsplash"] = "RiUnsplashFill";
  FillIcon2["upload"] = "RiUploadFill";
  FillIcon2["upload2"] = "RiUpload2Fill";
  FillIcon2["uploadCloud"] = "RiUploadCloudFill";
  FillIcon2["uploadCloud2"] = "RiUploadCloud2Fill";
  FillIcon2["usb"] = "RiUsbFill";
  FillIcon2["user"] = "RiUserFill";
  FillIcon2["user2"] = "RiUser2Fill";
  FillIcon2["user3"] = "RiUser3Fill";
  FillIcon2["user4"] = "RiUser4Fill";
  FillIcon2["user5"] = "RiUser5Fill";
  FillIcon2["user6"] = "RiUser6Fill";
  FillIcon2["userAdd"] = "RiUserAddFill";
  FillIcon2["userFollow"] = "RiUserFollowFill";
  FillIcon2["userHeart"] = "RiUserHeartFill";
  FillIcon2["userLocation"] = "RiUserLocationFill";
  FillIcon2["userReceived"] = "RiUserReceivedFill";
  FillIcon2["userReceived2"] = "RiUserReceived2Fill";
  FillIcon2["userSearch"] = "RiUserSearchFill";
  FillIcon2["userSettings"] = "RiUserSettingsFill";
  FillIcon2["userShared"] = "RiUserSharedFill";
  FillIcon2["userShared2"] = "RiUserShared2Fill";
  FillIcon2["userSmile"] = "RiUserSmileFill";
  FillIcon2["userStar"] = "RiUserStarFill";
  FillIcon2["userUnfollow"] = "RiUserUnfollowFill";
  FillIcon2["userVoice"] = "RiUserVoiceFill";
  FillIcon2["video"] = "RiVideoFill";
  FillIcon2["videoAdd"] = "RiVideoAddFill";
  FillIcon2["videoChat"] = "RiVideoChatFill";
  FillIcon2["videoDownload"] = "RiVideoDownloadFill";
  FillIcon2["videoUpload"] = "RiVideoUploadFill";
  FillIcon2["vidicon"] = "RiVidiconFill";
  FillIcon2["vidicon2"] = "RiVidicon2Fill";
  FillIcon2["vimeo"] = "RiVimeoFill";
  FillIcon2["vip"] = "RiVipFill";
  FillIcon2["vipCrown"] = "RiVipCrownFill";
  FillIcon2["vipCrown2"] = "RiVipCrown2Fill";
  FillIcon2["vipDiamond"] = "RiVipDiamondFill";
  FillIcon2["virus"] = "RiVirusFill";
  FillIcon2["visa"] = "RiVisaFill";
  FillIcon2["voiceRecognition"] = "RiVoiceRecognitionFill";
  FillIcon2["voiceprint"] = "RiVoiceprintFill";
  FillIcon2["volumeDown"] = "RiVolumeDownFill";
  FillIcon2["volumeMute"] = "RiVolumeMuteFill";
  FillIcon2["volumeOffVibrate"] = "RiVolumeOffVibrateFill";
  FillIcon2["volumeUp"] = "RiVolumeUpFill";
  FillIcon2["volumeVibrate"] = "RiVolumeVibrateFill";
  FillIcon2["vuejs"] = "RiVuejsFill";
  FillIcon2["walk"] = "RiWalkFill";
  FillIcon2["wallet"] = "RiWalletFill";
  FillIcon2["wallet2"] = "RiWallet2Fill";
  FillIcon2["wallet3"] = "RiWallet3Fill";
  FillIcon2["waterFlash"] = "RiWaterFlashFill";
  FillIcon2["webcam"] = "RiWebcamFill";
  FillIcon2["wechat"] = "RiWechatFill";
  FillIcon2["wechat2"] = "RiWechat2Fill";
  FillIcon2["wechatPay"] = "RiWechatPayFill";
  FillIcon2["weibo"] = "RiWeiboFill";
  FillIcon2["whatsapp"] = "RiWhatsappFill";
  FillIcon2["wheelchair"] = "RiWheelchairFill";
  FillIcon2["wifi"] = "RiWifiFill";
  FillIcon2["wifiOff"] = "RiWifiOffFill";
  FillIcon2["window"] = "RiWindowFill";
  FillIcon2["window2"] = "RiWindow2Fill";
  FillIcon2["windows"] = "RiWindowsFill";
  FillIcon2["windy"] = "RiWindyFill";
  FillIcon2["wirelessCharging"] = "RiWirelessChargingFill";
  FillIcon2["women"] = "RiWomenFill";
  FillIcon2["xbox"] = "RiXboxFill";
  FillIcon2["xing"] = "RiXingFill";
  FillIcon2["youtube"] = "RiYoutubeFill";
  FillIcon2["zcool"] = "RiZcoolFill";
  FillIcon2["zhihu"] = "RiZhihuFill";
  FillIcon2["zoomIn"] = "RiZoomInFill";
  FillIcon2["zoomOut"] = "RiZoomOutFill";
  FillIcon2["zzz"] = "RiZzzFill";
  return FillIcon2;
})(FillIcon || {});
var LineIcon = /* @__PURE__ */ ((LineIcon2) => {
  LineIcon2["24HoursLine"] = "Ri24HoursLine";
  LineIcon2["4KLine"] = "Ri4KLine";
  LineIcon2["accountBox"] = "RiAccountBoxLine";
  LineIcon2["accountCircle"] = "RiAccountCircleLine";
  LineIcon2["accountPinBox"] = "RiAccountPinBoxLine";
  LineIcon2["accountPinCircle"] = "RiAccountPinCircleLine";
  LineIcon2["add"] = "RiAddLine";
  LineIcon2["addBox"] = "RiAddBoxLine";
  LineIcon2["addCircle"] = "RiAddCircleLine";
  LineIcon2["admin"] = "RiAdminLine";
  LineIcon2["advertisement"] = "RiAdvertisementLine";
  LineIcon2["airplay"] = "RiAirplayLine";
  LineIcon2["alarm"] = "RiAlarmLine";
  LineIcon2["alarmWarning"] = "RiAlarmWarningLine";
  LineIcon2["album"] = "RiAlbumLine";
  LineIcon2["alert"] = "RiAlertLine";
  LineIcon2["aliens"] = "RiAliensLine";
  LineIcon2["alipay"] = "RiAlipayLine";
  LineIcon2["amazon"] = "RiAmazonLine";
  LineIcon2["anchor"] = "RiAnchorLine";
  LineIcon2["ancientGate"] = "RiAncientGateLine";
  LineIcon2["ancientPavilion"] = "RiAncientPavilionLine";
  LineIcon2["android"] = "RiAndroidLine";
  LineIcon2["angularjs"] = "RiAngularjsLine";
  LineIcon2["anticlockwise"] = "RiAnticlockwiseLine";
  LineIcon2["anticlockwise2"] = "RiAnticlockwise2Line";
  LineIcon2["appStore"] = "RiAppStoreLine";
  LineIcon2["apple"] = "RiAppleLine";
  LineIcon2["apps"] = "RiAppsLine";
  LineIcon2["apps2"] = "RiApps2Line";
  LineIcon2["archive"] = "RiArchiveLine";
  LineIcon2["archiveDrawer"] = "RiArchiveDrawerLine";
  LineIcon2["arrowDown"] = "RiArrowDownLine";
  LineIcon2["arrowDownCircle"] = "RiArrowDownCircleLine";
  LineIcon2["arrowDownS"] = "RiArrowDownSLine";
  LineIcon2["arrowDropDown"] = "RiArrowDropDownLine";
  LineIcon2["arrowDropLeft"] = "RiArrowDropLeftLine";
  LineIcon2["arrowDropRight"] = "RiArrowDropRightLine";
  LineIcon2["arrowDropUp"] = "RiArrowDropUpLine";
  LineIcon2["arrowGoBack"] = "RiArrowGoBackLine";
  LineIcon2["arrowGoForward"] = "RiArrowGoForwardLine";
  LineIcon2["arrowLeft"] = "RiArrowLeftLine";
  LineIcon2["arrowLeftCircle"] = "RiArrowLeftCircleLine";
  LineIcon2["arrowLeftDown"] = "RiArrowLeftDownLine";
  LineIcon2["arrowLeftRight"] = "RiArrowLeftRightLine";
  LineIcon2["arrowLeftS"] = "RiArrowLeftSLine";
  LineIcon2["arrowLeftUp"] = "RiArrowLeftUpLine";
  LineIcon2["arrowRight"] = "RiArrowRightLine";
  LineIcon2["arrowRightCircle"] = "RiArrowRightCircleLine";
  LineIcon2["arrowRightDown"] = "RiArrowRightDownLine";
  LineIcon2["arrowRightS"] = "RiArrowRightSLine";
  LineIcon2["arrowRightUp"] = "RiArrowRightUpLine";
  LineIcon2["arrowUp"] = "RiArrowUpLine";
  LineIcon2["arrowUpCircle"] = "RiArrowUpCircleLine";
  LineIcon2["arrowUpDown"] = "RiArrowUpDownLine";
  LineIcon2["arrowUpS"] = "RiArrowUpSLine";
  LineIcon2["artboard"] = "RiArtboardLine";
  LineIcon2["artboard2"] = "RiArtboard2Line";
  LineIcon2["article"] = "RiArticleLine";
  LineIcon2["aspectRatio"] = "RiAspectRatioLine";
  LineIcon2["at"] = "RiAtLine";
  LineIcon2["attachment"] = "RiAttachmentLine";
  LineIcon2["auction"] = "RiAuctionLine";
  LineIcon2["award"] = "RiAwardLine";
  LineIcon2["baidu"] = "RiBaiduLine";
  LineIcon2["ballPen"] = "RiBallPenLine";
  LineIcon2["bank"] = "RiBankLine";
  LineIcon2["bankCard"] = "RiBankCardLine";
  LineIcon2["bankCard2"] = "RiBankCard2Line";
  LineIcon2["barChart"] = "RiBarChartLine";
  LineIcon2["barChart2"] = "RiBarChart2Line";
  LineIcon2["barChartBox"] = "RiBarChartBoxLine";
  LineIcon2["barChartGrouped"] = "RiBarChartGroupedLine";
  LineIcon2["barChartHorizontal"] = "RiBarChartHorizontalLine";
  LineIcon2["barcode"] = "RiBarcodeLine";
  LineIcon2["barcodeBox"] = "RiBarcodeBoxLine";
  LineIcon2["barricade"] = "RiBarricadeLine";
  LineIcon2["baseStation"] = "RiBaseStationLine";
  LineIcon2["basketball"] = "RiBasketballLine";
  LineIcon2["battery"] = "RiBatteryLine";
  LineIcon2["battery2"] = "RiBattery2Line";
  LineIcon2["battery2Charge"] = "RiBattery2ChargeLine";
  LineIcon2["batteryCharge"] = "RiBatteryChargeLine";
  LineIcon2["batteryLow"] = "RiBatteryLowLine";
  LineIcon2["batterySaver"] = "RiBatterySaverLine";
  LineIcon2["batteryShare"] = "RiBatteryShareLine";
  LineIcon2["bearSmile"] = "RiBearSmileLine";
  LineIcon2["behance"] = "RiBehanceLine";
  LineIcon2["bell"] = "RiBellLine";
  LineIcon2["bike"] = "RiBikeLine";
  LineIcon2["bilibili"] = "RiBilibiliLine";
  LineIcon2["bill"] = "RiBillLine";
  LineIcon2["billiards"] = "RiBilliardsLine";
  LineIcon2["bitCoin"] = "RiBitCoinLine";
  LineIcon2["blaze"] = "RiBlazeLine";
  LineIcon2["bluetooth"] = "RiBluetoothLine";
  LineIcon2["bluetoothConnect"] = "RiBluetoothConnectLine";
  LineIcon2["blurOff"] = "RiBlurOffLine";
  LineIcon2["bodyScan"] = "RiBodyScanLine";
  LineIcon2["book"] = "RiBookLine";
  LineIcon2["book2"] = "RiBook2Line";
  LineIcon2["book3"] = "RiBook3Line";
  LineIcon2["bookMark"] = "RiBookMarkLine";
  LineIcon2["bookOpen"] = "RiBookOpenLine";
  LineIcon2["bookRead"] = "RiBookReadLine";
  LineIcon2["booklet"] = "RiBookletLine";
  LineIcon2["bookmark"] = "RiBookmarkLine";
  LineIcon2["bookmark2"] = "RiBookmark2Line";
  LineIcon2["bookmark3"] = "RiBookmark3Line";
  LineIcon2["boxing"] = "RiBoxingLine";
  LineIcon2["braces"] = "RiBracesLine";
  LineIcon2["brackets"] = "RiBracketsLine";
  LineIcon2["briefcase"] = "RiBriefcaseLine";
  LineIcon2["briefcase2"] = "RiBriefcase2Line";
  LineIcon2["briefcase3"] = "RiBriefcase3Line";
  LineIcon2["briefcase4"] = "RiBriefcase4Line";
  LineIcon2["briefcase5"] = "RiBriefcase5Line";
  LineIcon2["broadcast"] = "RiBroadcastLine";
  LineIcon2["brush"] = "RiBrushLine";
  LineIcon2["brush2"] = "RiBrush2Line";
  LineIcon2["brush3"] = "RiBrush3Line";
  LineIcon2["brush4"] = "RiBrush4Line";
  LineIcon2["bubbleChart"] = "RiBubbleChartLine";
  LineIcon2["bug"] = "RiBugLine";
  LineIcon2["bug2"] = "RiBug2Line";
  LineIcon2["building"] = "RiBuildingLine";
  LineIcon2["building2"] = "RiBuilding2Line";
  LineIcon2["building3"] = "RiBuilding3Line";
  LineIcon2["building4"] = "RiBuilding4Line";
  LineIcon2["bus"] = "RiBusLine";
  LineIcon2["bus2"] = "RiBus2Line";
  LineIcon2["busWifi"] = "RiBusWifiLine";
  LineIcon2["cactus"] = "RiCactusLine";
  LineIcon2["cake"] = "RiCakeLine";
  LineIcon2["cake2"] = "RiCake2Line";
  LineIcon2["cake3"] = "RiCake3Line";
  LineIcon2["calculator"] = "RiCalculatorLine";
  LineIcon2["calendar"] = "RiCalendarLine";
  LineIcon2["calendar2"] = "RiCalendar2Line";
  LineIcon2["calendarCheck"] = "RiCalendarCheckLine";
  LineIcon2["calendarEvent"] = "RiCalendarEventLine";
  LineIcon2["calendarTodo"] = "RiCalendarTodoLine";
  LineIcon2["camera"] = "RiCameraLine";
  LineIcon2["camera2"] = "RiCamera2Line";
  LineIcon2["camera3"] = "RiCamera3Line";
  LineIcon2["cameraLens"] = "RiCameraLensLine";
  LineIcon2["cameraOff"] = "RiCameraOffLine";
  LineIcon2["cameraSwitch"] = "RiCameraSwitchLine";
  LineIcon2["capsule"] = "RiCapsuleLine";
  LineIcon2["car"] = "RiCarLine";
  LineIcon2["carWashing"] = "RiCarWashingLine";
  LineIcon2["caravan"] = "RiCaravanLine";
  LineIcon2["cast"] = "RiCastLine";
  LineIcon2["cellphone"] = "RiCellphoneLine";
  LineIcon2["celsius"] = "RiCelsiusLine";
  LineIcon2["centos"] = "RiCentosLine";
  LineIcon2["characterRecognition"] = "RiCharacterRecognitionLine";
  LineIcon2["chargingPile"] = "RiChargingPileLine";
  LineIcon2["chargingPile2"] = "RiChargingPile2Line";
  LineIcon2["chat1"] = "RiChat1Line";
  LineIcon2["chat2"] = "RiChat2Line";
  LineIcon2["chat3"] = "RiChat3Line";
  LineIcon2["chat4"] = "RiChat4Line";
  LineIcon2["chatCheck"] = "RiChatCheckLine";
  LineIcon2["chatDelete"] = "RiChatDeleteLine";
  LineIcon2["chatDownload"] = "RiChatDownloadLine";
  LineIcon2["chatFollowUp"] = "RiChatFollowUpLine";
  LineIcon2["chatForward"] = "RiChatForwardLine";
  LineIcon2["chatHeart"] = "RiChatHeartLine";
  LineIcon2["chatHistory"] = "RiChatHistoryLine";
  LineIcon2["chatNew"] = "RiChatNewLine";
  LineIcon2["chatOff"] = "RiChatOffLine";
  LineIcon2["chatPoll"] = "RiChatPollLine";
  LineIcon2["chatPrivate"] = "RiChatPrivateLine";
  LineIcon2["chatQuote"] = "RiChatQuoteLine";
  LineIcon2["chatSettings"] = "RiChatSettingsLine";
  LineIcon2["chatSmile"] = "RiChatSmileLine";
  LineIcon2["chatSmile2"] = "RiChatSmile2Line";
  LineIcon2["chatSmile3"] = "RiChatSmile3Line";
  LineIcon2["chatUpload"] = "RiChatUploadLine";
  LineIcon2["chatVoice"] = "RiChatVoiceLine";
  LineIcon2["check"] = "RiCheckLine";
  LineIcon2["checkDouble"] = "RiCheckDoubleLine";
  LineIcon2["checkbox"] = "RiCheckboxLine";
  LineIcon2["checkboxBlank"] = "RiCheckboxBlankLine";
  LineIcon2["checkboxBlankCircle"] = "RiCheckboxBlankCircleLine";
  LineIcon2["checkboxCircle"] = "RiCheckboxCircleLine";
  LineIcon2["checkboxIndeterminate"] = "RiCheckboxIndeterminateLine";
  LineIcon2["checkboxMultiple"] = "RiCheckboxMultipleLine";
  LineIcon2["checkboxMultipleBlank"] = "RiCheckboxMultipleBlankLine";
  LineIcon2["chinaRailway"] = "RiChinaRailwayLine";
  LineIcon2["chrome"] = "RiChromeLine";
  LineIcon2["clapperboard"] = "RiClapperboardLine";
  LineIcon2["clipboard"] = "RiClipboardLine";
  LineIcon2["clockwise"] = "RiClockwiseLine";
  LineIcon2["clockwise2"] = "RiClockwise2Line";
  LineIcon2["close"] = "RiCloseLine";
  LineIcon2["closeCircle"] = "RiCloseCircleLine";
  LineIcon2["closedCaptioning"] = "RiClosedCaptioningLine";
  LineIcon2["cloud"] = "RiCloudLine";
  LineIcon2["cloudOff"] = "RiCloudOffLine";
  LineIcon2["cloudWindy"] = "RiCloudWindyLine";
  LineIcon2["cloudy"] = "RiCloudyLine";
  LineIcon2["cloudy2"] = "RiCloudy2Line";
  LineIcon2["code"] = "RiCodeLine";
  LineIcon2["codeBox"] = "RiCodeBoxLine";
  LineIcon2["codeS"] = "RiCodeSLine";
  LineIcon2["codeSSlash"] = "RiCodeSSlashLine";
  LineIcon2["codepen"] = "RiCodepenLine";
  LineIcon2["coin"] = "RiCoinLine";
  LineIcon2["coins"] = "RiCoinsLine";
  LineIcon2["collage"] = "RiCollageLine";
  LineIcon2["command"] = "RiCommandLine";
  LineIcon2["community"] = "RiCommunityLine";
  LineIcon2["compass"] = "RiCompassLine";
  LineIcon2["compass2"] = "RiCompass2Line";
  LineIcon2["compass3"] = "RiCompass3Line";
  LineIcon2["compass4"] = "RiCompass4Line";
  LineIcon2["compassDiscover"] = "RiCompassDiscoverLine";
  LineIcon2["compasses"] = "RiCompassesLine";
  LineIcon2["compasses2"] = "RiCompasses2Line";
  LineIcon2["computer"] = "RiComputerLine";
  LineIcon2["contacts"] = "RiContactsLine";
  LineIcon2["contactsBook"] = "RiContactsBookLine";
  LineIcon2["contactsBook2"] = "RiContactsBook2Line";
  LineIcon2["contactsBookUpload"] = "RiContactsBookUploadLine";
  LineIcon2["contrast"] = "RiContrastLine";
  LineIcon2["contrast2"] = "RiContrast2Line";
  LineIcon2["contrastDrop"] = "RiContrastDropLine";
  LineIcon2["contrastDrop2"] = "RiContrastDrop2Line";
  LineIcon2["copperCoin"] = "RiCopperCoinLine";
  LineIcon2["copperDiamond"] = "RiCopperDiamondLine";
  LineIcon2["copyleft"] = "RiCopyleftLine";
  LineIcon2["copyright"] = "RiCopyrightLine";
  LineIcon2["coreos"] = "RiCoreosLine";
  LineIcon2["coupon"] = "RiCouponLine";
  LineIcon2["coupon2"] = "RiCoupon2Line";
  LineIcon2["coupon3"] = "RiCoupon3Line";
  LineIcon2["coupon4"] = "RiCoupon4Line";
  LineIcon2["coupon5"] = "RiCoupon5Line";
  LineIcon2["cpu"] = "RiCpuLine";
  LineIcon2["creativeCommons"] = "RiCreativeCommonsLine";
  LineIcon2["creativeCommonsBy"] = "RiCreativeCommonsByLine";
  LineIcon2["creativeCommonsNc"] = "RiCreativeCommonsNcLine";
  LineIcon2["creativeCommonsNd"] = "RiCreativeCommonsNdLine";
  LineIcon2["creativeCommonsSa"] = "RiCreativeCommonsSaLine";
  LineIcon2["creativeCommonsZero"] = "RiCreativeCommonsZeroLine";
  LineIcon2["criminal"] = "RiCriminalLine";
  LineIcon2["crop"] = "RiCropLine";
  LineIcon2["crop2"] = "RiCrop2Line";
  LineIcon2["css3"] = "RiCss3Line";
  LineIcon2["cup"] = "RiCupLine";
  LineIcon2["currency"] = "RiCurrencyLine";
  LineIcon2["cursor"] = "RiCursorLine";
  LineIcon2["customerService"] = "RiCustomerServiceLine";
  LineIcon2["customerService2"] = "RiCustomerService2Line";
  LineIcon2["dashboard"] = "RiDashboardLine";
  LineIcon2["dashboard2"] = "RiDashboard2Line";
  LineIcon2["dashboard3"] = "RiDashboard3Line";
  LineIcon2["database"] = "RiDatabaseLine";
  LineIcon2["database2"] = "RiDatabase2Line";
  LineIcon2["deleteBack"] = "RiDeleteBackLine";
  LineIcon2["deleteBack2"] = "RiDeleteBack2Line";
  LineIcon2["deleteBin"] = "RiDeleteBinLine";
  LineIcon2["deleteBin2"] = "RiDeleteBin2Line";
  LineIcon2["deleteBin3"] = "RiDeleteBin3Line";
  LineIcon2["deleteBin4"] = "RiDeleteBin4Line";
  LineIcon2["deleteBin5"] = "RiDeleteBin5Line";
  LineIcon2["deleteBin6"] = "RiDeleteBin6Line";
  LineIcon2["deleteBin7"] = "RiDeleteBin7Line";
  LineIcon2["device"] = "RiDeviceLine";
  LineIcon2["deviceRecover"] = "RiDeviceRecoverLine";
  LineIcon2["dingding"] = "RiDingdingLine";
  LineIcon2["direction"] = "RiDirectionLine";
  LineIcon2["disc"] = "RiDiscLine";
  LineIcon2["discord"] = "RiDiscordLine";
  LineIcon2["discuss"] = "RiDiscussLine";
  LineIcon2["dislike"] = "RiDislikeLine";
  LineIcon2["disqus"] = "RiDisqusLine";
  LineIcon2["divide"] = "RiDivideLine";
  LineIcon2["donutChart"] = "RiDonutChartLine";
  LineIcon2["door"] = "RiDoorLine";
  LineIcon2["doorClosed"] = "RiDoorClosedLine";
  LineIcon2["doorLock"] = "RiDoorLockLine";
  LineIcon2["doorLockBox"] = "RiDoorLockBoxLine";
  LineIcon2["doorOpen"] = "RiDoorOpenLine";
  LineIcon2["dossier"] = "RiDossierLine";
  LineIcon2["douban"] = "RiDoubanLine";
  LineIcon2["download"] = "RiDownloadLine";
  LineIcon2["download2"] = "RiDownload2Line";
  LineIcon2["downloadCloud"] = "RiDownloadCloudLine";
  LineIcon2["downloadCloud2"] = "RiDownloadCloud2Line";
  LineIcon2["draft"] = "RiDraftLine";
  LineIcon2["dragDrop"] = "RiDragDropLine";
  LineIcon2["dragMove"] = "RiDragMoveLine";
  LineIcon2["dragMove2"] = "RiDragMove2Line";
  LineIcon2["dribbble"] = "RiDribbbleLine";
  LineIcon2["drive"] = "RiDriveLine";
  LineIcon2["drizzle"] = "RiDrizzleLine";
  LineIcon2["drop"] = "RiDropLine";
  LineIcon2["dropbox"] = "RiDropboxLine";
  LineIcon2["dualSim1"] = "RiDualSim1Line";
  LineIcon2["dualSim2"] = "RiDualSim2Line";
  LineIcon2["dv"] = "RiDvLine";
  LineIcon2["dvd"] = "RiDvdLine";
  LineIcon2["eBike"] = "RiEBikeLine";
  LineIcon2["eBike2"] = "RiEBike2Line";
  LineIcon2["earth"] = "RiEarthLine";
  LineIcon2["earthquake"] = "RiEarthquakeLine";
  LineIcon2["edge"] = "RiEdgeLine";
  LineIcon2["edit"] = "RiEditLine";
  LineIcon2["edit2"] = "RiEdit2Line";
  LineIcon2["editBox"] = "RiEditBoxLine";
  LineIcon2["editCircle"] = "RiEditCircleLine";
  LineIcon2["eject"] = "RiEjectLine";
  LineIcon2["emotion"] = "RiEmotionLine";
  LineIcon2["emotion2"] = "RiEmotion2Line";
  LineIcon2["emotionHappy"] = "RiEmotionHappyLine";
  LineIcon2["emotionLaugh"] = "RiEmotionLaughLine";
  LineIcon2["emotionNormal"] = "RiEmotionNormalLine";
  LineIcon2["emotionSad"] = "RiEmotionSadLine";
  LineIcon2["emotionUnhappy"] = "RiEmotionUnhappyLine";
  LineIcon2["empathize"] = "RiEmpathizeLine";
  LineIcon2["equalizer"] = "RiEqualizerLine";
  LineIcon2["eraser"] = "RiEraserLine";
  LineIcon2["errorWarning"] = "RiErrorWarningLine";
  LineIcon2["evernote"] = "RiEvernoteLine";
  LineIcon2["exchange"] = "RiExchangeLine";
  LineIcon2["exchangeBox"] = "RiExchangeBoxLine";
  LineIcon2["exchangeCny"] = "RiExchangeCnyLine";
  LineIcon2["exchangeDollar"] = "RiExchangeDollarLine";
  LineIcon2["exchangeFunds"] = "RiExchangeFundsLine";
  LineIcon2["externalLink"] = "RiExternalLinkLine";
  LineIcon2["eye"] = "RiEyeLine";
  LineIcon2["eye2"] = "RiEye2Line";
  LineIcon2["eyeClose"] = "RiEyeCloseLine";
  LineIcon2["eyeOff"] = "RiEyeOffLine";
  LineIcon2["facebook"] = "RiFacebookLine";
  LineIcon2["facebookBox"] = "RiFacebookBoxLine";
  LineIcon2["facebookCircle"] = "RiFacebookCircleLine";
  LineIcon2["fahrenheit"] = "RiFahrenheitLine";
  LineIcon2["feedback"] = "RiFeedbackLine";
  LineIcon2["file"] = "RiFileLine";
  LineIcon2["file2"] = "RiFile2Line";
  LineIcon2["file3"] = "RiFile3Line";
  LineIcon2["file4"] = "RiFile4Line";
  LineIcon2["fileAdd"] = "RiFileAddLine";
  LineIcon2["fileChart"] = "RiFileChartLine";
  LineIcon2["fileChart2"] = "RiFileChart2Line";
  LineIcon2["fileCloud"] = "RiFileCloudLine";
  LineIcon2["fileCode"] = "RiFileCodeLine";
  LineIcon2["fileCopy"] = "RiFileCopyLine";
  LineIcon2["fileCopy2"] = "RiFileCopy2Line";
  LineIcon2["fileDamage"] = "RiFileDamageLine";
  LineIcon2["fileDownload"] = "RiFileDownloadLine";
  LineIcon2["fileEdit"] = "RiFileEditLine";
  LineIcon2["fileExcel"] = "RiFileExcelLine";
  LineIcon2["fileExcel2"] = "RiFileExcel2Line";
  LineIcon2["fileForbid"] = "RiFileForbidLine";
  LineIcon2["fileGif"] = "RiFileGifLine";
  LineIcon2["fileHistory"] = "RiFileHistoryLine";
  LineIcon2["fileHwp"] = "RiFileHwpLine";
  LineIcon2["fileInfo"] = "RiFileInfoLine";
  LineIcon2["fileList"] = "RiFileListLine";
  LineIcon2["fileList2"] = "RiFileList2Line";
  LineIcon2["fileList3"] = "RiFileList3Line";
  LineIcon2["fileLock"] = "RiFileLockLine";
  LineIcon2["fileMark"] = "RiFileMarkLine";
  LineIcon2["fileMusic"] = "RiFileMusicLine";
  LineIcon2["filePaper"] = "RiFilePaperLine";
  LineIcon2["filePaper2"] = "RiFilePaper2Line";
  LineIcon2["filePdf"] = "RiFilePdfLine";
  LineIcon2["filePpt"] = "RiFilePptLine";
  LineIcon2["filePpt2"] = "RiFilePpt2Line";
  LineIcon2["fileReduce"] = "RiFileReduceLine";
  LineIcon2["fileSearch"] = "RiFileSearchLine";
  LineIcon2["fileSettings"] = "RiFileSettingsLine";
  LineIcon2["fileShield"] = "RiFileShieldLine";
  LineIcon2["fileShield2"] = "RiFileShield2Line";
  LineIcon2["fileShred"] = "RiFileShredLine";
  LineIcon2["fileText"] = "RiFileTextLine";
  LineIcon2["fileTransfer"] = "RiFileTransferLine";
  LineIcon2["fileUnknow"] = "RiFileUnknowLine";
  LineIcon2["fileUpload"] = "RiFileUploadLine";
  LineIcon2["fileUser"] = "RiFileUserLine";
  LineIcon2["fileWarning"] = "RiFileWarningLine";
  LineIcon2["fileWord"] = "RiFileWordLine";
  LineIcon2["fileWord2"] = "RiFileWord2Line";
  LineIcon2["fileZip"] = "RiFileZipLine";
  LineIcon2["film"] = "RiFilmLine";
  LineIcon2["filter"] = "RiFilterLine";
  LineIcon2["filter2"] = "RiFilter2Line";
  LineIcon2["filter3"] = "RiFilter3Line";
  LineIcon2["filterOff"] = "RiFilterOffLine";
  LineIcon2["findReplace"] = "RiFindReplaceLine";
  LineIcon2["finder"] = "RiFinderLine";
  LineIcon2["fingerprint"] = "RiFingerprintLine";
  LineIcon2["fingerprint2"] = "RiFingerprint2Line";
  LineIcon2["fire"] = "RiFireLine";
  LineIcon2["firefox"] = "RiFirefoxLine";
  LineIcon2["firstAidKit"] = "RiFirstAidKitLine";
  LineIcon2["flag"] = "RiFlagLine";
  LineIcon2["flag2"] = "RiFlag2Line";
  LineIcon2["flashlight"] = "RiFlashlightLine";
  LineIcon2["flask"] = "RiFlaskLine";
  LineIcon2["flightLand"] = "RiFlightLandLine";
  LineIcon2["flightTakeoff"] = "RiFlightTakeoffLine";
  LineIcon2["flood"] = "RiFloodLine";
  LineIcon2["flutter"] = "RiFlutterLine";
  LineIcon2["focus"] = "RiFocusLine";
  LineIcon2["focus2"] = "RiFocus2Line";
  LineIcon2["focus3"] = "RiFocus3Line";
  LineIcon2["foggy"] = "RiFoggyLine";
  LineIcon2["folder"] = "RiFolderLine";
  LineIcon2["folder2"] = "RiFolder2Line";
  LineIcon2["folder3"] = "RiFolder3Line";
  LineIcon2["folder4"] = "RiFolder4Line";
  LineIcon2["folder5"] = "RiFolder5Line";
  LineIcon2["folderAdd"] = "RiFolderAddLine";
  LineIcon2["folderChart"] = "RiFolderChartLine";
  LineIcon2["folderChart2"] = "RiFolderChart2Line";
  LineIcon2["folderDownload"] = "RiFolderDownloadLine";
  LineIcon2["folderForbid"] = "RiFolderForbidLine";
  LineIcon2["folderHistory"] = "RiFolderHistoryLine";
  LineIcon2["folderInfo"] = "RiFolderInfoLine";
  LineIcon2["folderKeyhole"] = "RiFolderKeyholeLine";
  LineIcon2["folderLock"] = "RiFolderLockLine";
  LineIcon2["folderMusic"] = "RiFolderMusicLine";
  LineIcon2["folderOpen"] = "RiFolderOpenLine";
  LineIcon2["folderReceived"] = "RiFolderReceivedLine";
  LineIcon2["folderReduce"] = "RiFolderReduceLine";
  LineIcon2["folderSettings"] = "RiFolderSettingsLine";
  LineIcon2["folderShared"] = "RiFolderSharedLine";
  LineIcon2["folderShield"] = "RiFolderShieldLine";
  LineIcon2["folderShield2"] = "RiFolderShield2Line";
  LineIcon2["folderTransfer"] = "RiFolderTransferLine";
  LineIcon2["folderUnknow"] = "RiFolderUnknowLine";
  LineIcon2["folderUpload"] = "RiFolderUploadLine";
  LineIcon2["folderUser"] = "RiFolderUserLine";
  LineIcon2["folderWarning"] = "RiFolderWarningLine";
  LineIcon2["folderZip"] = "RiFolderZipLine";
  LineIcon2["folders"] = "RiFoldersLine";
  LineIcon2["football"] = "RiFootballLine";
  LineIcon2["footprint"] = "RiFootprintLine";
  LineIcon2["forbid"] = "RiForbidLine";
  LineIcon2["forbid2"] = "RiForbid2Line";
  LineIcon2["fridge"] = "RiFridgeLine";
  LineIcon2["fullscreen"] = "RiFullscreenLine";
  LineIcon2["fullscreenExit"] = "RiFullscreenExitLine";
  LineIcon2["function"] = "RiFunctionLine";
  LineIcon2["funds"] = "RiFundsLine";
  LineIcon2["fundsBox"] = "RiFundsBoxLine";
  LineIcon2["gallery"] = "RiGalleryLine";
  LineIcon2["galleryUpload"] = "RiGalleryUploadLine";
  LineIcon2["game"] = "RiGameLine";
  LineIcon2["gamepad"] = "RiGamepadLine";
  LineIcon2["gasStation"] = "RiGasStationLine";
  LineIcon2["gatsby"] = "RiGatsbyLine";
  LineIcon2["genderless"] = "RiGenderlessLine";
  LineIcon2["ghost"] = "RiGhostLine";
  LineIcon2["ghost2"] = "RiGhost2Line";
  LineIcon2["ghostSmile"] = "RiGhostSmileLine";
  LineIcon2["gift"] = "RiGiftLine";
  LineIcon2["gift2"] = "RiGift2Line";
  LineIcon2["gitBranch"] = "RiGitBranchLine";
  LineIcon2["gitCommit"] = "RiGitCommitLine";
  LineIcon2["gitMerge"] = "RiGitMergeLine";
  LineIcon2["gitPullRequest"] = "RiGitPullRequestLine";
  LineIcon2["gitRepository"] = "RiGitRepositoryLine";
  LineIcon2["gitRepositoryCommits"] = "RiGitRepositoryCommitsLine";
  LineIcon2["gitRepositoryPrivate"] = "RiGitRepositoryPrivateLine";
  LineIcon2["github"] = "RiGithubLine";
  LineIcon2["gitlab"] = "RiGitlabLine";
  LineIcon2["global"] = "RiGlobalLine";
  LineIcon2["globe"] = "RiGlobeLine";
  LineIcon2["goblet"] = "RiGobletLine";
  LineIcon2["google"] = "RiGoogleLine";
  LineIcon2["googlePlay"] = "RiGooglePlayLine";
  LineIcon2["government"] = "RiGovernmentLine";
  LineIcon2["gps"] = "RiGpsLine";
  LineIcon2["gradienter"] = "RiGradienterLine";
  LineIcon2["grid"] = "RiGridLine";
  LineIcon2["group"] = "RiGroupLine";
  LineIcon2["group2"] = "RiGroup2Line";
  LineIcon2["guide"] = "RiGuideLine";
  LineIcon2["hail"] = "RiHailLine";
  LineIcon2["hammer"] = "RiHammerLine";
  LineIcon2["handCoin"] = "RiHandCoinLine";
  LineIcon2["handHeart"] = "RiHandHeartLine";
  LineIcon2["handSanitizer"] = "RiHandSanitizerLine";
  LineIcon2["handbag"] = "RiHandbagLine";
  LineIcon2["hardDrive"] = "RiHardDriveLine";
  LineIcon2["hardDrive2"] = "RiHardDrive2Line";
  LineIcon2["haze"] = "RiHazeLine";
  LineIcon2["haze2"] = "RiHaze2Line";
  LineIcon2["hd"] = "RiHdLine";
  LineIcon2["headphone"] = "RiHeadphoneLine";
  LineIcon2["healthBook"] = "RiHealthBookLine";
  LineIcon2["heart"] = "RiHeartLine";
  LineIcon2["heart2"] = "RiHeart2Line";
  LineIcon2["heart3"] = "RiHeart3Line";
  LineIcon2["heartAdd"] = "RiHeartAddLine";
  LineIcon2["heartPulse"] = "RiHeartPulseLine";
  LineIcon2["hearts"] = "RiHeartsLine";
  LineIcon2["heavyShowers"] = "RiHeavyShowersLine";
  LineIcon2["history"] = "RiHistoryLine";
  LineIcon2["home"] = "RiHomeLine";
  LineIcon2["home2"] = "RiHome2Line";
  LineIcon2["home3"] = "RiHome3Line";
  LineIcon2["home4"] = "RiHome4Line";
  LineIcon2["home5"] = "RiHome5Line";
  LineIcon2["home6"] = "RiHome6Line";
  LineIcon2["home7"] = "RiHome7Line";
  LineIcon2["home8"] = "RiHome8Line";
  LineIcon2["homeGear"] = "RiHomeGearLine";
  LineIcon2["homeHeart"] = "RiHomeHeartLine";
  LineIcon2["homeSmile"] = "RiHomeSmileLine";
  LineIcon2["homeSmile2"] = "RiHomeSmile2Line";
  LineIcon2["homeWifi"] = "RiHomeWifiLine";
  LineIcon2["honorOfKings"] = "RiHonorOfKingsLine";
  LineIcon2["honour"] = "RiHonourLine";
  LineIcon2["hospital"] = "RiHospitalLine";
  LineIcon2["hotel"] = "RiHotelLine";
  LineIcon2["hotelBed"] = "RiHotelBedLine";
  LineIcon2["hotspot"] = "RiHotspotLine";
  LineIcon2["hq"] = "RiHqLine";
  LineIcon2["html5"] = "RiHtml5Line";
  LineIcon2["ie"] = "RiIeLine";
  LineIcon2["image"] = "RiImageLine";
  LineIcon2["image2"] = "RiImage2Line";
  LineIcon2["imageAdd"] = "RiImageAddLine";
  LineIcon2["imageEdit"] = "RiImageEditLine";
  LineIcon2["inbox"] = "RiInboxLine";
  LineIcon2["inboxArchive"] = "RiInboxArchiveLine";
  LineIcon2["inboxUnarchive"] = "RiInboxUnarchiveLine";
  LineIcon2["increaseDecrease"] = "RiIncreaseDecreaseLine";
  LineIcon2["indeterminateCircle"] = "RiIndeterminateCircleLine";
  LineIcon2["information"] = "RiInformationLine";
  LineIcon2["infraredThermometer"] = "RiInfraredThermometerLine";
  LineIcon2["inkBottle"] = "RiInkBottleLine";
  LineIcon2["inputMethod"] = "RiInputMethodLine";
  LineIcon2["instagram"] = "RiInstagramLine";
  LineIcon2["install"] = "RiInstallLine";
  LineIcon2["invision"] = "RiInvisionLine";
  LineIcon2["kakaoTalk"] = "RiKakaoTalkLine";
  LineIcon2["key"] = "RiKeyLine";
  LineIcon2["key2"] = "RiKey2Line";
  LineIcon2["keyboard"] = "RiKeyboardLine";
  LineIcon2["keyboardBox"] = "RiKeyboardBoxLine";
  LineIcon2["keynote"] = "RiKeynoteLine";
  LineIcon2["knife"] = "RiKnifeLine";
  LineIcon2["knifeBlood"] = "RiKnifeBloodLine";
  LineIcon2["landscape"] = "RiLandscapeLine";
  LineIcon2["layout"] = "RiLayoutLine";
  LineIcon2["layout2"] = "RiLayout2Line";
  LineIcon2["layout3"] = "RiLayout3Line";
  LineIcon2["layout4"] = "RiLayout4Line";
  LineIcon2["layout5"] = "RiLayout5Line";
  LineIcon2["layout6"] = "RiLayout6Line";
  LineIcon2["layoutBottom"] = "RiLayoutBottomLine";
  LineIcon2["layoutBottom2"] = "RiLayoutBottom2Line";
  LineIcon2["layoutColumn"] = "RiLayoutColumnLine";
  LineIcon2["layoutGrid"] = "RiLayoutGridLine";
  LineIcon2["layoutLeft"] = "RiLayoutLeftLine";
  LineIcon2["layoutLeft2"] = "RiLayoutLeft2Line";
  LineIcon2["layoutMasonry"] = "RiLayoutMasonryLine";
  LineIcon2["layoutRight"] = "RiLayoutRightLine";
  LineIcon2["layoutRight2"] = "RiLayoutRight2Line";
  LineIcon2["layoutRow"] = "RiLayoutRowLine";
  LineIcon2["layoutTop"] = "RiLayoutTopLine";
  LineIcon2["layoutTop2"] = "RiLayoutTop2Line";
  LineIcon2["leaf"] = "RiLeafLine";
  LineIcon2["lifebuoy"] = "RiLifebuoyLine";
  LineIcon2["lightbulb"] = "RiLightbulbLine";
  LineIcon2["lightbulbFlash"] = "RiLightbulbFlashLine";
  LineIcon2["line"] = "RiLineLine";
  LineIcon2["lineChart"] = "RiLineChartLine";
  LineIcon2["linkedin"] = "RiLinkedinLine";
  LineIcon2["linkedinBox"] = "RiLinkedinBoxLine";
  LineIcon2["links"] = "RiLinksLine";
  LineIcon2["listSettings"] = "RiListSettingsLine";
  LineIcon2["live"] = "RiLiveLine";
  LineIcon2["loader"] = "RiLoaderLine";
  LineIcon2["loader2"] = "RiLoader2Line";
  LineIcon2["loader3"] = "RiLoader3Line";
  LineIcon2["loader4"] = "RiLoader4Line";
  LineIcon2["loader5"] = "RiLoader5Line";
  LineIcon2["lock"] = "RiLockLine";
  LineIcon2["lock2"] = "RiLock2Line";
  LineIcon2["lockPassword"] = "RiLockPasswordLine";
  LineIcon2["lockUnlock"] = "RiLockUnlockLine";
  LineIcon2["loginBox"] = "RiLoginBoxLine";
  LineIcon2["loginCircle"] = "RiLoginCircleLine";
  LineIcon2["logoutBox"] = "RiLogoutBoxLine";
  LineIcon2["logoutBoxR"] = "RiLogoutBoxRLine";
  LineIcon2["logoutCircle"] = "RiLogoutCircleLine";
  LineIcon2["logoutCircleR"] = "RiLogoutCircleRLine";
  LineIcon2["luggageCart"] = "RiLuggageCartLine";
  LineIcon2["luggageDeposit"] = "RiLuggageDepositLine";
  LineIcon2["lungs"] = "RiLungsLine";
  LineIcon2["mac"] = "RiMacLine";
  LineIcon2["macbook"] = "RiMacbookLine";
  LineIcon2["magic"] = "RiMagicLine";
  LineIcon2["mail"] = "RiMailLine";
  LineIcon2["mailAdd"] = "RiMailAddLine";
  LineIcon2["mailCheck"] = "RiMailCheckLine";
  LineIcon2["mailClose"] = "RiMailCloseLine";
  LineIcon2["mailDownload"] = "RiMailDownloadLine";
  LineIcon2["mailForbid"] = "RiMailForbidLine";
  LineIcon2["mailLock"] = "RiMailLockLine";
  LineIcon2["mailOpen"] = "RiMailOpenLine";
  LineIcon2["mailSend"] = "RiMailSendLine";
  LineIcon2["mailSettings"] = "RiMailSettingsLine";
  LineIcon2["mailStar"] = "RiMailStarLine";
  LineIcon2["mailUnread"] = "RiMailUnreadLine";
  LineIcon2["mailVolume"] = "RiMailVolumeLine";
  LineIcon2["map"] = "RiMapLine";
  LineIcon2["map2"] = "RiMap2Line";
  LineIcon2["mapPin"] = "RiMapPinLine";
  LineIcon2["mapPin2"] = "RiMapPin2Line";
  LineIcon2["mapPin3"] = "RiMapPin3Line";
  LineIcon2["mapPin4"] = "RiMapPin4Line";
  LineIcon2["mapPin5"] = "RiMapPin5Line";
  LineIcon2["mapPinAdd"] = "RiMapPinAddLine";
  LineIcon2["mapPinRange"] = "RiMapPinRangeLine";
  LineIcon2["mapPinTime"] = "RiMapPinTimeLine";
  LineIcon2["mapPinUser"] = "RiMapPinUserLine";
  LineIcon2["markPen"] = "RiMarkPenLine";
  LineIcon2["markdown"] = "RiMarkdownLine";
  LineIcon2["markup"] = "RiMarkupLine";
  LineIcon2["mastercard"] = "RiMastercardLine";
  LineIcon2["mastodon"] = "RiMastodonLine";
  LineIcon2["medal"] = "RiMedalLine";
  LineIcon2["medal2"] = "RiMedal2Line";
  LineIcon2["medicineBottle"] = "RiMedicineBottleLine";
  LineIcon2["medium"] = "RiMediumLine";
  LineIcon2["men"] = "RiMenLine";
  LineIcon2["mentalHealth"] = "RiMentalHealthLine";
  LineIcon2["menu"] = "RiMenuLine";
  LineIcon2["menu2"] = "RiMenu2Line";
  LineIcon2["menu3"] = "RiMenu3Line";
  LineIcon2["menu4"] = "RiMenu4Line";
  LineIcon2["menu5"] = "RiMenu5Line";
  LineIcon2["menuAdd"] = "RiMenuAddLine";
  LineIcon2["menuFold"] = "RiMenuFoldLine";
  LineIcon2["menuUnfold"] = "RiMenuUnfoldLine";
  LineIcon2["message"] = "RiMessageLine";
  LineIcon2["message2"] = "RiMessage2Line";
  LineIcon2["message3"] = "RiMessage3Line";
  LineIcon2["messenger"] = "RiMessengerLine";
  LineIcon2["meteor"] = "RiMeteorLine";
  LineIcon2["mic"] = "RiMicLine";
  LineIcon2["mic2"] = "RiMic2Line";
  LineIcon2["micOff"] = "RiMicOffLine";
  LineIcon2["mickey"] = "RiMickeyLine";
  LineIcon2["microscope"] = "RiMicroscopeLine";
  LineIcon2["microsoft"] = "RiMicrosoftLine";
  LineIcon2["miniProgram"] = "RiMiniProgramLine";
  LineIcon2["mist"] = "RiMistLine";
  LineIcon2["moneyCnyBox"] = "RiMoneyCnyBoxLine";
  LineIcon2["moneyCnyCircle"] = "RiMoneyCnyCircleLine";
  LineIcon2["moneyDollarBox"] = "RiMoneyDollarBoxLine";
  LineIcon2["moneyDollarCircle"] = "RiMoneyDollarCircleLine";
  LineIcon2["moneyEuroBox"] = "RiMoneyEuroBoxLine";
  LineIcon2["moneyEuroCircle"] = "RiMoneyEuroCircleLine";
  LineIcon2["moneyPoundBox"] = "RiMoneyPoundBoxLine";
  LineIcon2["moneyPoundCircle"] = "RiMoneyPoundCircleLine";
  LineIcon2["moon"] = "RiMoonLine";
  LineIcon2["moonClear"] = "RiMoonClearLine";
  LineIcon2["moonCloudy"] = "RiMoonCloudyLine";
  LineIcon2["moonFoggy"] = "RiMoonFoggyLine";
  LineIcon2["more"] = "RiMoreLine";
  LineIcon2["more2"] = "RiMore2Line";
  LineIcon2["motorbike"] = "RiMotorbikeLine";
  LineIcon2["mouse"] = "RiMouseLine";
  LineIcon2["movie"] = "RiMovieLine";
  LineIcon2["movie2"] = "RiMovie2Line";
  LineIcon2["music"] = "RiMusicLine";
  LineIcon2["music2"] = "RiMusic2Line";
  LineIcon2["mv"] = "RiMvLine";
  LineIcon2["navigation"] = "RiNavigationLine";
  LineIcon2["neteaseCloudMusic"] = "RiNeteaseCloudMusicLine";
  LineIcon2["netflix"] = "RiNetflixLine";
  LineIcon2["newspaper"] = "RiNewspaperLine";
  LineIcon2["notification"] = "RiNotificationLine";
  LineIcon2["notification2"] = "RiNotification2Line";
  LineIcon2["notification3"] = "RiNotification3Line";
  LineIcon2["notification4"] = "RiNotification4Line";
  LineIcon2["notificationBadge"] = "RiNotificationBadgeLine";
  LineIcon2["notificationOff"] = "RiNotificationOffLine";
  LineIcon2["npmjs"] = "RiNpmjsLine";
  LineIcon2["numbers"] = "RiNumbersLine";
  LineIcon2["nurse"] = "RiNurseLine";
  LineIcon2["oil"] = "RiOilLine";
  LineIcon2["openArm"] = "RiOpenArmLine";
  LineIcon2["openSource"] = "RiOpenSourceLine";
  LineIcon2["opera"] = "RiOperaLine";
  LineIcon2["orderPlay"] = "RiOrderPlayLine";
  LineIcon2["outlet"] = "RiOutletLine";
  LineIcon2["outlet2"] = "RiOutlet2Line";
  LineIcon2["pages"] = "RiPagesLine";
  LineIcon2["paint"] = "RiPaintLine";
  LineIcon2["paintBrush"] = "RiPaintBrushLine";
  LineIcon2["palette"] = "RiPaletteLine";
  LineIcon2["pantone"] = "RiPantoneLine";
  LineIcon2["parent"] = "RiParentLine";
  LineIcon2["parentheses"] = "RiParenthesesLine";
  LineIcon2["parking"] = "RiParkingLine";
  LineIcon2["parkingBox"] = "RiParkingBoxLine";
  LineIcon2["passport"] = "RiPassportLine";
  LineIcon2["patreon"] = "RiPatreonLine";
  LineIcon2["pause"] = "RiPauseLine";
  LineIcon2["pauseCircle"] = "RiPauseCircleLine";
  LineIcon2["pauseMini"] = "RiPauseMiniLine";
  LineIcon2["paypal"] = "RiPaypalLine";
  LineIcon2["penNib"] = "RiPenNibLine";
  LineIcon2["pencil"] = "RiPencilLine";
  LineIcon2["pencilRuler"] = "RiPencilRulerLine";
  LineIcon2["pencilRuler2"] = "RiPencilRuler2Line";
  LineIcon2["percent"] = "RiPercentLine";
  LineIcon2["phone"] = "RiPhoneLine";
  LineIcon2["phoneCamera"] = "RiPhoneCameraLine";
  LineIcon2["phoneFind"] = "RiPhoneFindLine";
  LineIcon2["phoneLock"] = "RiPhoneLockLine";
  LineIcon2["pictureInPicture"] = "RiPictureInPictureLine";
  LineIcon2["pictureInPicture2"] = "RiPictureInPicture2Line";
  LineIcon2["pictureInPictureExit"] = "RiPictureInPictureExitLine";
  LineIcon2["pieChart"] = "RiPieChartLine";
  LineIcon2["pieChart2"] = "RiPieChart2Line";
  LineIcon2["pieChartBox"] = "RiPieChartBoxLine";
  LineIcon2["pinDistance"] = "RiPinDistanceLine";
  LineIcon2["pingPong"] = "RiPingPongLine";
  LineIcon2["pinterest"] = "RiPinterestLine";
  LineIcon2["pixelfed"] = "RiPixelfedLine";
  LineIcon2["plane"] = "RiPlaneLine";
  LineIcon2["plant"] = "RiPlantLine";
  LineIcon2["play"] = "RiPlayLine";
  LineIcon2["playCircle"] = "RiPlayCircleLine";
  LineIcon2["playList"] = "RiPlayListLine";
  LineIcon2["playList2"] = "RiPlayList2Line";
  LineIcon2["playListAdd"] = "RiPlayListAddLine";
  LineIcon2["playMini"] = "RiPlayMiniLine";
  LineIcon2["playstation"] = "RiPlaystationLine";
  LineIcon2["plug"] = "RiPlugLine";
  LineIcon2["plug2"] = "RiPlug2Line";
  LineIcon2["polaroid"] = "RiPolaroidLine";
  LineIcon2["polaroid2"] = "RiPolaroid2Line";
  LineIcon2["policeCar"] = "RiPoliceCarLine";
  LineIcon2["priceTag"] = "RiPriceTagLine";
  LineIcon2["priceTag2"] = "RiPriceTag2Line";
  LineIcon2["priceTag3"] = "RiPriceTag3Line";
  LineIcon2["printer"] = "RiPrinterLine";
  LineIcon2["printerCloud"] = "RiPrinterCloudLine";
  LineIcon2["productHunt"] = "RiProductHuntLine";
  LineIcon2["profile"] = "RiProfileLine";
  LineIcon2["projector"] = "RiProjectorLine";
  LineIcon2["projector2"] = "RiProjector2Line";
  LineIcon2["psychotherapy"] = "RiPsychotherapyLine";
  LineIcon2["pulse"] = "RiPulseLine";
  LineIcon2["pushpin"] = "RiPushpinLine";
  LineIcon2["pushpin2"] = "RiPushpin2Line";
  LineIcon2["qq"] = "RiQqLine";
  LineIcon2["qrCode"] = "RiQrCodeLine";
  LineIcon2["qrScan"] = "RiQrScanLine";
  LineIcon2["qrScan2"] = "RiQrScan2Line";
  LineIcon2["question"] = "RiQuestionLine";
  LineIcon2["questionAnswer"] = "RiQuestionAnswerLine";
  LineIcon2["questionnaire"] = "RiQuestionnaireLine";
  LineIcon2["quillPen"] = "RiQuillPenLine";
  LineIcon2["radar"] = "RiRadarLine";
  LineIcon2["radio"] = "RiRadioLine";
  LineIcon2["radio2"] = "RiRadio2Line";
  LineIcon2["radioButton"] = "RiRadioButtonLine";
  LineIcon2["rainbow"] = "RiRainbowLine";
  LineIcon2["rainy"] = "RiRainyLine";
  LineIcon2["reactjs"] = "RiReactjsLine";
  LineIcon2["recordCircle"] = "RiRecordCircleLine";
  LineIcon2["recordMail"] = "RiRecordMailLine";
  LineIcon2["recycle"] = "RiRecycleLine";
  LineIcon2["redPacket"] = "RiRedPacketLine";
  LineIcon2["reddit"] = "RiRedditLine";
  LineIcon2["refresh"] = "RiRefreshLine";
  LineIcon2["refund"] = "RiRefundLine";
  LineIcon2["refund2"] = "RiRefund2Line";
  LineIcon2["registered"] = "RiRegisteredLine";
  LineIcon2["remixicon"] = "RiRemixiconLine";
  LineIcon2["remoteControl"] = "RiRemoteControlLine";
  LineIcon2["remoteControl2"] = "RiRemoteControl2Line";
  LineIcon2["repeat"] = "RiRepeatLine";
  LineIcon2["repeat2"] = "RiRepeat2Line";
  LineIcon2["repeatOne"] = "RiRepeatOneLine";
  LineIcon2["reply"] = "RiReplyLine";
  LineIcon2["replyAll"] = "RiReplyAllLine";
  LineIcon2["reserved"] = "RiReservedLine";
  LineIcon2["restTime"] = "RiRestTimeLine";
  LineIcon2["restart"] = "RiRestartLine";
  LineIcon2["restaurant"] = "RiRestaurantLine";
  LineIcon2["restaurant2"] = "RiRestaurant2Line";
  LineIcon2["rewind"] = "RiRewindLine";
  LineIcon2["rewindMini"] = "RiRewindMiniLine";
  LineIcon2["rhythm"] = "RiRhythmLine";
  LineIcon2["riding"] = "RiRidingLine";
  LineIcon2["roadMap"] = "RiRoadMapLine";
  LineIcon2["roadster"] = "RiRoadsterLine";
  LineIcon2["robot"] = "RiRobotLine";
  LineIcon2["rocket"] = "RiRocketLine";
  LineIcon2["rocket2"] = "RiRocket2Line";
  LineIcon2["rotateLock"] = "RiRotateLockLine";
  LineIcon2["route"] = "RiRouteLine";
  LineIcon2["router"] = "RiRouterLine";
  LineIcon2["rss"] = "RiRssLine";
  LineIcon2["ruler"] = "RiRulerLine";
  LineIcon2["ruler2"] = "RiRuler2Line";
  LineIcon2["run"] = "RiRunLine";
  LineIcon2["safari"] = "RiSafariLine";
  LineIcon2["safe"] = "RiSafeLine";
  LineIcon2["safe2"] = "RiSafe2Line";
  LineIcon2["sailboat"] = "RiSailboatLine";
  LineIcon2["save"] = "RiSaveLine";
  LineIcon2["save2"] = "RiSave2Line";
  LineIcon2["save3"] = "RiSave3Line";
  LineIcon2["scales"] = "RiScalesLine";
  LineIcon2["scales2"] = "RiScales2Line";
  LineIcon2["scales3"] = "RiScales3Line";
  LineIcon2["scan"] = "RiScanLine";
  LineIcon2["scan2"] = "RiScan2Line";
  LineIcon2["scissors"] = "RiScissorsLine";
  LineIcon2["scissors2"] = "RiScissors2Line";
  LineIcon2["scissorsCut"] = "RiScissorsCutLine";
  LineIcon2["screenshot"] = "RiScreenshotLine";
  LineIcon2["screenshot2"] = "RiScreenshot2Line";
  LineIcon2["sdCard"] = "RiSdCardLine";
  LineIcon2["sdCardMini"] = "RiSdCardMiniLine";
  LineIcon2["search"] = "RiSearchLine";
  LineIcon2["search2"] = "RiSearch2Line";
  LineIcon2["searchEye"] = "RiSearchEyeLine";
  LineIcon2["securePayment"] = "RiSecurePaymentLine";
  LineIcon2["seedling"] = "RiSeedlingLine";
  LineIcon2["sendPlane"] = "RiSendPlaneLine";
  LineIcon2["sendPlane2"] = "RiSendPlane2Line";
  LineIcon2["sensor"] = "RiSensorLine";
  LineIcon2["server"] = "RiServerLine";
  LineIcon2["service"] = "RiServiceLine";
  LineIcon2["settings"] = "RiSettingsLine";
  LineIcon2["settings2"] = "RiSettings2Line";
  LineIcon2["settings3"] = "RiSettings3Line";
  LineIcon2["settings4"] = "RiSettings4Line";
  LineIcon2["settings5"] = "RiSettings5Line";
  LineIcon2["settings6"] = "RiSettings6Line";
  LineIcon2["shape"] = "RiShapeLine";
  LineIcon2["shape2"] = "RiShape2Line";
  LineIcon2["share"] = "RiShareLine";
  LineIcon2["shareBox"] = "RiShareBoxLine";
  LineIcon2["shareCircle"] = "RiShareCircleLine";
  LineIcon2["shareForward"] = "RiShareForwardLine";
  LineIcon2["shareForward2"] = "RiShareForward2Line";
  LineIcon2["shareForwardBox"] = "RiShareForwardBoxLine";
  LineIcon2["shield"] = "RiShieldLine";
  LineIcon2["shieldCheck"] = "RiShieldCheckLine";
  LineIcon2["shieldCross"] = "RiShieldCrossLine";
  LineIcon2["shieldFlash"] = "RiShieldFlashLine";
  LineIcon2["shieldKeyhole"] = "RiShieldKeyholeLine";
  LineIcon2["shieldStar"] = "RiShieldStarLine";
  LineIcon2["shieldUser"] = "RiShieldUserLine";
  LineIcon2["ship"] = "RiShipLine";
  LineIcon2["ship2"] = "RiShip2Line";
  LineIcon2["shirt"] = "RiShirtLine";
  LineIcon2["shoppingBag"] = "RiShoppingBagLine";
  LineIcon2["shoppingBag2"] = "RiShoppingBag2Line";
  LineIcon2["shoppingBag3"] = "RiShoppingBag3Line";
  LineIcon2["shoppingBasket"] = "RiShoppingBasketLine";
  LineIcon2["shoppingBasket2"] = "RiShoppingBasket2Line";
  LineIcon2["shoppingCart"] = "RiShoppingCartLine";
  LineIcon2["shoppingCart2"] = "RiShoppingCart2Line";
  LineIcon2["showers"] = "RiShowersLine";
  LineIcon2["shuffle"] = "RiShuffleLine";
  LineIcon2["shutDown"] = "RiShutDownLine";
  LineIcon2["sideBar"] = "RiSideBarLine";
  LineIcon2["signalTower"] = "RiSignalTowerLine";
  LineIcon2["signalWifi"] = "RiSignalWifiLine";
  LineIcon2["signalWifi1"] = "RiSignalWifi1Line";
  LineIcon2["signalWifi2"] = "RiSignalWifi2Line";
  LineIcon2["signalWifi3"] = "RiSignalWifi3Line";
  LineIcon2["signalWifiError"] = "RiSignalWifiErrorLine";
  LineIcon2["signalWifiOff"] = "RiSignalWifiOffLine";
  LineIcon2["simCard"] = "RiSimCardLine";
  LineIcon2["simCard2"] = "RiSimCard2Line";
  LineIcon2["sip"] = "RiSipLine";
  LineIcon2["skipBack"] = "RiSkipBackLine";
  LineIcon2["skipBackMini"] = "RiSkipBackMiniLine";
  LineIcon2["skipForward"] = "RiSkipForwardLine";
  LineIcon2["skipForwardMini"] = "RiSkipForwardMiniLine";
  LineIcon2["skull"] = "RiSkullLine";
  LineIcon2["skull2"] = "RiSkull2Line";
  LineIcon2["skype"] = "RiSkypeLine";
  LineIcon2["slack"] = "RiSlackLine";
  LineIcon2["slice"] = "RiSliceLine";
  LineIcon2["slideshow"] = "RiSlideshowLine";
  LineIcon2["slideshow2"] = "RiSlideshow2Line";
  LineIcon2["slideshow3"] = "RiSlideshow3Line";
  LineIcon2["slideshow4"] = "RiSlideshow4Line";
  LineIcon2["smartphone"] = "RiSmartphoneLine";
  LineIcon2["snapchat"] = "RiSnapchatLine";
  LineIcon2["snowy"] = "RiSnowyLine";
  LineIcon2["soundModule"] = "RiSoundModuleLine";
  LineIcon2["soundcloud"] = "RiSoundcloudLine";
  LineIcon2["spaceShip"] = "RiSpaceShipLine";
  LineIcon2["spam"] = "RiSpamLine";
  LineIcon2["spam2"] = "RiSpam2Line";
  LineIcon2["spam3"] = "RiSpam3Line";
  LineIcon2["speaker"] = "RiSpeakerLine";
  LineIcon2["speaker2"] = "RiSpeaker2Line";
  LineIcon2["speaker3"] = "RiSpeaker3Line";
  LineIcon2["spectrum"] = "RiSpectrumLine";
  LineIcon2["speed"] = "RiSpeedLine";
  LineIcon2["speedMini"] = "RiSpeedMiniLine";
  LineIcon2["spotify"] = "RiSpotifyLine";
  LineIcon2["spy"] = "RiSpyLine";
  LineIcon2["stack"] = "RiStackLine";
  LineIcon2["stackOverflow"] = "RiStackOverflowLine";
  LineIcon2["stackshare"] = "RiStackshareLine";
  LineIcon2["star"] = "RiStarLine";
  LineIcon2["starHalf"] = "RiStarHalfLine";
  LineIcon2["starHalfS"] = "RiStarHalfSLine";
  LineIcon2["starS"] = "RiStarSLine";
  LineIcon2["starSmile"] = "RiStarSmileLine";
  LineIcon2["steam"] = "RiSteamLine";
  LineIcon2["steering"] = "RiSteeringLine";
  LineIcon2["steering2"] = "RiSteering2Line";
  LineIcon2["stethoscope"] = "RiStethoscopeLine";
  LineIcon2["stickyNote"] = "RiStickyNoteLine";
  LineIcon2["stickyNote2"] = "RiStickyNote2Line";
  LineIcon2["stock"] = "RiStockLine";
  LineIcon2["stop"] = "RiStopLine";
  LineIcon2["stopCircle"] = "RiStopCircleLine";
  LineIcon2["stopMini"] = "RiStopMiniLine";
  LineIcon2["store"] = "RiStoreLine";
  LineIcon2["store2"] = "RiStore2Line";
  LineIcon2["store3"] = "RiStore3Line";
  LineIcon2["subtract"] = "RiSubtractLine";
  LineIcon2["subway"] = "RiSubwayLine";
  LineIcon2["subwayWifi"] = "RiSubwayWifiLine";
  LineIcon2["suitcase"] = "RiSuitcaseLine";
  LineIcon2["suitcase2"] = "RiSuitcase2Line";
  LineIcon2["suitcase3"] = "RiSuitcase3Line";
  LineIcon2["sun"] = "RiSunLine";
  LineIcon2["sunCloudy"] = "RiSunCloudyLine";
  LineIcon2["sunFoggy"] = "RiSunFoggyLine";
  LineIcon2["surgicalMask"] = "RiSurgicalMaskLine";
  LineIcon2["surroundSound"] = "RiSurroundSoundLine";
  LineIcon2["survey"] = "RiSurveyLine";
  LineIcon2["swap"] = "RiSwapLine";
  LineIcon2["swapBox"] = "RiSwapBoxLine";
  LineIcon2["switch"] = "RiSwitchLine";
  LineIcon2["sword"] = "RiSwordLine";
  LineIcon2["syringe"] = "RiSyringeLine";
  LineIcon2["tBox"] = "RiTBoxLine";
  LineIcon2["tShirt"] = "RiTShirtLine";
  LineIcon2["tShirt2"] = "RiTShirt2Line";
  LineIcon2["tShirtAir"] = "RiTShirtAirLine";
  LineIcon2["table"] = "RiTableLine";
  LineIcon2["tableAlt"] = "RiTableAltLine";
  LineIcon2["tablet"] = "RiTabletLine";
  LineIcon2["takeaway"] = "RiTakeawayLine";
  LineIcon2["taobao"] = "RiTaobaoLine";
  LineIcon2["tape"] = "RiTapeLine";
  LineIcon2["task"] = "RiTaskLine";
  LineIcon2["taxi"] = "RiTaxiLine";
  LineIcon2["taxiWifi"] = "RiTaxiWifiLine";
  LineIcon2["team"] = "RiTeamLine";
  LineIcon2["telegram"] = "RiTelegramLine";
  LineIcon2["tempCold"] = "RiTempColdLine";
  LineIcon2["tempHot"] = "RiTempHotLine";
  LineIcon2["terminal"] = "RiTerminalLine";
  LineIcon2["terminalBox"] = "RiTerminalBoxLine";
  LineIcon2["terminalWindow"] = "RiTerminalWindowLine";
  LineIcon2["testTube"] = "RiTestTubeLine";
  LineIcon2["thermometer"] = "RiThermometerLine";
  LineIcon2["thumbDown"] = "RiThumbDownLine";
  LineIcon2["thumbUp"] = "RiThumbUpLine";
  LineIcon2["thunderstorms"] = "RiThunderstormsLine";
  LineIcon2["ticket"] = "RiTicketLine";
  LineIcon2["ticket2"] = "RiTicket2Line";
  LineIcon2["time"] = "RiTimeLine";
  LineIcon2["timer"] = "RiTimerLine";
  LineIcon2["timer2"] = "RiTimer2Line";
  LineIcon2["timerFlash"] = "RiTimerFlashLine";
  LineIcon2["todo"] = "RiTodoLine";
  LineIcon2["toggle"] = "RiToggleLine";
  LineIcon2["tools"] = "RiToolsLine";
  LineIcon2["tornado"] = "RiTornadoLine";
  LineIcon2["trademark"] = "RiTrademarkLine";
  LineIcon2["trafficLight"] = "RiTrafficLightLine";
  LineIcon2["train"] = "RiTrainLine";
  LineIcon2["trainWifi"] = "RiTrainWifiLine";
  LineIcon2["travesti"] = "RiTravestiLine";
  LineIcon2["treasureMap"] = "RiTreasureMapLine";
  LineIcon2["trello"] = "RiTrelloLine";
  LineIcon2["trophy"] = "RiTrophyLine";
  LineIcon2["truck"] = "RiTruckLine";
  LineIcon2["tumblr"] = "RiTumblrLine";
  LineIcon2["tv"] = "RiTvLine";
  LineIcon2["tv2"] = "RiTv2Line";
  LineIcon2["twitch"] = "RiTwitchLine";
  LineIcon2["twitter"] = "RiTwitterLine";
  LineIcon2["typhoon"] = "RiTyphoonLine";
  LineIcon2["uDisk"] = "RiUDiskLine";
  LineIcon2["ubuntu"] = "RiUbuntuLine";
  LineIcon2["umbrella"] = "RiUmbrellaLine";
  LineIcon2["uninstall"] = "RiUninstallLine";
  LineIcon2["unsplash"] = "RiUnsplashLine";
  LineIcon2["upload"] = "RiUploadLine";
  LineIcon2["upload2"] = "RiUpload2Line";
  LineIcon2["uploadCloud"] = "RiUploadCloudLine";
  LineIcon2["uploadCloud2"] = "RiUploadCloud2Line";
  LineIcon2["usb"] = "RiUsbLine";
  LineIcon2["user"] = "RiUserLine";
  LineIcon2["user2"] = "RiUser2Line";
  LineIcon2["user3"] = "RiUser3Line";
  LineIcon2["user4"] = "RiUser4Line";
  LineIcon2["user5"] = "RiUser5Line";
  LineIcon2["user6"] = "RiUser6Line";
  LineIcon2["userAdd"] = "RiUserAddLine";
  LineIcon2["userFollow"] = "RiUserFollowLine";
  LineIcon2["userHeart"] = "RiUserHeartLine";
  LineIcon2["userLocation"] = "RiUserLocationLine";
  LineIcon2["userReceived"] = "RiUserReceivedLine";
  LineIcon2["userReceived2"] = "RiUserReceived2Line";
  LineIcon2["userSearch"] = "RiUserSearchLine";
  LineIcon2["userSettings"] = "RiUserSettingsLine";
  LineIcon2["userShared"] = "RiUserSharedLine";
  LineIcon2["userShared2"] = "RiUserShared2Line";
  LineIcon2["userSmile"] = "RiUserSmileLine";
  LineIcon2["userStar"] = "RiUserStarLine";
  LineIcon2["userUnfollow"] = "RiUserUnfollowLine";
  LineIcon2["userVoice"] = "RiUserVoiceLine";
  LineIcon2["video"] = "RiVideoLine";
  LineIcon2["videoAdd"] = "RiVideoAddLine";
  LineIcon2["videoChat"] = "RiVideoChatLine";
  LineIcon2["videoDownload"] = "RiVideoDownloadLine";
  LineIcon2["videoUpload"] = "RiVideoUploadLine";
  LineIcon2["vidicon"] = "RiVidiconLine";
  LineIcon2["vidicon2"] = "RiVidicon2Line";
  LineIcon2["vimeo"] = "RiVimeoLine";
  LineIcon2["vip"] = "RiVipLine";
  LineIcon2["vipCrown"] = "RiVipCrownLine";
  LineIcon2["vipCrown2"] = "RiVipCrown2Line";
  LineIcon2["vipDiamond"] = "RiVipDiamondLine";
  LineIcon2["virus"] = "RiVirusLine";
  LineIcon2["visa"] = "RiVisaLine";
  LineIcon2["voiceRecognition"] = "RiVoiceRecognitionLine";
  LineIcon2["voiceprint"] = "RiVoiceprintLine";
  LineIcon2["volumeDown"] = "RiVolumeDownLine";
  LineIcon2["volumeMute"] = "RiVolumeMuteLine";
  LineIcon2["volumeOffVibrate"] = "RiVolumeOffVibrateLine";
  LineIcon2["volumeUp"] = "RiVolumeUpLine";
  LineIcon2["volumeVibrate"] = "RiVolumeVibrateLine";
  LineIcon2["vuejs"] = "RiVuejsLine";
  LineIcon2["walk"] = "RiWalkLine";
  LineIcon2["wallet"] = "RiWalletLine";
  LineIcon2["wallet2"] = "RiWallet2Line";
  LineIcon2["wallet3"] = "RiWallet3Line";
  LineIcon2["waterFlash"] = "RiWaterFlashLine";
  LineIcon2["webcam"] = "RiWebcamLine";
  LineIcon2["wechat"] = "RiWechatLine";
  LineIcon2["wechat2"] = "RiWechat2Line";
  LineIcon2["wechatPay"] = "RiWechatPayLine";
  LineIcon2["weibo"] = "RiWeiboLine";
  LineIcon2["whatsapp"] = "RiWhatsappLine";
  LineIcon2["wheelchair"] = "RiWheelchairLine";
  LineIcon2["wifi"] = "RiWifiLine";
  LineIcon2["wifiOff"] = "RiWifiOffLine";
  LineIcon2["window"] = "RiWindowLine";
  LineIcon2["window2"] = "RiWindow2Line";
  LineIcon2["windows"] = "RiWindowsLine";
  LineIcon2["windy"] = "RiWindyLine";
  LineIcon2["wirelessCharging"] = "RiWirelessChargingLine";
  LineIcon2["women"] = "RiWomenLine";
  LineIcon2["xbox"] = "RiXboxLine";
  LineIcon2["xing"] = "RiXingLine";
  LineIcon2["youtube"] = "RiYoutubeLine";
  LineIcon2["zcool"] = "RiZcoolLine";
  LineIcon2["zhihu"] = "RiZhihuLine";
  LineIcon2["zoomIn"] = "RiZoomInLine";
  LineIcon2["zoomOut"] = "RiZoomOutLine";
  LineIcon2["zzz"] = "RiZzzLine";
  return LineIcon2;
})(LineIcon || {});
var BASE_STYLE_SIZE = 4;
var STYLE_UNIT = "rem";
var DEFAULT_HUE = 174;
var DEFAULT_PALETTE = 2;
var DEFAULT_COLOR_MODE = "light";
var StaticColor = /* @__PURE__ */ ((StaticColor2) => {
  StaticColor2["black"] = "black";
  StaticColor2["white"] = "white";
  StaticColor2["neutralMax"] = "neutralMax";
  StaticColor2["neutralMin"] = "neutralMin";
  return StaticColor2;
})(StaticColor || {});
var AlphaColorName = /* @__PURE__ */ ((AlphaColorName2) => {
  AlphaColorName2["primaryA"] = "primaryA";
  AlphaColorName2["secondaryA"] = "secondaryA";
  AlphaColorName2["neutralA"] = "neutralA";
  AlphaColorName2["neutralMaxA"] = "neutralMaxA";
  AlphaColorName2["neutralMinA"] = "neutralMinA";
  return AlphaColorName2;
})(AlphaColorName || {});
var SemanticStaticColorName = /* @__PURE__ */ ((SemanticStaticColorName2) => {
  SemanticStaticColorName2["neutralMax"] = "neutralMax";
  SemanticStaticColorName2["neutralMin"] = "neutralMin";
  SemanticStaticColorName2["error"] = "error";
  SemanticStaticColorName2["errorMax"] = "errorMax";
  SemanticStaticColorName2["errorMin"] = "errorMin";
  SemanticStaticColorName2["errorForeground"] = "errorForeground";
  SemanticStaticColorName2["errorForegroundMax"] = "errorForegroundMax";
  SemanticStaticColorName2["info"] = "info";
  SemanticStaticColorName2["infoMax"] = "infoMax";
  SemanticStaticColorName2["infoMin"] = "infoMin";
  SemanticStaticColorName2["infoForeground"] = "infoForeground";
  SemanticStaticColorName2["infoForegroundMax"] = "infoForegroundMax";
  SemanticStaticColorName2["success"] = "success";
  SemanticStaticColorName2["successMax"] = "successMax";
  SemanticStaticColorName2["successMin"] = "successMin";
  SemanticStaticColorName2["successForeground"] = "successForeground";
  SemanticStaticColorName2["successForegroundMax"] = "successForegroundMax";
  SemanticStaticColorName2["warning"] = "warning";
  SemanticStaticColorName2["warningMax"] = "warningMax";
  SemanticStaticColorName2["warningMin"] = "warningMin";
  SemanticStaticColorName2["warningForeground"] = "warningForeground";
  SemanticStaticColorName2["warningForegroundMax"] = "warningForegroundMax";
  return SemanticStaticColorName2;
})(SemanticStaticColorName || {});
var SemanticColorName = /* @__PURE__ */ ((SemanticColorName2) => {
  SemanticColorName2["primary"] = "primary";
  SemanticColorName2["secondary"] = "secondary";
  SemanticColorName2["neutral"] = "neutral";
  return SemanticColorName2;
})(SemanticColorName || {});
var SemanticTextColorName = /* @__PURE__ */ ((SemanticTextColorName2) => {
  SemanticTextColorName2["primary"] = "textPrimary";
  SemanticTextColorName2["secondary"] = "textSecondary";
  SemanticTextColorName2["neutral"] = "textNeutral";
  return SemanticTextColorName2;
})(SemanticTextColorName || {});
var FlavorColorName = /* @__PURE__ */ ((FlavorColorName2) => {
  FlavorColorName2["tomato"] = "tomato";
  FlavorColorName2["amber"] = "amber";
  FlavorColorName2["grass"] = "grass";
  FlavorColorName2["forest"] = "forest";
  FlavorColorName2["aqua"] = "aqua";
  FlavorColorName2["indigo"] = "indigo";
  FlavorColorName2["plum"] = "plum";
  FlavorColorName2["magenta"] = "magenta";
  return FlavorColorName2;
})(FlavorColorName || {});
var FlavorTextColorName = /* @__PURE__ */ ((FlavorTextColorName2) => {
  FlavorTextColorName2["tomato"] = "textTomato";
  FlavorTextColorName2["amber"] = "textAmber";
  FlavorTextColorName2["grass"] = "textGrass";
  FlavorTextColorName2["forest"] = "textForest";
  FlavorTextColorName2["aqua"] = "textAqua";
  FlavorTextColorName2["indigo"] = "textIndigo";
  FlavorTextColorName2["plum"] = "textPlum";
  FlavorTextColorName2["magenta"] = "textMagenta";
  return FlavorTextColorName2;
})(FlavorTextColorName || {});
var StatusColorName = /* @__PURE__ */ ((StatusColorName2) => {
  StatusColorName2["error"] = "error";
  StatusColorName2["info"] = "info";
  StatusColorName2["success"] = "success";
  StatusColorName2["warning"] = "warning";
  return StatusColorName2;
})(StatusColorName || {});
var StatusTextColorName = /* @__PURE__ */ ((StatusTextColorName2) => {
  StatusTextColorName2["error"] = "textError";
  StatusTextColorName2["errorMax"] = "textErrorMax";
  StatusTextColorName2["errorMin"] = "textErrorMin";
  StatusTextColorName2["info"] = "textInfo";
  StatusTextColorName2["infoMax"] = "textInfoMax";
  StatusTextColorName2["infoMin"] = "textInfoMin";
  StatusTextColorName2["success"] = "textSuccess";
  StatusTextColorName2["successMax"] = "textSuccessMax";
  StatusTextColorName2["successMin"] = "textSuccessMin";
  StatusTextColorName2["warning"] = "textWarning";
  StatusTextColorName2["warningMax"] = "textWarningMax";
  StatusTextColorName2["warningMin"] = "textWarningMin";
  return StatusTextColorName2;
})(StatusTextColorName || {});
var FG_COLOR_INDEX = 8;
var DARK_ALPHA_COLOR_VALUES = [
  0.02,
  0.07,
  0.12,
  0.17,
  0.25,
  0.37,
  0.45,
  0.6,
  0.9,
  0.92,
  0.95,
  0.98
];
var LIGHT_ALPHA_COLOR_VALUES = [
  0.018,
  0.06,
  0.11,
  0.15,
  0.23,
  0.34,
  0.45,
  0.6,
  0.9,
  0.92,
  0.95,
  0.98
];
var ALPHA_COLOR_VALUES = [
  0.018,
  0.06,
  0.11,
  0.15,
  0.23,
  0.34,
  0.45,
  0.6,
  0.9,
  0.92,
  0.95,
  0.98
];
var NEUTRAL_ALPHA_COLOR_VALUES = {
  darkBg: {
    darkFg: [3e-3, 0.015, 0.04, 0.07, 0.11, 0.15, 0.21, 0.3, 0.53, 0.61, 0.725, 0.84],
    lightFg: [0.04, 0.065, 0.095, 0.145, 0.215, 0.285, 0.32, 0.35, 0.57, 0.66, 0.79, 0.945]
  },
  lightBg: {
    darkFg: [0.015, 0.032, 0.055, 0.08, 0.12, 0.16, 0.225, 0.315, 0.53, 0.61, 0.725, 0.84],
    lightFg: [0.015, 0.032, 0.055, 0.09, 0.123, 0.16, 0.21, 0.245, 0.49, 0.6, 0.74, 0.94]
  }
};
var NEUTRAL_DARK_LUMINANCE_VALUES = [
  75e-4,
  0.015,
  0.028,
  0.0425,
  0.055,
  0.07,
  0.085,
  0.105,
  0.285,
  0.4,
  0.6,
  0.9
];
var NEUTRAL_LIGHT_LUMINANCE_VALUES = [
  0.95,
  0.93,
  0.88,
  0.835,
  0.755,
  0.675,
  0.56,
  0.435,
  0.165,
  0.115,
  0.06,
  0.02
];
var DARK_LUMINANCE_VALUES = [
  0.015,
  0.025,
  0.044,
  0.063,
  0.085,
  0.105,
  0.125,
  0.155,
  0.3,
  0.475,
  0.6,
  0.885
];
var LIGHT_LUMINANCE_VALUES = [
  0.95,
  0.93,
  0.88,
  0.83,
  0.74,
  0.675,
  0.56,
  0.435,
  0.165,
  0.115,
  0.06,
  0.02
];
var DARK_STATUS_LUMINANCE_VALUES = [0.025, 0.3, 0.8];
var LIGHT_STATUS_LUMINANCE_VALUES = [0.85, 0.14, 0.04];
var DARK_STATUS_INVERTED_LUMINANCE_VALUES = [0.03, 0.5, 0.9];
var LIGHT_STATUS_INVERTED_LUMINANCE_VALUES = [0.85, 0.5, 0.06];
var DARK_STATUS_TEXT_LUMINANCE = 0.35;
var DARK_STATUS_TEXT_MAX_LUMINANCE = 0.45;
var LIGHT_STATUS_TEXT_LUMINANCE = 0.125;
var LIGHT_STATUS_TEXT_MAX_LUMINANCE = 0.095;
var STATUS_COLOR_POINTERS = {
  0: "Min",
  1: "",
  2: "Max"
};
var DARK_STATUS_INFO_COLOR_POINTERS = {
  0: 4,
  1: 10,
  2: 12
};
var LIGHT_STATUS_INFO_COLOR_POINTERS = {
  0: 4,
  1: 9,
  2: 12
};
var STATUS_TEXT_COLOR_TARGETS = {
  0: "Max",
  1: null,
  2: "Min"
};
var DARK_INFO_STATUS_TEXT_COLOR_TARGETS = {
  0: 12,
  1: "Min",
  2: 2
};
var LIGHT_INFO_STATUS_TEXT_COLOR_TARGETS = {
  0: 12,
  1: "Max",
  2: 4
};
var TEXT_COLOR_TARGETS = {
  1: 10,
  2: 11,
  3: 11,
  4: 12,
  5: 12,
  6: 12,
  7: 12,
  8: 12,
  9: null,
  10: null,
  11: 3,
  12: 5
};
var DARK_CHROMA_OPTIONS = {
  mainBgLum: 0.875,
  altBgLum: 0.125,
  mainFgLum: 0.5,
  altFgLum: 0.5,
  primarySat: 1,
  secondarySat: 0.9,
  neutralSat: 0.04
};
var LIGHT_CHROMA_OPTIONS = {
  mainBgLum: 0.125,
  altBgLum: 0.875,
  mainFgLum: 0.5,
  altFgLum: 0.5,
  primarySat: 1,
  secondarySat: 0.85,
  neutralSat: 0.04
};
var NORMALIZATION_FACTOR = {
  0: 1.45,
  1: 1.05,
  2: 0.5,
  3: 0.35,
  4: 0.35,
  5: 0.7,
  6: 0.8,
  7: 1,
  8: 1.25,
  9: 1.75,
  10: 1.85,
  11: 2.25,
  12: 2.5,
  13: 2.25,
  14: 2,
  15: 1.85,
  16: 1.3,
  17: 1.3,
  18: 1.15,
  19: 1.15,
  20: 1.15,
  21: 1,
  22: 1,
  23: 0.85,
  24: 0.85,
  25: 0.85,
  26: 0.9,
  27: 1,
  28: 1.55,
  29: 2.15,
  30: 2.5,
  31: 2.25,
  32: 1.85,
  33: 1.4,
  34: 1.45,
  35: 1.45,
  36: 1.45
};
var DEFAULT_SOURCE_COLORS = {
  info: `hsl(${DEFAULT_HUE} 0.4% 50%)`,
  success: "hsl(123 90% 50%)",
  warning: "hsl(33 100% 50%)",
  error: "hsl(350 75% 50%)",
  tomato: "hsl(8, 90%, 50%)",
  amber: "hsl(45, 100%, 50%)",
  grass: "hsl(77, 100%, 50%)",
  forest: "hsl(138, 90%, 50%)",
  aqua: "hsl(193, 90%, 50%)",
  indigo: "hsl(222, 90%, 50%)",
  plum: "hsl(267, 90%, 50%)",
  magenta: "hsl(313, 80%, 50%)"
};
var BG_COLOR_KEYS = [
  ...enumValues(SemanticStaticColorName),
  ...enumValues(SemanticColorName),
  ...enumValues(FlavorColorName),
  ...enumValues(StatusColorName)
];
var STATUS_COLOR_KEYS = enumValues(SemanticStaticColorName).filter((name) => !name.includes("neutral"));
var STATUS_TEXT_COLOR_KEYS = enumValues(StatusTextColorName);
var FULL_STATUS_COLOR_KEYS = [...STATUS_COLOR_KEYS, ...STATUS_TEXT_COLOR_KEYS];
var TEXT_COLOR_KEYS = [
  ...enumValues(SemanticStaticColorName),
  ...enumValues(SemanticColorName),
  ...enumValues(StatusColorName),
  ...enumValues(SemanticTextColorName),
  ...enumValues(FlavorColorName),
  ...enumValues(FlavorTextColorName),
  ...STATUS_TEXT_COLOR_KEYS
];
var COLOR_KEYS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
var DELAYS = {
  notificationReveal: 500
};
var THEME_PRIMITIVE_PROPS = ["className", "selector", "toString"];
var THEME_FULL_PROPS = [
  "className",
  "selector",
  "toString",
  "borderStyles",
  "borderWidths",
  "colors",
  "fontSizes",
  "fontWeights",
  "fonts",
  "letterSpacings",
  "lineHeights",
  "radii",
  "shadows",
  "sizes",
  "space",
  "transitions",
  "zIndices"
];
var THEME_STYLE_PROPS = [
  "borderStyles",
  "borderWidths",
  "colors",
  "fontSizes",
  "fontWeights",
  "fonts",
  "letterSpacings",
  "lineHeights",
  "radii",
  "shadows",
  "sizes",
  "space",
  "transitions",
  "zIndices"
];
var SemanticSize = /* @__PURE__ */ ((SemanticSize2) => {
  SemanticSize2["auto"] = "auto";
  SemanticSize2["px"] = "px";
  SemanticSize2["rem"] = "rem";
  SemanticSize2["base"] = "base";
  SemanticSize2["none"] = "none";
  SemanticSize2["quarter"] = "quarter";
  SemanticSize2["third"] = "third";
  SemanticSize2["half"] = "half";
  SemanticSize2["twoThirds"] = "twoThirds";
  SemanticSize2["threeQuarters"] = "threeQuarters";
  SemanticSize2["full"] = "full";
  SemanticSize2["fullVh"] = "fullVh";
  SemanticSize2["fullVw"] = "fullVw";
  return SemanticSize2;
})(SemanticSize || {});
var breakpoints = {
  bp1: 640,
  bp2: 760,
  bp3: 880,
  bp4: 1020,
  bp5: 1200,
  bp6: 1440
};
var BREAKPOINT_KEYS = Object.keys(breakpoints);
var RADIUS_KEYS = ["px", "base", "none", "round", "pill", "field", "button"];
var SystemFontFamily = /* @__PURE__ */ ((SystemFontFamily2) => {
  SystemFontFamily2["sansSerif"] = `-apple-system,BlinkMacSystemFont,
  "Segoe UI",
  Roboto,
  Oxygen-Sans,Ubuntu,Cantarell,
  "Helvetica Neue",Helvetica,Arial,sans-serif,
  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"`;
  SystemFontFamily2["serif"] = `Iowan Old Style,Apple Garamond,
  Baskerville,Source Serif Pro,Droid Serif,
  Times New Roman,Times,serif,
  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"`;
  SystemFontFamily2["monospace"] = `SFMono-Regular,Menlo,Monaco,
  Consolas,"Liberation Mono",
  "Courier New",monospace,
  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"`;
  return SystemFontFamily2;
})(SystemFontFamily || {});
var BodyFontFamily = /* @__PURE__ */ ((BodyFontFamily2) => {
  BodyFontFamily2["openSans"] = "Open Sans";
  BodyFontFamily2["firaSans"] = "Fira Sans";
  BodyFontFamily2["workSans"] = "Work Sans";
  BodyFontFamily2["sourceSansPro"] = "Source Sans Pro";
  BodyFontFamily2["rubik"] = "Rubik";
  BodyFontFamily2["raleway"] = "Raleway";
  BodyFontFamily2["lato"] = "Lato";
  BodyFontFamily2["mulish"] = "Mulish";
  BodyFontFamily2["inter"] = "Inter";
  BodyFontFamily2["hind"] = "Hind";
  BodyFontFamily2["bitter"] = "Bitter";
  BodyFontFamily2["sourceSerifPro"] = "Source Serif Pro";
  BodyFontFamily2["merriweather"] = "Merriweather";
  BodyFontFamily2["alegreya"] = "Alegreya";
  return BodyFontFamily2;
})(BodyFontFamily || {});
var HeadingFontFamily = /* @__PURE__ */ ((HeadingFontFamily2) => {
  HeadingFontFamily2["libreBaskerville"] = "Libre Baskerville";
  HeadingFontFamily2["vollkorn"] = "Vollkorn";
  HeadingFontFamily2["ptSerif"] = "PT Serif";
  HeadingFontFamily2["lora"] = "Lora";
  HeadingFontFamily2["arvo"] = "Arvo";
  HeadingFontFamily2["cormorantInfant"] = "Cormorant Infant";
  HeadingFontFamily2["playfairDisplay"] = "Playfair Display";
  HeadingFontFamily2["montserrat"] = "Montserrat";
  HeadingFontFamily2["firaSans"] = "Fira Sans";
  HeadingFontFamily2["sourceSansPro"] = "Source Sans Pro";
  HeadingFontFamily2["lato"] = "Lato";
  HeadingFontFamily2["rubik"] = "Rubik";
  HeadingFontFamily2["raleway"] = "Raleway";
  HeadingFontFamily2["firaCode"] = "Fira Code";
  HeadingFontFamily2["inconsolata"] = "Inconsolata";
  return HeadingFontFamily2;
})(HeadingFontFamily || {});
var CodeFontFamily = /* @__PURE__ */ ((CodeFontFamily2) => {
  CodeFontFamily2["firaCode"] = "Fira Code";
  CodeFontFamily2["inconsolata"] = "Inconsolata";
  return CodeFontFamily2;
})(CodeFontFamily || {});
var bodyFonts = {
  openSans: {
    source: "google",
    family: "Open Sans",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [300, 400, 600, 800],
    italicWeights: [300, 400, 600, 800]
  },
  firaSans: {
    source: "google",
    family: "Fira Sans",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [300, 400, 600, 800],
    italicWeights: [300, 400, 600, 800]
  },
  workSans: {
    source: "google",
    family: "Work Sans",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [300, 400, 600, 800],
    italicWeights: [300, 400, 600, 800]
  },
  sourceSansPro: {
    source: "google",
    family: "Source Sans Pro",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [300, 400, 600, 900],
    italicWeights: [300, 400, 600, 900]
  },
  rubik: {
    source: "google",
    family: "Rubik",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [300, 400, 600, 800],
    italicWeights: [300, 400, 600, 800]
  },
  raleway: {
    source: "google",
    family: "Raleway",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [300, 400, 600, 800],
    italicWeights: [300, 400, 600, 800]
  },
  lato: {
    source: "google",
    family: "Lato",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [300, 400, 700, 900],
    italicWeights: [300, 400, 700, 900]
  },
  mulish: {
    source: "google",
    family: "Mulish",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [300, 400, 600, 800],
    italicWeights: [300, 400, 600, 800]
  },
  inter: {
    source: "google",
    family: "Inter",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [300, 400, 600, 800],
    italicWeights: [300, 400, 600, 800]
  },
  bitter: {
    source: "google",
    family: "Bitter",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [300, 400, 600, 800],
    italicWeights: [300, 400, 600, 800]
  },
  sourceSerifPro: {
    source: "google",
    family: "Source Serif Pro",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [300, 400, 600, 700],
    italicWeights: [300, 400, 600, 700]
  },
  merriweather: {
    source: "google",
    family: "Merriweather",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [300, 400, 700, 900],
    italicWeights: [300, 400, 700, 900]
  },
  alegreya: {
    source: "google",
    family: "Alegreya",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [400, 500, 700, 800],
    italicWeights: [400, 500, 700, 800]
  },
  hind: {
    source: "google",
    family: "Hind",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [300, 400, 600, 700],
    italicWeights: [300, 400, 600, 700]
  }
};
var headingFonts = {
  libreBaskerville: {
    source: "google",
    family: "Libre Baskerville",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [400, 700],
    italicWeights: [400]
  },
  vollkorn: {
    source: "google",
    family: "Vollkorn",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [400, 600, 700, 800],
    italicWeights: [400, 600, 700, 800]
  },
  ptSerif: {
    source: "google",
    family: "PT Serif",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [400, 700],
    italicWeights: [400, 700]
  },
  lora: {
    source: "google",
    family: "Lora",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [400, 500, 600, 700],
    italicWeights: [400, 500, 600, 700]
  },
  arvo: {
    source: "google",
    family: "Arvo",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [400, 700],
    italicWeights: [400, 700]
  },
  cormorantInfant: {
    source: "google",
    family: "Cormorant Infant",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [400, 500, 600, 700],
    italicWeights: [400, 500, 600, 700]
  },
  playfairDisplay: {
    source: "google",
    family: "Playfair Display",
    fallback: 'Iowan Old Style,Apple Garamond,\n  Baskerville,Source Serif Pro,Droid Serif,\n  Times New Roman,Times,serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSerif",
    weights: [400, 600, 700, 800],
    italicWeights: [400, 600, 700, 800]
  },
  montserrat: {
    source: "google",
    family: "Montserrat",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [400, 600, 700, 800],
    italicWeights: [400, 600, 700, 800]
  },
  firaSans: {
    source: "google",
    family: "Fira Sans",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [400, 600, 700, 800],
    italicWeights: [400, 600, 700, 800]
  },
  sourceSansPro: {
    source: "google",
    family: "Source Sans Pro",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [400, 600, 700, 900],
    italicWeights: [400, 600, 700, 900]
  },
  lato: {
    source: "google",
    family: "Lato",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [400, 700, 900],
    italicWeights: [400, 700, 900]
  },
  rubik: {
    source: "google",
    family: "Rubik",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [400, 600, 700, 800],
    italicWeights: [400, 600, 700, 800]
  },
  raleway: {
    source: "google",
    family: "Raleway",
    fallback: '-apple-system,BlinkMacSystemFont,\n  "Segoe UI",\n  Roboto,\n  Oxygen-Sans,Ubuntu,Cantarell,\n  "Helvetica Neue",Helvetica,Arial,sans-serif,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemSans",
    weights: [400, 600, 700, 800],
    italicWeights: [400, 600, 700, 800]
  },
  firaCode: {
    source: "google",
    family: "Fira Code",
    fallback: 'SFMono-Regular,Menlo,Monaco,\n  Consolas,"Liberation Mono",\n  "Courier New",monospace,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemMono",
    weights: [400, 500, 600, 700],
    italicWeights: [400, 500, 600, 700]
  },
  inconsolata: {
    source: "google",
    family: "Inconsolata",
    fallback: 'SFMono-Regular,Menlo,Monaco,\n  Consolas,"Liberation Mono",\n  "Courier New",monospace,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemMono",
    weights: [400, 600, 700, 800],
    italicWeights: [400, 600, 700, 800]
  }
};
var codeFonts = {
  firaCode: {
    source: "google",
    family: "Fira Code",
    fallback: 'SFMono-Regular,Menlo,Monaco,\n  Consolas,"Liberation Mono",\n  "Courier New",monospace,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemMono",
    weights: [300, 400, 600],
    italicWeights: [400]
  },
  inconsolata: {
    source: "google",
    family: "Inconsolata",
    fallback: 'SFMono-Regular,Menlo,Monaco,\n  Consolas,"Liberation Mono",\n  "Courier New",monospace,\n  "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol"',
    fallbackKey: "systemMono",
    weights: [300, 400, 600],
    italicWeights: [400]
  }
};
function getStylesString(styles) {
  return Object.entries(styles).reduce((output, [type, set]) => {
    if (set) {
      Object.entries(set).forEach(([prop, value]) => {
        output += `--${type}-${prop}: ${value.startsWith("$") ? `var(--${type}-${value.replace("$", "")})` : value};
`;
      });
    }
    return output;
  }, "");
}
function OverrideStyles({
  styles,
  theme: theme2 = ":root"
}) {
  if (!styles || Object.keys(styles).length === 0) {
    return /* @__PURE__ */ React4.createElement(React4.Fragment, null);
  }
  const processedStyles = getStylesString(styles);
  return /* @__PURE__ */ React4.createElement("style", null, `
      .${theme2} {
        ${processedStyles}
      }
    `);
}
OverrideStyles.displayName = "OverrideStyles";
function useLocalOverrides(theme2) {
  const themeName = !theme2 || theme2.length === 0 ? String(baseTheme) : theme2;
  const { getLocalOverrides, setLocalOverrides, clearLocalOverrides } = React4.useContext(UIContext);
  const overrides = getLocalOverrides(themeName);
  const setOverrides = React4.useCallback((styles) => {
    setLocalOverrides(themeName, styles);
  }, [themeName, setLocalOverrides]);
  const clearOverrides = React4.useCallback((themeProps) => {
    const props = typeof themeProps === "string" ? [themeProps] : themeProps;
    clearLocalOverrides(themeName, props);
  }, [themeName, clearLocalOverrides]);
  return {
    overrides,
    setOverrides,
    clearOverrides
  };
}
var ThemeContext = React4.createContext({
  isDark: DEFAULT_COLOR_MODE === "dark",
  ref: React4.createRef(),
  theme: baseTheme,
  darkTheme: baseDarkTheme
});
function UITheme({
  theme: theme2,
  darkTheme: darkTheme2 = baseDarkTheme,
  children,
  isRoot = false
}) {
  const { isDark = DEFAULT_COLOR_MODE === "dark" } = React4.useContext(UIContext);
  const { overrides } = useLocalOverrides(String(theme2));
  const { overrides: darkOverrides } = useLocalOverrides(String(darkTheme2));
  const ref = React4.useRef(null);
  const className = isDark ? String(darkTheme2) : String(theme2);
  return /* @__PURE__ */ React4.createElement(ThemeContext.Provider, {
    value: {
      isDark,
      ref,
      theme: theme2,
      darkTheme: darkTheme2
    }
  }, isRoot && /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(HelmetExport, null, overrides && /* @__PURE__ */ React4.createElement("style", null, `.${String(theme2)} { ${getStylesString(overrides)} }`), darkOverrides && /* @__PURE__ */ React4.createElement("style", null, `.${String(darkTheme2)} { ${getStylesString(darkOverrides)} }`)), children), !isRoot && /* @__PURE__ */ React4.createElement("section", {
    className,
    ref
  }, children, /* @__PURE__ */ React4.createElement(OverrideStyles, {
    theme: String(theme2),
    styles: overrides
  }), /* @__PURE__ */ React4.createElement(OverrideStyles, {
    theme: String(darkTheme2),
    styles: darkOverrides
  })));
}
var UIContext = React4.createContext({
  colorMode: DEFAULT_COLOR_MODE,
  isDark: DEFAULT_COLOR_MODE === "dark",
  setColorMode: () => void 0,
  toggleColorMode: () => void 0,
  localOverrides: {},
  getLocalOverrides: () => void 0,
  setLocalOverrides: () => void 0,
  clearLocalOverrides: () => void 0,
  locale: import_locale_enum.Locale.en_US,
  translations: {},
  isTouchDevice: false,
  constants: {}
});
function UIProvider(props) {
  const {
    children,
    defaultColorMode = DEFAULT_COLOR_MODE,
    theme: theme2 = baseTheme,
    darkTheme: darkTheme2 = baseDarkTheme,
    locale,
    isMobile = false,
    translations = {},
    constants = {}
  } = props;
  const [colorMode, setColorMode] = React4.useState(defaultColorMode);
  const [localOverrides, setOverridesState] = React4.useState({});
  const systemColorMode = useMediaQuery("(prefers-color-scheme: dark)", "dark", "light", defaultColorMode);
  const isTouchDevice = useMediaQuery("(hover: none)", isMobile);
  const systemColorTimer = React4.useRef();
  const { locale: systemLocale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  const activeLocale = locale || import_locale_enum.Locale[systemLocale.replace("-", "_")] || import_locale_enum.Locale.en_US;
  const mergedConstants = Object.assign({
    notificationRevealDelay: DELAYS.notificationReveal
  }, constants);
  const toggleColorMode = React4.useCallback(() => setColorMode((mode) => mode === "light" ? "dark" : "light"), []);
  const getLocalOverrides = React4.useCallback((theme22) => localOverrides[theme22], [localOverrides]);
  const setLocalOverrides = React4.useCallback((theme22, styles) => {
    setOverridesState((previous) => {
      const base = previous[theme22];
      const merged = mergeThemeValues([base, styles]);
      return __spreadProps(__spreadValues({}, previous), {
        [theme22]: merged
      });
    });
  }, []);
  const clearLocalOverrides = React4.useCallback((theme22, themeProps) => {
    if (!themeProps) {
      setOverridesState({});
    } else {
      setOverridesState((previous) => {
        const base = previous[theme22];
        const styles = themeProps.reduce((output, prop) => {
          output[prop] = null;
          return output;
        }, {});
        const merged = mergeThemeValues([base, styles]);
        return __spreadProps(__spreadValues({}, previous), {
          [theme22]: merged
        });
      });
    }
  }, []);
  React4.useEffect(() => {
    systemColorTimer.current = setTimeout(() => {
      setColorMode(systemColorMode);
    }, 250);
    return () => systemColorTimer.current && clearTimeout(systemColorTimer.current);
  }, [systemColorMode]);
  return /* @__PURE__ */ React4.createElement(UIContext.Provider, {
    value: {
      colorMode,
      isDark: colorMode === "dark",
      setColorMode,
      toggleColorMode,
      localOverrides,
      getLocalOverrides,
      setLocalOverrides,
      clearLocalOverrides,
      locale: activeLocale,
      translations,
      isTouchDevice,
      constants: mergedConstants
    }
  }, /* @__PURE__ */ React4.createElement($9d939cbc98267846$export$9f8ac96af4b1b2ae, null, /* @__PURE__ */ React4.createElement($18f2051aff69b9bf$export$a54013f0d02a8f82, {
    locale: activeLocale
  }, /* @__PURE__ */ React4.createElement(UITheme, {
    theme: theme2,
    darkTheme: darkTheme2,
    isRoot: true
  }, children))));
}
function useColor(lightColor, darkColor) {
  const { isDark } = React4.useContext(UIContext);
  return isDark ? darkColor : lightColor;
}
function useColors() {
  const { colorMode, setColorMode, toggleColorMode, isDark } = React4.useContext(UIContext);
  const { activeTheme } = useTheme();
  return {
    colorMode,
    colors: activeTheme.colors,
    isDark,
    setColorMode,
    toggleColorMode
  };
}
function useTheme() {
  const { isDark, theme: theme2, darkTheme: darkTheme2, ref } = React4.useContext(ThemeContext);
  const completeDarkTheme = mergeThemes([baseTheme, baseDarkTheme, darkTheme2]);
  const completeTheme = mergeThemes([baseTheme, theme2]);
  const activeTheme = isDark ? completeDarkTheme : completeTheme;
  return {
    isDark,
    ref,
    activeTheme,
    theme: theme2 != null ? theme2 : baseTheme,
    darkTheme: darkTheme2 != null ? darkTheme2 : baseDarkTheme,
    completeTheme,
    completeDarkTheme
  };
}
function useMediaQuery(query, trueValue, falseValue, defaultValue = false) {
  const trueOutput = trueValue != null ? trueValue : true;
  const falseOutput = falseValue != null ? falseValue : false;
  const [matches, setMatches] = React4.useState(defaultValue);
  React4.useEffect(() => {
    if (!isSSR) {
      const media = window.matchMedia(query);
      setMatches(media.matches);
      const listener = () => {
        setMatches(media.matches);
      };
      media.addEventListener("change", listener);
      return () => media.removeEventListener("change", listener);
    }
    return;
  }, [query]);
  return matches ? trueOutput : falseOutput;
}
function useBorderStyles(theme2, darkTheme2) {
  const { completeTheme, completeDarkTheme } = useTheme();
  const sourceTheme = mergeThemes([completeTheme, theme2]);
  const sourceDarkTheme = mergeThemes([completeDarkTheme, darkTheme2]);
  const { setOverrides, clearOverrides } = useLocalOverrides(String(sourceTheme));
  const { setOverrides: setDarkOverrides, clearOverrides: clearDarkOverrides } = useLocalOverrides(String(sourceDarkTheme));
  const [borderWidth, setBorderWidthState] = React4.useState(completeTheme.borderWidths.base.value);
  const setBorderWidth = React4.useCallback((value) => {
    const newValue = typeof value === "string" ? value : `${value}${STYLE_UNIT}`;
    const borderWidths = Object.entries(sourceTheme.borderWidths).reduce((output, [key, token]) => {
      output[key] = key === "base" ? newValue : token.value;
      return output;
    }, {});
    setBorderWidthState(newValue);
    setTimeout(() => {
      setOverrides({ borderWidths });
      setDarkOverrides({ borderWidths });
    });
  }, [sourceTheme, setOverrides, setDarkOverrides]);
  const resetBorderWidth = React4.useCallback(() => {
    setBorderWidthState(completeTheme.borderWidths.base.value);
    setTimeout(() => {
      clearOverrides("borderWidths");
      clearDarkOverrides("borderWidths");
    });
  }, [sourceTheme, clearOverrides, clearDarkOverrides]);
  return {
    borderWidth,
    setBorderWidth,
    resetBorderWidth
  };
}
function getColorsFromTheme(theme2) {
  const colorKeys = enumKeys(SemanticColorName);
  return colorKeys.reduce((output, key) => {
    output[key] = theme2.colors[`${key}9`].value;
    return output;
  }, {});
}
function useColorStyles(theme2, darkTheme2, syncModes = true) {
  const { isDark, colorMode } = useColors();
  const { completeTheme, completeDarkTheme } = useTheme();
  const sourceTheme = mergeThemes([completeTheme, theme2]);
  const sourceDarkTheme = mergeThemes([completeDarkTheme, darkTheme2]);
  const { setOverrides: setLightOverrides, clearOverrides: clearLightOverrides } = useLocalOverrides(String(sourceTheme));
  const { setOverrides: setDarkOverrides, clearOverrides: clearDarkOverrides } = useLocalOverrides(String(sourceDarkTheme));
  const setOverrides = React4.useCallback((lightPalette2, darkPalette2) => {
    if (syncModes) {
      setLightOverrides({ colors: lightPalette2 });
      setDarkOverrides({ colors: darkPalette2 || lightPalette2 });
    } else if (isDark) {
      setDarkOverrides({ colors: darkPalette2 || lightPalette2 });
    } else {
      setLightOverrides({ colors: lightPalette2 });
    }
  }, [isDark, syncModes, setLightOverrides, setDarkOverrides]);
  const clearOverrides = React4.useCallback(() => {
    if (syncModes) {
      clearLightOverrides("colors");
      clearDarkOverrides("colors");
    } else if (isDark) {
      clearDarkOverrides("colors");
    } else {
      clearLightOverrides("colors");
    }
  }, [isDark, syncModes, clearLightOverrides, clearDarkOverrides]);
  const [colorsLight, setColorsLight] = React4.useState(getColorsFromTheme(completeTheme));
  const [colorsDark, setColorsDark] = React4.useState(getColorsFromTheme(completeDarkTheme));
  const setColors = React4.useCallback((colors2, colorsDark2) => {
    if (syncModes) {
      setColorsLight(colors2);
      setColorsDark(colorsDark2 || colors2);
    } else if (isDark) {
      setColorsDark(colorsDark2 || colors2);
    } else {
      setColorsLight(colors2);
    }
  }, [isDark, syncModes, setColorsLight, setColorsDark]);
  const setColorsByPalette = React4.useCallback((lightPalette2, darkPalette2) => {
    const lightColors = generateThemeColors(lightPalette2, "light");
    const darkColors = generateThemeColors(darkPalette2, "dark");
    setColors(lightPalette2, darkPalette2);
    setTimeout(() => setOverrides(lightColors, darkColors));
  }, [isDark, colorMode, setOverrides]);
  const setColorsByHue = React4.useCallback((hue, saturation = 0.875, paletteNumber = DEFAULT_PALETTE) => {
    const lightPalette2 = generatePaletteFromHue(hue, paletteNumber, saturation, "light");
    const darkPalette2 = generatePaletteFromHue(hue, paletteNumber, 1, "dark");
    setColorsByPalette(lightPalette2, darkPalette2);
  }, [setColorsByPalette]);
  const resetColors = React4.useCallback(() => {
    setColors(getColorsFromTheme(completeTheme), getColorsFromTheme(completeDarkTheme));
    clearOverrides();
  }, [isDark, completeTheme, completeDarkTheme, clearOverrides]);
  return {
    colors: isDark ? colorsDark : colorsLight,
    setColorsByHue,
    setColorsByPalette,
    resetColors
  };
}
function useFontStyles(theme2, darkTheme2) {
  const { completeTheme, completeDarkTheme } = useTheme();
  const sourceTheme = mergeThemes([completeTheme, theme2]);
  const sourceDarkTheme = mergeThemes([completeDarkTheme, darkTheme2]);
  const { setOverrides, clearOverrides } = useLocalOverrides(String(sourceTheme));
  const { setOverrides: setDarkOverrides, clearOverrides: clearDarkOverrides } = useLocalOverrides(String(sourceDarkTheme));
  const getThemeFonts2 = (thm) => FONT_PROPS.reduce((output, fontProp) => {
    output[fontProp] = getThemeValue(thm, thm.fonts[fontProp].value);
    return output;
  }, {});
  const [fonts2, setFontsState] = React4.useState(getThemeFonts2(sourceTheme));
  const setFonts = React4.useCallback((newFonts) => {
    setFontsState(newFonts);
    setTimeout(() => {
      setOverrides({ fonts: newFonts });
      setDarkOverrides({ fonts: newFonts });
    });
  }, [setOverrides]);
  const setFontFamily = React4.useCallback((family, font) => {
    setFontsState((previous) => {
      const newFonts = __spreadProps(__spreadValues({}, previous), {
        [family]: font
      });
      setTimeout(() => {
        setOverrides({ fonts: newFonts });
        setDarkOverrides({ fonts: newFonts });
      });
      return newFonts;
    });
  }, [setOverrides, setDarkOverrides]);
  const resetFonts = React4.useCallback(() => {
    setFontsState(getThemeFonts2(sourceTheme));
    clearOverrides("fonts");
    clearDarkOverrides("fonts");
  }, [clearOverrides, clearDarkOverrides, sourceTheme]);
  const [fontSize, setFontSizeState] = React4.useState(sourceTheme.fontSizes.base.value);
  const setFontSize = React4.useCallback((value) => {
    const newValue = typeof value === "string" ? value : `${value}${STYLE_UNIT}`;
    const fontSizes = Object.entries(sourceTheme.fontSizes).reduce((output, [key, token]) => {
      output[key] = key === "base" ? newValue : token.value;
      return output;
    }, {});
    setFontSizeState(newValue);
    setTimeout(() => {
      setOverrides({ fontSizes });
      setDarkOverrides({ fontSizes });
    });
  }, [setOverrides, setDarkOverrides, sourceTheme]);
  const resetFontSize = React4.useCallback(() => {
    setFontSizeState(sourceTheme.fontSizes.base.value);
    setTimeout(() => {
      clearOverrides("fontSizes");
      clearDarkOverrides("fontSizes");
    });
  }, [sourceTheme, clearOverrides, clearDarkOverrides]);
  return {
    fonts: fonts2,
    setFonts,
    setFontFamily,
    resetFonts,
    fontSize,
    setFontSize,
    resetFontSize
  };
}
function useTextStyles(theme2, darkTheme2) {
  const { completeTheme, completeDarkTheme } = useTheme();
  const sourceTheme = mergeThemes([completeTheme, theme2]);
  const sourceDarkTheme = mergeThemes([completeDarkTheme, darkTheme2]);
  const { setOverrides, clearOverrides } = useLocalOverrides(String(sourceTheme));
  const { setOverrides: setDarkOverrides, clearOverrides: clearDarkOverrides } = useLocalOverrides(String(sourceDarkTheme));
  const [lineHeight, setLineHeightState] = React4.useState(completeTheme.lineHeights.base.value);
  const setLineHeight = React4.useCallback((value) => {
    const newValue = String(value);
    const lineHeights = Object.entries(sourceTheme.lineHeights).reduce((output, [key, token]) => {
      output[key] = key === "base" ? newValue : token.value;
      return output;
    }, {});
    setLineHeightState(newValue);
    setTimeout(() => {
      setOverrides({ lineHeights });
      setDarkOverrides({ lineHeights });
    });
  }, [sourceTheme, setOverrides, setDarkOverrides]);
  const resetLineHeight = React4.useCallback(() => {
    setLineHeightState(completeTheme.lineHeights.base.value);
    setTimeout(() => {
      clearOverrides("lineHeights");
      clearDarkOverrides("lineHeights");
    });
  }, [sourceTheme, clearOverrides, clearDarkOverrides]);
  return {
    lineHeight,
    setLineHeight,
    resetLineHeight
  };
}
function useRadiusStyles(theme2, darkTheme2) {
  const { completeTheme, completeDarkTheme } = useTheme();
  const sourceTheme = mergeThemes([completeTheme, theme2]);
  const sourceDarkTheme = mergeThemes([completeDarkTheme, darkTheme2]);
  const { setOverrides, clearOverrides } = useLocalOverrides(String(sourceTheme));
  const { setOverrides: setDarkOverrides, clearOverrides: clearDarkOverrides } = useLocalOverrides(String(sourceDarkTheme));
  const [radius, setRadiusState] = React4.useState(completeTheme.radii.base.value);
  const setRadius = React4.useCallback((value) => {
    const newValue = typeof value === "string" ? value : `${value}${STYLE_UNIT}`;
    const radii = Object.entries(sourceTheme.radii).reduce((output, [key, token]) => {
      output[key] = key === "base" ? newValue : token.value;
      return output;
    }, {});
    setRadiusState(newValue);
    setTimeout(() => {
      setOverrides({ radii });
      setDarkOverrides({ radii });
    });
  }, [sourceTheme, setOverrides, setDarkOverrides]);
  const resetRadius = React4.useCallback(() => {
    setRadiusState(completeTheme.radii.base.value);
    setTimeout(() => {
      clearOverrides("radii");
      clearDarkOverrides("radii");
    });
  }, [sourceTheme, clearOverrides, clearDarkOverrides]);
  return {
    radius,
    setRadius,
    resetRadius
  };
}
function useSpacingStyles(theme2, darkTheme2) {
  const { completeTheme, completeDarkTheme } = useTheme();
  const sourceTheme = mergeThemes([completeTheme, theme2]);
  const sourceDarkTheme = mergeThemes([completeDarkTheme, darkTheme2]);
  const { setOverrides, clearOverrides } = useLocalOverrides(String(sourceTheme));
  const { setOverrides: setDarkOverrides, clearOverrides: clearDarkOverrides } = useLocalOverrides(String(sourceDarkTheme));
  const [spacing, setSpacingState] = React4.useState(completeTheme.space.base.value);
  const setSpacing = React4.useCallback((value) => {
    const newValue = typeof value === "string" ? value : `${value}${STYLE_UNIT}`;
    const space = Object.entries(sourceTheme.space).reduce((output, [key, token]) => {
      output[key] = key === "base" ? newValue : token.value;
      return output;
    }, {});
    setSpacingState(newValue);
    setTimeout(() => {
      setOverrides({ space });
      setDarkOverrides({ space });
    });
  }, [sourceTheme, setOverrides, setDarkOverrides]);
  const resetSpacing = React4.useCallback(() => {
    setSpacingState(completeTheme.space.base.value);
    setTimeout(() => {
      clearOverrides("space");
      clearDarkOverrides("space");
    });
  }, [sourceTheme, clearOverrides, clearDarkOverrides]);
  return {
    spacing,
    setSpacing,
    resetSpacing
  };
}
function useTooltip({
  isTargetActive = false,
  hasTooltip,
  delay,
  description,
  direction = "top",
  alignment = "center",
  showOnTouch = false
}) {
  const {
    isTouchDevice,
    translations: { tooltipLongPressDescription, tooltipPressDescription },
    constants: { notificationRevealDelay }
  } = React4.useContext(UIContext);
  const isPressable = showOnTouch && isTouchDevice;
  const [isPressed, setIsPressed] = React4.useState(false);
  const [isEnabled, setIsEnabled] = React4.useState(false);
  const [isOpen, setIsOpen] = React4.useState(false);
  const translated = isPressable ? tooltipPressDescription : tooltipLongPressDescription;
  const debounce = React4.useRef();
  const revealDelay = delay != null ? delay : notificationRevealDelay;
  const { focusProps } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    onFocus: () => {
      if (!isTouchDevice) {
        setIsEnabled(true);
      }
    },
    onBlur: () => setIsEnabled(false)
  });
  const { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({
    onHoverStart: () => {
      if (!isTouchDevice) {
        setIsEnabled(true);
      }
    },
    onHoverEnd: () => setIsEnabled(false)
  });
  const accessibilityDescription = React4.useMemo(() => {
    const fallbackDescription = `${isPressable ? "Press" : "Long press"} on this control for additional information`;
    return !hasTooltip ? void 0 : description || translated || fallbackDescription;
  }, [hasTooltip, isPressable, description, translated]);
  const { longPressProps } = $8a26561d2877236e$export$c24ed0104d07eab9({
    accessibilityDescription,
    onLongPress: () => {
      setIsEnabled(true);
      setIsPressed(true);
    }
  });
  const { pressProps } = $f6c31cce2adf654f$export$45712eceda6fad21({
    onPress: () => {
      if (isPressable) {
        setIsPressed((currentlyPressed) => !currentlyPressed);
      }
    },
    onPressUp: () => {
      if (!isPressable) {
        setIsEnabled(false);
        setIsPressed(false);
      }
    }
  });
  React4.useEffect(() => {
    const newState = (isEnabled || isHovered || isPressed || isTargetActive) && hasTooltip;
    if (revealDelay <= 0 || !newState) {
      debounce.current && clearTimeout(debounce.current);
      setIsOpen(newState);
    } else {
      debounce.current = setTimeout(() => {
        setIsOpen((isEnabled || isHovered || isPressed || isTargetActive) && hasTooltip);
      }, revealDelay);
    }
    return () => {
      debounce.current && clearTimeout(debounce.current);
    };
  }, [isEnabled, isHovered, isPressed, isTargetActive, hasTooltip, revealDelay]);
  React4.useEffect(() => {
    setIsOpen(false);
  }, []);
  const { direction: dir } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  const isLTR = dir === "ltr";
  const alignRtl = { start: "end", center: "center", end: "start" };
  const horizontal = isLTR ? alignment : alignRtl[alignment];
  const layerProps = useLayer({
    isOpen,
    auto: true,
    containerOffset: 20,
    triggerOffset: 9,
    overflowContainer: false,
    placement: `${direction}-${horizontal}`,
    possiblePlacements: [
      "bottom-start",
      "bottom-end",
      "bottom-center",
      "top-start",
      "top-center",
      "top-end",
      "left-center",
      "right-center"
    ],
    onDisappear: (disappearType) => {
      if (disappearType === "full") {
        setIsEnabled(false);
        if (isPressable) {
          setIsPressed(false);
        }
      }
    },
    onOutsideClick: () => {
      setIsEnabled(false);
      if (isPressable) {
        setIsPressed(false);
      }
    }
  });
  React4.useEffect(() => {
    setIsPressed(false);
  }, [isPressable]);
  return {
    isOpen,
    isTouchDevice,
    triggerProps: $3ef42575df84b30b$export$9d1611c77c2fe928(focusProps, hoverProps, longPressProps, pressProps),
    triggerRef: layerProps.triggerProps.ref,
    layerProps
  };
}
function Html(_b) {
  var _c = _b, { children, className = "" } = _c, props = __objRest(_c, ["children", "className"]);
  const { activeTheme } = useTheme();
  const { locale, direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  className = `${className} ${String(activeTheme)}`;
  return /* @__PURE__ */ React4.createElement("html", __spreadProps(__spreadValues({
    lang: locale,
    dir: direction,
    id: "html"
  }, props), {
    className
  }), children);
}
Html.displayName = "Html";
function InteractionState({
  as,
  children,
  wrapperProps = {},
  focusWithin = false,
  forceTabIndex = false,
  onFocus = () => void 0,
  onBlur = () => void 0,
  onFocusChange = () => void 0,
  onHoverStart = () => void 0,
  onHoverEnd = () => void 0,
  onHoverChange = () => void 0
}) {
  const [isFocused, setisFocused] = React4.useState(false);
  const focusHandler = React4.useCallback((event) => {
    onFocus(event);
    setisFocused(true);
  }, [onFocus]);
  const blurHandler = React4.useCallback((event) => {
    onBlur(event);
    setisFocused(false);
  }, [onBlur]);
  const focusChangeHandler = React4.useCallback((isFocused2) => {
    onFocusChange(isFocused2);
    setisFocused(isFocused2);
  }, [onFocusChange]);
  const { focusProps: focusPropsBase } = $a1ea59d68270f0dd$export$f8168d8dd8fd66e6({
    onFocus: focusHandler,
    onBlur: blurHandler,
    onFocusChange: focusChangeHandler
  });
  const { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    onFocusWithin: focusHandler,
    onBlurWithin: blurHandler,
    onFocusWithinChange: focusChangeHandler
  });
  const { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({
    onHoverStart,
    onHoverEnd,
    onHoverChange
  });
  const focusProps = focusWithin ? focusWithinProps : focusPropsBase;
  if (forceTabIndex && focusProps.tabIndex === void 0) {
    focusProps.tabIndex = 1;
  }
  const Wrapper = as || "div";
  const child = children({
    isFocused,
    isHovered,
    focusProps,
    hoverProps
  });
  return as ? /* @__PURE__ */ React4.createElement(Wrapper, __spreadValues(__spreadValues(__spreadValues({}, wrapperProps), focusProps), hoverProps), child) : child;
}
InteractionState.displayName = "InteractionState";
function getSemantic(Comp, tag, improveTypography = false) {
  const Wrapper = (props, ref) => {
    const node = React4.cloneElement(/* @__PURE__ */ React4.createElement(Comp, null), __spreadValues({ as: tag, ref }, props));
    if (improveTypography && React4.isValidElement(node)) {
      return getSmartypantsComponent(node);
    }
    return node;
  };
  const suffix = tag ? `.${tag}` : "";
  return Object.assign({}, Comp, {
    render: Wrapper,
    displayName: `${Comp.displayName || "Styled"}${suffix}`
  });
}
function Themed({ children, mode = DEFAULT_COLOR_MODE }) {
  const { theme: theme2, darkTheme: darkTheme2 } = useTheme();
  const { isDark } = useColors();
  const dark = darkTheme2 ? darkTheme2 : theme2;
  const light = theme2;
  const inverted = isDark ? light : dark;
  const isInverted = mode === "inverted";
  const colorTheme = mode === "dark" ? dark : light;
  const className = isInverted ? inverted.className : colorTheme.className;
  return /* @__PURE__ */ React4.createElement("section", {
    className
  }, children);
}
Themed.displayName = "Themed";
var mergeThemes = (themes) => {
  if (themes.length === 0) {
    return {};
  }
  return themes.reduce((output, theme2) => {
    if (!theme2) {
      return output;
    }
    THEME_FULL_PROPS.forEach((prop) => {
      if (theme2[prop] !== void 0) {
        if (theme2[prop] === null) {
          delete output[prop];
        } else {
          output[prop] = THEME_PRIMITIVE_PROPS.includes(prop) ? theme2[prop] : Object.assign({}, output[prop], theme2[prop]);
        }
      }
    });
    return output;
  }, {});
};
var mergeThemeValues = (themes) => {
  if (themes.length === 0) {
    return {};
  }
  return themes.reduce((output, theme2) => {
    if (!theme2) {
      return output;
    }
    THEME_STYLE_PROPS.forEach((prop) => {
      if (theme2[prop] !== void 0) {
        if (theme2[prop] === null) {
          delete output[prop];
        } else {
          output[prop] = THEME_PRIMITIVE_PROPS.includes(prop) ? theme2[prop] : Object.assign({}, output[prop], theme2[prop]);
        }
      }
    });
    return output;
  }, {});
};
function getSemanticLayoutPrimitive(Comp) {
  const output = Comp;
  output.article = getSemantic(Comp, "article");
  output.aside = getSemantic(Comp, "aside");
  output.dialog = getSemantic(Comp, "dialog");
  output.div = getSemantic(Comp, "div");
  output.footer = getSemantic(Comp, "footer");
  output.header = getSemantic(Comp, "header");
  output.label = getSemantic(Comp, "label");
  output.main = getSemantic(Comp, "main");
  output.nav = getSemantic(Comp, "nav");
  output.section = getSemantic(Comp, "section");
  return output;
}
function getSemanticTextPrimitive(Comp) {
  const output = getSemantic(Comp, void 0, true);
  output.blockquote = getSemantic(Comp, "blockquote", true);
  output.code = getSemantic(Comp, "code", true);
  output.del = getSemantic(Comp, "del", true);
  output.em = getSemantic(Comp, "em", true);
  output.i = getSemantic(Comp, "i", true);
  output.ins = getSemantic(Comp, "ins", true);
  output.label = getSemantic(Comp, "label", true);
  output.p = getSemantic(Comp, "p", true);
  output.pre = getSemantic(Comp, "pre", true);
  output.small = getSemantic(Comp, "small", true);
  output.span = getSemantic(Comp, "span", true);
  output.strong = getSemantic(Comp, "strong", true);
  output.time = getSemantic(Comp, "time", true);
  return output;
}
function getSemanticHeadingPrimitive(Comp) {
  const output = getSemantic(Comp, void 0, true);
  output.h1 = getSemantic(Comp, "h1", true);
  output.h2 = getSemantic(Comp, "h2", true);
  output.h3 = getSemantic(Comp, "h3", true);
  output.h4 = getSemantic(Comp, "h4", true);
  output.h5 = getSemantic(Comp, "h5", true);
  output.h6 = getSemantic(Comp, "h6", true);
  return output;
}
function swapVariantValues(variant, searchValue, replaceValue) {
  if (typeof variant === "string" && variant === searchValue) {
    return replaceValue;
  } else if (typeof variant !== "object") {
    return variant;
  }
  return Object.keys(variant).reduce((output, key) => {
    if (variant[key] === searchValue)
      output[key] = replaceValue;
    return output;
  }, {});
}
var getChromaObject = (color) => {
  if (typeof color === "string" && color.includes("hsl(")) {
    const div = color.includes(",") ? "," : " ";
    const stringValues = color.replace("hsl(", "").replace(")", "").split(div);
    const values = [
      parseFloat(stringValues[0]),
      parseFloat(stringValues[1]) / 100,
      parseFloat(stringValues[2]) / 100
    ];
    return import_chroma_js.default.hsl(...values);
  }
  return (0, import_chroma_js.default)(color);
};
var generateCssColors = (scale, color, method, isStatic = false, isDark = false, isHighContrastNeutral = false) => {
  const src = getChromaObject(color);
  const saturation = Math.round((src.get("hsv.s") + Number.EPSILON) * 100) / 100;
  return scale.map((value, index) => {
    let adjustment = 1;
    if (!isStatic) {
      if (index < FG_COLOR_INDEX) {
        if (saturation > 0.5) {
          adjustment = isDark ? 0.75 : 0.6;
        } else {
          adjustment = isDark ? 0.875 : 0.75;
        }
      } else {
        adjustment += isDark ? 0.5 : 0;
      }
    } else if (isDark && saturation > 0.15) {
      adjustment = (1 - saturation) * 0.65;
    }
    const adjusted = src.set("hsv.s", src.get("hsv.s") * adjustment).set("hsl.h", src.get("hsl.h"));
    const max = isDark ? 1 : 0;
    const highContrastValue = index > FG_COLOR_INDEX ? max : value;
    const actualValue = isHighContrastNeutral ? highContrastValue : value;
    const scaled = method === "alpha" ? adjusted.alpha(actualValue) : adjusted.luminance(actualValue);
    return scaled.css("hsl");
  });
};
var getColorRange = (color, luminanceValues, isStatic = false, isDark = false, isHighContrastNeutral = false) => generateCssColors(luminanceValues, color, "luminance", isStatic, isDark, isHighContrastNeutral);
var getAlphaColors = (color, isStatic = false, isDark = false, neutral, isHighContrastNeutral = false) => {
  const neutralScale = NEUTRAL_ALPHA_COLOR_VALUES[isDark ? "darkBg" : "lightBg"][`${neutral}Fg`];
  return generateCssColors(neutral ? neutralScale : ALPHA_COLOR_VALUES, color, "alpha", isStatic, isDark, neutral && isHighContrastNeutral);
};
var getAlphaColorAtIndex = (index, color, isDark = false, neutral) => {
  const neutralScale = NEUTRAL_ALPHA_COLOR_VALUES[isDark ? "darkBg" : "lightBg"][`${neutral}Fg`];
  const colorScale = isDark ? DARK_ALPHA_COLOR_VALUES : LIGHT_ALPHA_COLOR_VALUES;
  const isNeutral = !!neutral;
  const isAdjustable = !isNeutral && index < FG_COLOR_INDEX;
  const scale = isNeutral ? neutralScale : colorScale;
  const alpha = scale[index];
  const src = getChromaObject(color);
  const satHSV = src.set("hsv.s", isDark ? 0.7 : 0.875);
  const satHSL = isAdjustable ? satHSV.set("hsl.s", Math.min(1, satHSV.get("hsl.s") * 0.875)) : src;
  const saturated = satHSL;
  const normalized = isAdjustable ? saturated.set("hsi.i", saturated.get("hsi.i") * 1.25) : saturated;
  return normalized.alpha(alpha).css("hsl");
};
var getColorObject = (list, name) => list.reduce((output, value, index) => {
  output[`${name}${index + 1}`] = value;
  return output;
}, {});
var generateThemeColors = (inputColors, mode, isHighContrastNeutral = false) => {
  const isDark = mode === "dark";
  const max = inputColors.neutralMax || isDark ? "#fff" : "#000";
  const min = inputColors.neutralMin || isDark ? "#000" : "#fff";
  const colors2 = __spreadValues(__spreadProps(__spreadValues({
    black: "#000",
    white: "#fff",
    [StaticColor.neutralMax]: max
  }, getColorObject(getAlphaColors(max, true, isDark, isDark ? "light" : "dark"), AlphaColorName.neutralMaxA)), {
    [StaticColor.neutralMin]: min
  }), getColorObject(getAlphaColors(min, true, isDark, isDark ? "dark" : "light"), AlphaColorName.neutralMinA));
  const colorNames = [
    ...enumValues(SemanticColorName),
    ...enumValues(FlavorColorName),
    ...enumValues(StatusColorName)
  ];
  colorNames.forEach((name) => {
    const color = inputColors[name] || DEFAULT_SOURCE_COLORS[name];
    if (!color) {
      return;
    }
    const lowerName = name.toLowerCase();
    const isNeutral = lowerName.includes("neutral");
    const isInfo = lowerName.includes("info");
    const isStatus = !!StatusColorName[name];
    const isFlavor = !!FlavorColorName[name];
    if (isStatus) {
      const isAlt = name === "warning" || isDark && name === "info";
      const defaultTextColor = isDark || isAlt ? "$black" : "$white";
      const darkLum = isAlt ? DARK_STATUS_INVERTED_LUMINANCE_VALUES : DARK_STATUS_LUMINANCE_VALUES;
      const lightLum = isAlt ? LIGHT_STATUS_INVERTED_LUMINANCE_VALUES : LIGHT_STATUS_LUMINANCE_VALUES;
      const statusLuminanceValues = isDark ? darkLum : lightLum;
      const typo = getChromaObject(color);
      const fgColor = isDark ? typo.luminance(DARK_STATUS_TEXT_LUMINANCE) : typo.luminance(LIGHT_STATUS_TEXT_LUMINANCE);
      const fgColorMax = isDark ? typo.luminance(DARK_STATUS_TEXT_MAX_LUMINANCE) : typo.luminance(LIGHT_STATUS_TEXT_MAX_LUMINANCE);
      colors2[`${name}Foreground`] = fgColor.css("hsl");
      colors2[`${name}ForegroundMax`] = fgColorMax.css("hsl");
      getColorRange(color, statusLuminanceValues, true).forEach((colorValue, index) => {
        const pointer = STATUS_COLOR_POINTERS[index];
        const textPointer = STATUS_TEXT_COLOR_TARGETS[index];
        const infoTextPointer = isDark ? DARK_INFO_STATUS_TEXT_COLOR_TARGETS[index] : LIGHT_INFO_STATUS_TEXT_COLOR_TARGETS[index];
        const key = `${name}${pointer}`;
        const infoPointer = isDark ? DARK_STATUS_INFO_COLOR_POINTERS[index] : LIGHT_STATUS_INFO_COLOR_POINTERS[index];
        const textColor = isInfo ? `$neutral${infoTextPointer}` : `$${name}${textPointer}`;
        colors2[key] = isInfo ? `$neutral${infoPointer}` : colorValue;
        colors2[`text${capitalizeFirstLetter(key)}`] = textPointer ? textColor : defaultTextColor;
      });
    } else {
      const darkScale = isNeutral ? NEUTRAL_DARK_LUMINANCE_VALUES : DARK_LUMINANCE_VALUES;
      const lightScale = isNeutral ? NEUTRAL_LIGHT_LUMINANCE_VALUES : LIGHT_LUMINANCE_VALUES;
      const luminanceValues = isDark ? darkScale : lightScale;
      const neutralTextColor = "$neutralMin";
      getColorRange(color, luminanceValues, isNeutral, isDark, isNeutral && isHighContrastNeutral).forEach((colorValue, index, scale) => {
        const pointer = index + 1;
        const textPointer = TEXT_COLOR_TARGETS[pointer];
        const key = `${name}${pointer}`;
        const alphaValue = index < FG_COLOR_INDEX ? scale[FG_COLOR_INDEX] : colorValue;
        colors2[key] = colorValue;
        if (!isFlavor) {
          colors2[`${name}A${pointer}`] = getAlphaColorAtIndex(index, alphaValue, isDark, isDark ? "light" : "dark");
        }
        colors2[`text${capitalizeFirstLetter(key)}`] = textPointer ? `$${name}${textPointer}` : neutralTextColor;
      });
    }
  });
  return colors2;
};
var normalizeSaturation = (color, name, baseHue, forceHue) => {
  const isNeutral = name.toLowerCase().includes("neutral");
  if (!isNeutral) {
    const saturation = Math.round((color.get("hsv.s") + Number.EPSILON) * 100) / 100;
    const normalizedHue = Math.round(baseHue / 10);
    const factor = NORMALIZATION_FACTOR[normalizedHue] || 2;
    const correction = saturation / factor;
    return color.set("hsi.s", 0.55 + correction).set("hsl.h", forceHue);
  }
  return color.set("hsl.h", forceHue);
};
var getColor = (name, base, baseHue, shift, sat, lum) => {
  const output = base.set("hsl.h", (baseHue + shift) % 360).set("hsi.s", sat).luminance(lum);
  return normalizeSaturation(output, name, baseHue, (baseHue + shift) % 360).css("hsl");
};
var getColorPalettes = (color, options) => {
  const colors2 = [];
  const base = getChromaObject(color);
  const baseHue = base.get("hsl.h");
  const isTealish = 110 <= baseHue && baseHue <= 208;
  const isGreenish = 60 <= baseHue && baseHue < 110;
  const isYellowish = 35 <= baseHue && baseHue < 85;
  const isRedToned = 279 <= baseHue || baseHue < 16;
  const primaryColor = base.set("hsi.s", options.primarySat).luminance(options.mainFgLum);
  const primary = normalizeSaturation(primaryColor, SemanticColorName.primary, baseHue, baseHue).css("hsl");
  const tetradSecondary = getColor(SemanticColorName.secondary, base, baseHue, 180, options.secondarySat, options.mainFgLum);
  const tetradSecondaryVariant = getColor(SemanticColorName.secondary, base, baseHue, 90, options.secondarySat, options.mainFgLum);
  const triadSecondary = getColor(SemanticColorName.secondary, base, baseHue, 120, options.secondarySat, options.mainFgLum);
  const triadSecondaryVariant = getColor(SemanticColorName.secondary, base, baseHue, 240, options.secondarySat, options.mainFgLum);
  const splitSecondary = getColor(SemanticColorName.secondary, base, baseHue, 150, options.secondarySat, options.mainFgLum);
  const splitSecondaryVariant = getColor(SemanticColorName.secondary, base, baseHue, 210, options.secondarySat, options.mainFgLum);
  colors2.push({
    primary,
    secondary: isTealish ? triadSecondaryVariant : tetradSecondary,
    neutral: getColor(SemanticColorName.neutral, base, getChromaObject(isTealish ? triadSecondaryVariant : tetradSecondary).get("hsl.h"), 0, options.neutralSat, options.altBgLum)
  });
  colors2.push({
    primary,
    secondary: isGreenish || isRedToned ? triadSecondary : tetradSecondaryVariant,
    neutral: getColor(SemanticColorName.neutral, base, getChromaObject(isGreenish || isRedToned ? triadSecondary : tetradSecondaryVariant).get("hsl.h"), 0, options.neutralSat, options.altBgLum)
  });
  colors2.push({
    primary,
    secondary: isYellowish ? splitSecondaryVariant : isRedToned ? triadSecondaryVariant : splitSecondary,
    neutral: getColor(SemanticColorName.neutral, base, getChromaObject(isYellowish ? splitSecondaryVariant : isRedToned ? triadSecondaryVariant : splitSecondary).get("hsl.h"), 0, options.neutralSat, options.altBgLum)
  });
  return colors2;
};
var getComplementaryColors = (hue, saturation = 0.875, mode = "light") => {
  if (hue < 0 || hue > 360) {
    throw new Error("Parameter `hue` must be a number between 0 and 360");
  } else if (saturation < 0 || saturation > 1) {
    throw new Error("Parameter `saturation` must be a number between 0 and 1");
  }
  const color = `hsl(${hue}, ${saturation * 100}%, 50%)`;
  return mode === "dark" ? getColorPalettes(color, DARK_CHROMA_OPTIONS) : getColorPalettes(color, LIGHT_CHROMA_OPTIONS);
};
var generatePaletteFromHue = (hue, variant = 1, saturation = 0.875, mode = "light") => getComplementaryColors(hue, saturation, mode)[variant - 1];
var tags_to_skip = /<(\/?)(?:pre|code|kbd|script|math)[^>]*>/i;
var SmartyPants = (text = "", attr = "1") => {
  let do_quotes = 0;
  let do_backticks = 0;
  let do_dashes = 0;
  let do_ellipses = 0;
  let do_stupefy = 0;
  let convert_quot = 0;
  if (typeof attr === "number") {
    attr = attr.toString();
  } else {
    attr = attr.replace(/\s/g, "");
  }
  if (attr === "0") {
    return text;
  } else if (attr === "1") {
    do_quotes = 1;
    do_backticks = 1;
    do_dashes = 1;
    do_ellipses = 1;
  } else if (attr === "2") {
    do_quotes = 1;
    do_backticks = 1;
    do_dashes = 2;
    do_ellipses = 1;
  } else if (attr === "3") {
    do_quotes = 1;
    do_backticks = 1;
    do_dashes = 3;
    do_ellipses = 1;
  } else if (attr === "-1") {
    do_stupefy = 1;
  } else {
    for (let i2 = 0; i2 < attr.length; i2++) {
      const c2 = attr[i2];
      if (c2 === "q") {
        do_quotes = 1;
      }
      if (c2 === "b") {
        do_backticks = 1;
      }
      if (c2 === "B") {
        do_backticks = 2;
      }
      if (c2 === "d") {
        do_dashes = 1;
      }
      if (c2 === "D") {
        do_dashes = 2;
      }
      if (c2 === "i") {
        do_dashes = 3;
      }
      if (c2 === "e") {
        do_ellipses = 1;
      }
      if (c2 === "w") {
        convert_quot = 1;
      }
    }
  }
  const tokens = _tokenize(text);
  let result = "";
  let in_pre = 0;
  let prev_token_last_char = "";
  for (let i2 = 0; i2 < tokens.length; i2++) {
    const cur_token = tokens[i2];
    if (cur_token[0] === "tag") {
      result = result + cur_token[1];
      const matched = tags_to_skip.exec(cur_token[1]);
      if (matched) {
        if (matched[1] === "/") {
          in_pre = 0;
        } else {
          in_pre = 1;
        }
      }
    } else {
      let t2 = cur_token[1];
      const last_char = t2.substring(t2.length - 1, t2.length);
      if (!in_pre) {
        t2 = ProcessEscapes(t2);
        if (convert_quot) {
          t2 = t2.replace(/$quot;/g, '"');
        }
        if (do_dashes) {
          if (do_dashes === 1) {
            t2 = EducateDashes(t2);
          }
          if (do_dashes === 2) {
            t2 = EducateDashesOldSchool(t2);
          }
          if (do_dashes === 3) {
            t2 = EducateDashesOldSchoolInverted(t2);
          }
        }
        if (do_ellipses) {
          t2 = EducateEllipses(t2);
        }
        if (do_backticks) {
          t2 = EducateBackticks(t2);
          if (do_backticks === 2) {
            t2 = EducateSingleBackticks(t2);
          }
        }
        if (do_quotes) {
          if (t2 === "'") {
            if (/\S/.test(prev_token_last_char)) {
              t2 = "&#8217;";
            } else {
              t2 = "&#8216;";
            }
          } else if (t2 === '"') {
            if (/\S/.test(prev_token_last_char)) {
              t2 = "&#8221;";
            } else {
              t2 = "&#8220;";
            }
          } else {
            t2 = EducateQuotes(t2);
          }
        }
        if (do_stupefy) {
          t2 = StupefyEntities(t2);
        }
      }
      prev_token_last_char = last_char;
      result = result + t2;
    }
  }
  return result;
};
var EducateQuotes = (str) => {
  const punct_class = "[!\"#$%'()*+,-./:;<=>?@[\\]^_`{|}~]";
  str = str.replace(new RegExp(`^'(?=${punct_class}\\B)`), "&#8217;");
  str = str.replace(new RegExp(`^"(?=${punct_class}\\B)`), "&#8221;");
  str = str.replace(/"'(?=\w)/, "&#8220;&#8216;");
  str = str.replace(/'"(?=\w)/, "&#8216;&#8220;");
  str = str.replace(/'(?=\d\d)/, "&#8217;");
  const close_class = "[^\\ \\t\\r\\n\\[\\{\\(\\-]";
  const not_close_class = "[\\ \\t\\r\\n\\[\\{\\(\\-]";
  const dec_dashes = "&#8211;|&#8212;";
  str = str.replace(new RegExp(`(\\s|&nbsp;|--|&[mn]dash;|${dec_dashes}|&#x201[34])'(?=\\w)`, "g"), "$1&#8216;");
  str = str.replace(new RegExp(`(${close_class})'`, "g"), "$1&#8217;");
  str = str.replace(new RegExp(`(${not_close_class}?)'(?=\\s|s\\b)`, "g"), "$1&#8217;");
  str = str.replace(/'/g, "&#8216;");
  str = str.replace(new RegExp(`(\\s|&nbsp;|--|&[mn]dash;|${dec_dashes}|&#x201[34])"(?=\\w)`, "g"), "$1&#8220;");
  str = str.replace(new RegExp(`(${close_class})"`, "g"), "$1&#8221;");
  str = str.replace(new RegExp(`(${not_close_class}?)"(?=\\s)`, "g"), "$1&#8221;");
  str = str.replace(/"/g, "&#8220;");
  return str;
};
var EducateBackticks = (str) => {
  str = str.replace(/``/g, "&#8220;");
  str = str.replace(/''/g, "&#8221;");
  return str;
};
var EducateSingleBackticks = (str) => {
  str = str.replace(/`/g, "&#8216;");
  str = str.replace(/'/g, "&#8217;");
  return str;
};
var EducateDashes = (str) => {
  str = str.replace(/--/g, "&#8212;");
  return str;
};
var EducateDashesOldSchool = (str) => {
  str = str.replace(/---/g, "&#8212;");
  str = str.replace(/--/g, "&#8211;");
  return str;
};
var EducateDashesOldSchoolInverted = (str) => {
  str = str.replace(/---/g, "&#8211;");
  str = str.replace(/--/g, "&#8212;");
  return str;
};
var EducateEllipses = (str) => {
  str = str.replace(/\.\.\./g, "&#8230;");
  str = str.replace(/\. \. \./g, "&#8230;");
  return str;
};
var StupefyEntities = (str) => {
  str = str.replace(/&#8211;/g, "-");
  str = str.replace(/&#8212;/g, "--");
  str = str.replace(/&#8216;/g, "'");
  str = str.replace(/&#8217;/g, "'");
  str = str.replace(/&#8220;/g, '"');
  str = str.replace(/&#8221;/g, '"');
  str = str.replace(/&#8230;/g, "...");
  return str;
};
var EducateEntities = (text, attr = "1") => {
  let do_quotes = 0;
  let do_backticks = 0;
  let do_dashes = 0;
  let do_ellipses = 0;
  if (typeof attr === "number") {
    attr = attr.toString();
  } else {
    attr = attr.replace(/\s/g, "");
  }
  if (attr === "0") {
    return text;
  } else if (attr === "1") {
    do_quotes = 1;
    do_backticks = 1;
    do_dashes = 1;
    do_ellipses = 1;
  } else if (attr === "2") {
    do_quotes = 1;
    do_backticks = 1;
    do_dashes = 3;
    do_ellipses = 1;
  } else if (attr === "3") {
    do_quotes = 1;
    do_backticks = 1;
    do_dashes = 3;
    do_ellipses = 1;
  } else {
    for (let i2 = 0; i2 < attr.length; i2++) {
      const c2 = attr[i2];
      if (c2 === "q") {
        do_quotes = 1;
      }
      if (c2 === "b") {
        do_backticks = 1;
      }
      if (c2 === "B") {
        do_backticks = 2;
      }
      if (c2 === "d") {
        do_dashes = 1;
      }
      if (c2 === "D") {
        do_dashes = 2;
      }
      if (c2 === "i") {
        do_dashes = 3;
      }
      if (c2 === "e") {
        do_ellipses = 1;
      }
    }
  }
  if (do_dashes) {
    text = text.replace(/&#8211;/g, "\u2013");
    text = text.replace(/&#8212;/g, "\u2014");
  }
  if (do_quotes || do_backticks) {
    text = text.replace(/&#8216;/g, "\u2018");
    text = text.replace(/&#8217;/g, "\u2019");
    text = text.replace(/&#8220;/g, "\u201C");
    text = text.replace(/&#8221;/g, "\u201D");
  }
  if (do_ellipses) {
    text = text.replace(/&#8230;/g, "\u2026");
  }
  return text;
};
var StupifyUTF8Char = (str) => {
  str = str.replace(/\u2013/g, "-");
  str = str.replace(/\u2014/g, "--");
  str = str.replace(/\u2018/g, "'");
  str = str.replace(/\u2019/g, "'");
  str = str.replace(/\u201c/g, '"');
  str = str.replace(/\u201d/g, '"');
  str = str.replace(/\u2026/g, "...");
  return str;
};
var ProcessEscapes = (str) => {
  str = str.replace(/\\\\/g, "&#92;");
  str = str.replace(/\\"/g, "&#34;");
  str = str.replace(/\\'/g, "&#39;");
  str = str.replace(/\\\./g, "&#46;");
  str = str.replace(/\\-/g, "&#45;");
  str = str.replace(/\\`/g, "&#96;");
  return str;
};
var _tokenize = (str) => {
  let pos = 0;
  const len = str.length;
  const tokens = [];
  const match = /<!--[\s\S]*?-->|<\?.*?\?>|<[^>]*>/g;
  let matched = null;
  while (matched = match.exec(str)) {
    if (pos < matched.index) {
      const t22 = ["text", str.substring(pos, matched.index)];
      tokens.push(t22);
    }
    const t2 = ["tag", matched.toString()];
    tokens.push(t2);
    pos = match.lastIndex;
  }
  if (pos < len) {
    const t2 = ["text", str.substring(pos, len)];
    tokens.push(t2);
  }
  return tokens;
};
var smartypantsu = (text = "", attr = "1") => {
  const str = SmartyPants(text, attr);
  if (typeof attr === "number") {
    attr = attr.toString();
  } else {
    attr = attr.replace(/\s/g, "");
  }
  if (attr === "-1") {
    return StupifyUTF8Char(str);
  } else {
    return EducateEntities(str, attr);
  }
};
function getSmartypantsComponent(Comp) {
  return (0, import_react_walk_element_tree.default)((node) => {
    if (React4.isValidElement(node)) {
      const kids = node.props.children;
      const children = typeof kids === "string" ? smartypantsu(kids) : Array.isArray(kids) ? React4.Children.map(kids, (k2) => typeof k2 === "string" ? smartypantsu(k2) : k2) : kids;
      return React4.cloneElement(node, node.props, children);
    }
    return node;
  })(Comp);
}
function generateDirectionalCSS(css2) {
  var _a22, _b, _c;
  if (!css2 || css2.length === 0) {
    return css2;
  }
  const styles = {};
  for (const rule in css2) {
    const name = rule.toLocaleLowerCase();
    const value = css2[rule];
    const valueType = typeof value;
    const hasLeft = name.includes("left");
    const hasRight = name.includes("right");
    const hasShortcut = utilNames.includes(name);
    const isShorthand = shorthandList[rule];
    const isDirectional = hasLeft || hasRight || hasShortcut || isShorthand;
    const isPrimitive2 = ["number", "string", "bigint"].includes(valueType);
    if (isPrimitive2 && isDirectional) {
      let reverse = rule;
      styles["[dir='ltr'] &"] = (_a22 = styles["[dir='ltr'] &"]) != null ? _a22 : {};
      styles["[dir='rtl'] &"] = (_b = styles["[dir='rtl'] &"]) != null ? _b : {};
      if (isShorthand) {
        const rtl = getShorthandRTLValue(rule, value);
        if (rtl === value) {
          styles[rule] = value;
        } else {
          styles["[dir='ltr'] &"][rule] = value;
          styles["[dir='rtl'] &"][rule] = rtl;
        }
      } else {
        if (hasLeft) {
          reverse = rule.replaceAll("left", "right").replaceAll("Left", "Right");
        } else if (hasRight) {
          reverse = rule.replaceAll("right", "left").replaceAll("Right", "Left");
        } else if (hasShortcut) {
          reverse = (_c = utilMap[rule]) != null ? _c : rule;
        }
        styles["[dir='ltr'] &"][rule] = value;
        styles["[dir='rtl'] &"][reverse] = value;
      }
    } else if (valueType === "object" && !Array.isArray(value)) {
      styles[rule] = generateDirectionalCSS(value);
    } else {
      styles[rule] = value;
    }
  }
  return styles;
}
var quadOrthogonalShorthands = {
  padding: true,
  p: true,
  margin: true,
  m: true,
  borderStyle: true,
  borderWidth: true,
  borderColor: true
};
var quadDiagonalShorthands = {
  borderRadius: true
};
var simpleDirectionalShorthands = {
  float: true,
  justifyContent: true,
  justifyItems: true,
  justifySelf: true
};
var animationOffsetShorthands = {
  offset: true
};
var backgroundShorthand = {
  background: true,
  bg: true
};
var positionOffsetShorthands = {
  backgroundPosition: true,
  offsetAnchor: true,
  offsetPosition: true
};
var shorthandList = __spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({}, quadOrthogonalShorthands), quadDiagonalShorthands), simpleDirectionalShorthands), animationOffsetShorthands), backgroundShorthand), positionOffsetShorthands);
var utilMap = {
  ml: "mr",
  mr: "ml",
  pl: "pr",
  pr: "pl",
  radiusLeft: "radiusRight",
  radiusRight: "radiusLeft",
  marginRight: "marginLeft",
  marginLeft: "marginRight",
  paddingRight: "paddingLeft",
  paddingLeft: "paddingRight"
};
var utilNames = Object.keys(utilMap).map((u2) => u2.toLocaleLowerCase());
var reverseDirection = {
  left: "right",
  right: "left",
  center: "center",
  top: "top",
  bottom: "bottom",
  auto: "auto",
  none: "none"
};
var offsetPath = {
  ray: true,
  url: true,
  circle: true,
  ellipse: true,
  inset: true,
  polygon: true,
  path: true
};
function getShorthandRTLValue(rule, input) {
  const value = String(input);
  if (positionOffsetShorthands[rule]) {
    return getPositionOffsetRTLValue(value);
  }
  if (animationOffsetShorthands[rule]) {
    return getAnimationOffsetRTLValue(value);
  }
  if (quadOrthogonalShorthands[rule]) {
    return getQuadOrthogonalRTLValue(value);
  }
  if (quadDiagonalShorthands[rule]) {
    return getQuadDiagonalRTLValue(value);
  }
  if (simpleDirectionalShorthands[rule]) {
    return switchDirectionalRTLValue(value);
  }
  if (backgroundShorthand[rule]) {
    return getBackgroundRTLValue(value);
  }
  return value;
}
function getBackgroundRTLValue(value) {
  const backgrounds = value.split(",").reduce((output, bg) => {
    const openP = bg.indexOf("(");
    const closeP = bg.indexOf(")");
    const url = openP > -1 ? bg.substring(openP, closeP) : "";
    const cleanBg = bg.replace(url, "\u2021\u2021\u2021");
    const hasLeft = cleanBg.includes("left");
    const hasRight = cleanBg.includes("right");
    const firstNumber = (cleanBg.match(/(\d*\.?\d+)\s?(px|em|rem|ex|ch|%|in|cn|mm|pt|pc|vw|vh|vmax|vmin+)/) || [])[0];
    let outStr = cleanBg;
    if (hasLeft) {
      outStr = outStr.replace("left", "right");
    } else if (hasRight) {
      outStr = outStr.replace("right", "left");
    } else if (firstNumber !== void 0) {
      const posOfNumber = outStr.indexOf(firstNumber);
      const num = outStr.substring(posOfNumber);
      outStr = outStr.replace(num, `right ${num}`);
    }
    output.push(outStr.replace("\u2021\u2021\u2021", url));
    return output;
  }, []);
  return backgrounds.join(", ");
}
function getQuadOrthogonalRTLValue(value) {
  const values = String(value).split(" ");
  if (values.length < 4) {
    return value;
  }
  const top = values[0];
  const right = values[1];
  const bottom = values[2];
  const left = values[3];
  return `${top} ${left} ${bottom} ${right}`;
}
function getQuadDiagonalRTLValue(value) {
  const segments = String(value).split("/");
  return segments.reduce((output, segment, index) => {
    const divider = index ? " / " : "";
    const values = String(segment.trim()).split(" ");
    if (values.length < 4) {
      return `${divider}${value}`;
    }
    const topLeft = values[0];
    const topRight = values[1];
    const bottomRight = values[2];
    const bottomLeft = values[3];
    output += `${divider}${topRight} ${topLeft} ${bottomLeft} ${bottomRight}`;
    return output;
  }, "");
}
function switchDirectionalRTLValue(value) {
  return reverseDirection[value.toLowerCase()] || value;
}
function getAnimationOffsetRTLValue(value) {
  const values = String(value).trim().split("/");
  const first = values[0].trim();
  const second = values[1].trim();
  const third = values[2].trim();
  const fourth = values[3].trim();
  const fifth = values[4].trim();
  if (values.length === 1) {
    return getPositionOffsetRTLValue(first);
  }
  const out = [getPositionOffsetRTLValue(first), second];
  if (second && second.includes("(") && offsetPath[second.substring(0, second.indexOf("("))]) {
    if (third) {
      out.push(third);
    }
    if (fourth) {
      out.push(getPositionOffsetRTLValue(fourth));
    }
    if (fifth) {
      out.push(fifth);
    }
  } else {
    if (third) {
      out.push(getPositionOffsetRTLValue(third));
    }
    if (fourth) {
      out.push(fourth);
    }
  }
  return out.join(" / ");
}
function getPositionOffsetRTLValue(value) {
  if (["left", "right"].includes(value)) {
    return switchDirectionalRTLValue(value);
  }
  const values = String(value).trim().split(" ");
  if (values.length === 1 && !isNaN(parseInt(value))) {
    return `right ${value} center`;
  }
  if (values.length === 2) {
    const isFirstNumeric = !isNaN(parseInt(values[0]));
    if (isFirstNumeric) {
      return `right ${values[0]} ${values[1]}`;
    }
    return `${reverseDirection[values[0]]} ${values[1]}`;
  }
  if (values.length === 3) {
    const isSecondNumeric = !isNaN(parseInt(values[1]));
    if (isSecondNumeric) {
      return `${reverseDirection[values[0]]} ${values[1]} ${reverseDirection[values[2]]}`;
    }
    return `${reverseDirection[values[0]]} ${reverseDirection[values[1]]} ${values[2]}`;
  }
  if (values.length === 4) {
    return `${reverseDirection[values[0]]} ${values[1]} ${reverseDirection[values[2]]} ${values[3]}`;
  }
  return value;
}
var sizes = {
  auto: "auto",
  px: "1px",
  rem: "1rem",
  base: `${BASE_STYLE_SIZE}${STYLE_UNIT}`,
  none: "0",
  quarter: "25%",
  third: "33.33333333%",
  half: "50%",
  twoThirds: "66.66666666%",
  threeQuarters: "75%",
  full: "100%",
  fullVh: "100vh",
  fullVw: "100vw",
  0: "$none",
  1: `calc($base / 2)`,
  2: "$base",
  3: `calc($base * 2)`,
  4: `calc($base * 3)`,
  5: `calc($base * 4)`,
  6: `calc($base * 5)`,
  7: `calc($base * 6)`,
  8: `calc($base * 8)`,
  9: `calc($base * 10)`,
  10: `calc($base * 12)`,
  11: `calc($base * 16)`,
  12: `calc($base * 20)`,
  13: `calc($base * 24)`,
  14: `calc($base * 30)`,
  15: `calc($base * 40)`,
  16: `calc($base * 50)`,
  17: `calc($base * 60)`,
  18: `calc($base * 80)`,
  19: `calc($base * 100)`,
  20: `calc($base * 120)`,
  21: `calc($base * 140)`,
  22: `calc($base * 160)`,
  23: `calc($base * 180)`,
  24: `calc($base * 200)`,
  25: `calc($base * 240)`,
  26: `calc($base * 280)`,
  27: `calc($base * 320)`,
  28: `calc($base * 360)`,
  29: `calc($base * 400)`
};
var shadows = {
  light: {
    none: "none",
    low: `0px 1px 1.5px hsl($colors$shadowBase / 0.18)`,
    medium: `
0px 1.8px 2.7px hsl($colors$shadowBase / 0.08),
0px 5.1px 7.7px hsl($colors$shadowBase / 0.16)
    `,
    high: `
0px 3.7px 5.6px hsl($colors$shadowBase / 0.03),
0px 8px 12px hsl($colors$shadowBase / 0.05),
0px 17px 25.5px hsl($colors$shadowBase / 0.12)
    `,
    highSoft: `
0px 3.7px 5.6px hsl($colors$shadowBase / 0.01),
0px 8px 12px hsl($colors$shadowBase / 0.02),
0px 17px 25.5px hsl($colors$shadowBase / 0.04)
    `
  },
  dark: {
    none: "none",
    low: `0px 1.5px 2.3px hsl($colors$shadowBase / 0.38)`,
    medium: `
0px 2.6px 3.9px hsl($colors$shadowBase / 0.25),
0px 7.5px 11.3px hsl($colors$shadowBase / 0.40)
    `,
    high: `
0px 8.6px 12.9px hsl($colors$shadowBase / 0.22),
0px 19.1px 28.7px hsl($colors$shadowBase / 0.35),
0px 40.8px 61.2px hsl($colors$shadowBase / 0.55)
    `,
    highSoft: `
0px 8.6px 12.9px hsl($colors$shadowBase / 0.18),
0px 19.1px 28.7px hsl($colors$shadowBase / 0.30),
0px 40.8px 61.2px hsl($colors$shadowBase / 0.44)
    `
  }
};
var DEFAULT_FONTS = {
  body: "sourceSansPro",
  button: "sourceSansPro",
  heading: "montserrat",
  code: "firaCode"
};
var lightPalette = generateThemeColors(generatePaletteFromHue(DEFAULT_HUE, DEFAULT_PALETTE), "light");
var colors = __spreadValues({
  none: "transparent",
  panel: "$neutralMin",
  shadowBase: "53 0% 7%",
  shadowBlack: "hsl(0 0% 0%)",
  shadowLight: "hsl($colors$shadowBase / 0.05)",
  shadowHeavy: "hsl($colors$shadowBase / 0.15)",
  defaultBody: "$textNeutral2",
  defaultHeading: "$neutral10"
}, lightPalette);
var baseThemeValues = {
  borderStyles: {
    focusRing: "solid"
  },
  borderWidths: {
    px: "1px",
    rem: "1rem",
    base: `2${STYLE_UNIT}`,
    focusRing: "$none",
    none: "0",
    0: "$none",
    1: `calc($base - 1${STYLE_UNIT})`,
    2: "$base",
    3: `calc($base + 2${STYLE_UNIT})`,
    4: `calc($base + 4${STYLE_UNIT})`,
    5: `calc($base + 6${STYLE_UNIT})`,
    6: `calc($base + 8${STYLE_UNIT})`,
    7: `calc($base + 10${STYLE_UNIT})`,
    8: `calc($base * 6)`,
    9: `calc($base * 8)`,
    10: `calc($base * 10)`
  },
  colors,
  fonts: __spreadValues(__spreadValues(__spreadValues({
    body: `$${DEFAULT_FONTS.body}, $systemSans`,
    button: `$${DEFAULT_FONTS.button}, $systemSans`,
    heading: `$${DEFAULT_FONTS.heading}, $systemSerif`,
    code: `$${DEFAULT_FONTS.code}, $systemMono`,
    quote: "$heading, $systemSerif",
    systemSans: SystemFontFamily.sansSerif,
    systemSerif: SystemFontFamily.serif,
    systemMono: SystemFontFamily.monospace
  }, enumKeys(BodyFontFamily).reduce((output, key) => {
    output[key] = `"${BodyFontFamily[key]}"`;
    return output;
  }, {})), enumKeys(HeadingFontFamily).reduce((output, key) => {
    output[key] = `"${HeadingFontFamily[key]}"`;
    return output;
  }, {})), enumKeys(CodeFontFamily).reduce((output, key) => {
    output[key] = `"${CodeFontFamily[key]}"`;
    return output;
  }, {})),
  fontSizes: {
    base: `16${STYLE_UNIT}`,
    quote: "$h2",
    h1: "$9",
    h2: "$7",
    h3: "$6",
    h4: "$5",
    h5: "$4",
    h6: "$3",
    p: "$3",
    field: "$p",
    fieldTiny: "calc($field * 0.8)",
    fieldSmall: "calc($field * 0.9)",
    fieldLarge: "calc($field * 1.25)",
    button: "$field",
    buttonTiny: "calc($button * 0.8)",
    buttonSmall: "calc($button * 0.9)",
    buttonLarge: "calc($button * 1.25)",
    smallest: "$1",
    small: "$2",
    medium: "$3",
    large: "$6",
    largest: "$9",
    1: `calc($base - 2${STYLE_UNIT})`,
    2: "$base",
    3: `calc($base + 1${STYLE_UNIT})`,
    4: `calc($base + 3${STYLE_UNIT})`,
    5: `calc($base + 6${STYLE_UNIT})`,
    6: `calc($base + 10${STYLE_UNIT})`,
    7: `calc($base + 15${STYLE_UNIT})`,
    8: `calc($base + 21${STYLE_UNIT})`,
    9: `calc($base + 28${STYLE_UNIT})`,
    10: `calc($base + 36${STYLE_UNIT})`,
    11: `calc($base + 45${STYLE_UNIT})`,
    12: `calc($base + 55${STYLE_UNIT})`
  },
  fontWeights: {
    h1: "$6",
    h2: "$7",
    h3: "$6",
    h4: "$9",
    h5: "$6",
    h6: "$8",
    p: "$3",
    code: "$6",
    hairline: "$1",
    thin: "$2",
    light: "$3",
    regular: "$4",
    bold: "$6",
    heavy: "$7",
    black: "$9",
    1: "100",
    2: "200",
    3: "300",
    4: "400",
    5: "500",
    6: "600",
    7: "700",
    8: "800",
    9: "900"
  },
  letterSpacings: {
    tightest: `-1${STYLE_UNIT}`,
    tight: `-0.25${STYLE_UNIT}`,
    regular: `0${STYLE_UNIT}`,
    loose: `0.5${STYLE_UNIT}`
  },
  lineHeights: {
    base: "1.65",
    body: "calc($base + $modifier)",
    heading: "calc((0.75 + ($base * 0.3)) + $modifier)",
    listItem: "calc((0.75 + ($base * 0.3)) + $modifier)",
    min: "1px",
    spaced: "calc(($base * 1.1) + $modifier)",
    tight: "calc(($base / 1.65) + $modifier)",
    field: "$6",
    label: "$field",
    button: "2rem",
    modifier: "0rem",
    2: "calc($sizes$2 + $modifier)",
    3: "calc($sizes$3 + $modifier)",
    4: "calc($sizes$4 + $modifier)",
    5: "calc($sizes$5 + $modifier)",
    6: "calc($sizes$6 + $modifier)",
    7: "calc($sizes$7 + $modifier)",
    8: "calc($sizes$8 + $modifier)",
    9: "calc($sizes$9 + $modifier)",
    10: "calc($sizes$10 + $modifier)",
    11: "calc($sizes$11 + $modifier)",
    12: "calc($sizes$12 + $modifier)",
    13: "calc($sizes$13 + $modifier)",
    14: "calc($sizes$14 + $modifier)"
  },
  radii: {
    px: "1px",
    rem: "1rem",
    base: `4${STYLE_UNIT}`,
    round: "50%",
    pill: `240${STYLE_UNIT}`,
    rounded: `min(max($field, 4${STYLE_UNIT}), 4${STYLE_UNIT})`,
    rectangular: `0${STYLE_UNIT}`,
    field: "$3",
    button: "$field",
    tooltip: "$rounded",
    none: "0",
    0: "$none",
    1: `calc($base * 0.5)`,
    2: `calc($base * 0.75)`,
    3: "$base",
    4: `calc($base * 1.5)`,
    5: `calc($base * 2)`,
    6: `calc($base * 2.5)`,
    7: `calc($base * 3)`,
    8: `calc($base * 10)`,
    9: `calc($base * 20)`,
    10: `calc($base * 30)`
  },
  shadows: shadows.light,
  sizes: __spreadProps(__spreadValues({}, sizes), {
    buttonBasePx: "$4",
    buttonBasePy: "$2",
    buttonTactileHighlight: "1rem",
    buttonTactileShadow: "4rem",
    tooltipBaseP: "$3"
  }),
  space: sizes,
  zIndices: {
    max: "9999",
    min: "-1",
    0: "0",
    1: "10",
    2: "50",
    3: "100",
    4: "200",
    5: "300",
    6: "400",
    7: "500",
    8: "600",
    9: "700",
    10: "800",
    11: "900",
    12: "1000"
  },
  transitions: {
    none: "none",
    instant: "0s",
    faster: "0.15s",
    fast: "0.25s",
    slow: "0.5s",
    slower: "0.75s",
    slowest: "1s"
  }
};
var { styled, css, theme, createTheme, getCssText, globalCss, keyframes, config } = de({
  cssPreProcessor: generateDirectionalCSS,
  theme: baseThemeValues,
  themeMap: __spreadProps(__spreadValues({}, n), {
    padding: "sizes",
    paddingTop: "sizes",
    paddingRight: "sizes",
    paddingBottom: "sizes",
    paddingLeft: "sizes",
    paddingBlock: "sizes",
    paddingBlockEnd: "sizes",
    paddingBlockStart: "sizes",
    paddingInline: "sizes",
    paddingInlineEnd: "sizes",
    paddingInlineStart: "sizes"
  }),
  media: __spreadProps(__spreadValues({}, Object.entries(breakpoints).reduce((output, [name, size]) => {
    output[name] = `(min-width: ${size}px)`;
    output[`<${name}`] = `(max-width: ${size - 1e-5}px)`;
    return output;
  }, {})), {
    highContrast: "(prefers-contrast: more)",
    lowContrast: "(prefers-contrast: less)",
    forcedColors: "(forced-colors: active)",
    reducedMotion: "(prefers-reduced-motion)",
    reducedData: "(prefers-reduced-data)",
    touch: "(hover: none)",
    hover: "(any-hover: hover)",
    controller: "(hover: hover) and (pointer: coarse)",
    pointer: "(hover: hover) and (pointer: fine)",
    dark: "(prefers-color-scheme: dark)",
    light: "(prefers-color-scheme: light)",
    safari: "not all and (min-resolution:.001dpcm)"
  }),
  utils: {
    p: (value) => ({
      padding: value
    }),
    pt: (value) => ({
      paddingTop: value
    }),
    pr: (value) => ({
      paddingRight: value
    }),
    pb: (value) => ({
      paddingBottom: value
    }),
    pl: (value) => ({
      paddingLeft: value
    }),
    px: (value) => ({
      paddingLeft: value,
      paddingRight: value
    }),
    py: (value) => ({
      paddingTop: value,
      paddingBottom: value
    }),
    m: (value) => ({
      margin: value
    }),
    mt: (value) => ({
      marginTop: value
    }),
    mr: (value) => ({
      marginRight: value
    }),
    mb: (value) => ({
      marginBottom: value
    }),
    ml: (value) => ({
      marginLeft: value
    }),
    mx: (value) => ({
      marginLeft: value,
      marginRight: value
    }),
    my: (value) => ({
      marginTop: value,
      marginBottom: value
    }),
    bg: (value) => {
      return value === "alphaPattern" ? {
        backgroundColor: "transparent",
        backgroundSize: "12px 12px",
        backgroundPosition: "0px 0px, 6px 0px, 6px -6px, 0px 6px",
        backgroundImage: `linear-gradient(
          45deg, $neutral6 25%, transparent 25%), linear-gradient(
          135deg, $neutral6 25%, transparent 25%), linear-gradient(
          45deg, transparent 75%, $neutral6 75%), linear-gradient(
          135deg, transparent 75%, $neutral6 75%)`
      } : {
        background: value
      };
    },
    radius: (value) => ({
      borderRadius: value
    }),
    radiusTop: (value) => ({
      borderTopLeftRadius: value,
      borderTopRightRadius: value
    }),
    radiusBottom: (value) => ({
      borderBottomLeftRadius: value,
      borderBottomRightRadius: value
    }),
    radiusLeft: (value) => ({
      borderTopLeftRadius: value,
      borderBottomLeftRadius: value
    }),
    radiusRight: (value) => ({
      borderTopRightRadius: value,
      borderBottomRightRadius: value
    }),
    borderX: (value) => ({
      borderLeft: value,
      borderRight: value
    }),
    borderY: (value) => ({
      borderBottom: value,
      borderTop: value
    }),
    z: (value) => ({ zIndex: value }),
    h: (value) => ({ height: value }),
    w: (value) => ({ width: value }),
    size: (value) => ({
      width: value,
      height: value
    }),
    linearGradient: (value) => ({
      backgroundImage: `linear-gradient(${value})`
    }),
    appearance: (value) => ({
      WebkitAppearance: value,
      appearance: value
    }),
    userSelect: (value) => ({
      WebkitUserSelect: value,
      userSelect: value
    }),
    backgroundClip: (value) => ({
      WebkitBackgroundClip: value,
      backgroundClip: value
    })
  }
});
var baseTheme = theme;
var isNumber = (n2) => !isNaN(+n2);
var getTime = (time) => isNumber(time) ? `${time}s` : String(time);
var animate = (animation, options = {}) => {
  const {
    duration = "$transitions$fast",
    timingFunction = "ease",
    delay = "0s",
    iterationCount = 1,
    direction = "normal",
    fillMode = "none",
    playState = "running",
    transformOrigin
  } = options;
  const target = keyframes(animation);
  const durationTime = getTime(duration);
  const delayTime = getTime(delay);
  return __spreadValues({
    animation: `${durationTime} ${timingFunction} ${delayTime} ${iterationCount}
      ${direction} ${fillMode} ${playState} ${target}`
  }, transformOrigin ? { transformOrigin } : {});
};
var darkPalette = generateThemeColors(generatePaletteFromHue(DEFAULT_HUE, DEFAULT_PALETTE, 1, "dark"), "dark");
var darkThemeColors = __spreadValues({
  none: "transparent",
  panel: "$neutral3",
  shadowBase: "53 0% 7%",
  shadowBlack: "hsl(0 0% 0%)",
  shadowLight: "hsl($colors$shadowBase / 0.2)",
  shadowHeavy: "hsl($colors$shadowBase / 0.35)"
}, darkPalette);
var darkTheme = createTheme("neutron-dark-theme", {
  colors: darkThemeColors,
  shadows: shadows.dark
});
var baseDarkTheme = darkTheme;
var globalStyles = globalCss({
  html: {
    fontSize: "6.25%"
  },
  "@safari": {
    "@supports (-webkit-appearance:none)": {
      html: { fontSize: "1px" }
    }
  },
  body: {
    bg: "$neutral2",
    color: "$defaultBody",
    fontSize: "16em",
    fontWeight: "$p",
    lineHeight: "$body",
    m: "$none",
    p: "$none"
  },
  "*": {
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    boxSizing: "border-box",
    "&::placeholder": {
      color: "$textNeutral9"
    },
    "@reducedMotion": {
      animation: "$none !important",
      transition: "$none !important"
    }
  },
  "body, a, p, li, strong, em, b, i, button": {
    fontFamily: "$body"
  },
  button: {
    fontFamily: "$button"
  },
  "pre, code": {
    fontFamily: "$code"
  },
  code: {
    bg: "$neutralMaxA2",
    color: "$neutralMax",
    fontWeight: "$code"
  },
  blockquote: {
    fontFamily: "$quote",
    fontSize: "$quote",
    lineHeight: "$spaced",
    fontStyle: "italic"
  },
  ul: {
    listStyleType: "circle"
  },
  "a, p, li, pre, code, strong, em, b, i, blockquote": {
    fontSize: "$p"
  },
  a: {
    color: "$primary10",
    fontWeight: "$6",
    radius: "$field",
    textDecoration: "underline",
    "&:focus": {
      outline: "2px solid $colors$primaryA10"
    }
  },
  "blockquote, pre": {
    bg: "$neutral3",
    color: "$textNeutral3",
    mx: "$none",
    px: "$8",
    py: "$6",
    radius: "$rounded"
  },
  h1: {
    fontSize: "$h1",
    fontWeight: "$h1",
    letterSpacing: "$tightest"
  },
  h2: {
    fontSize: "$h2",
    fontWeight: "$h2"
  },
  h3: {
    fontSize: "$h3",
    fontWeight: "$h3"
  },
  h4: {
    fontSize: "$h4",
    fontWeight: "$h4"
  },
  h5: {
    fontSize: "$h5",
    fontWeight: "$h5"
  },
  h6: {
    fontSize: "$h6",
    fontWeight: "$h6"
  },
  em: {
    fontStyle: "normal"
  },
  strong: {
    fontWeight: "$p"
  },
  "::selection": {
    bg: "$primary9",
    color: "$textPrimary9"
  }
});
var FONT_PROPS = Object.keys(baseThemeValues.fonts);
function getRootValueFromTheme(theme2, category, token) {
  var _a22;
  let value = ((_a22 = theme2[category]) == null ? void 0 : _a22[token]).value;
  if (value) {
    const isVar = value.includes("var(");
    if (isVar) {
      const keys = value.replace(`var(--`, "").replace(")", "").split("-");
      value = getRootValueFromTheme(theme2, keys[0], keys[1]);
    }
  }
  return String(value);
}
var getFontWeightReducer = (prefix) => (output, weight, index) => {
  output += `${!index ? "" : ";"}${prefix},${weight}`;
  return output;
};
function getFontLinks(fontFamilies = DEFAULT_FONTS) {
  let families = "";
  const bodyKey = fontFamilies.body || DEFAULT_FONTS.body;
  const bodyWeights = new Set(bodyFonts[bodyKey].weights);
  const bodyItalicWeights = new Set(bodyFonts[bodyKey].italicWeights);
  const headingKey = fontFamilies.heading || DEFAULT_FONTS.heading;
  let headingWeights = new Set(headingFonts[headingKey].weights);
  let headingItalicWeights = new Set(headingFonts[headingKey].italicWeights);
  const codeKey = fontFamilies.code || DEFAULT_FONTS.code;
  let codeWeights = new Set(codeFonts[codeKey].weights);
  let codeItalicWeights = new Set(codeFonts[codeKey].italicWeights);
  if (headingKey === bodyKey) {
    headingWeights = /* @__PURE__ */ new Set([...bodyWeights, ...headingFonts[headingKey].weights]);
    headingItalicWeights = /* @__PURE__ */ new Set([
      ...bodyItalicWeights,
      ...headingFonts[headingKey].italicWeights
    ]);
  }
  if (codeKey === headingKey) {
    codeWeights = /* @__PURE__ */ new Set([...headingWeights, ...codeFonts[codeKey].weights]);
    codeItalicWeights = /* @__PURE__ */ new Set([
      ...headingItalicWeights,
      ...codeFonts[codeKey].italicWeights
    ]);
  }
  const familyData = /* @__PURE__ */ new Map();
  familyData.set(bodyKey, {
    name: BodyFontFamily[bodyKey],
    weights: Array.from(bodyWeights).sort(),
    italicWeights: Array.from(bodyItalicWeights).sort()
  });
  familyData.set(headingKey, {
    name: HeadingFontFamily[headingKey],
    weights: Array.from(headingWeights).sort(),
    italicWeights: Array.from(headingItalicWeights).sort()
  });
  familyData.set(codeKey, {
    name: CodeFontFamily[codeKey],
    weights: Array.from(codeWeights).sort(),
    italicWeights: Array.from(codeItalicWeights).sort()
  });
  const fonts2 = Array.from(familyData);
  fonts2.forEach(([, fontData]) => {
    if (!fontData) {
      return;
    }
    const { weights, italicWeights } = fontData;
    const fontName = String(fontData.name).replace(" ", "+");
    let variants = "";
    if (weights.length + italicWeights.length > 1) {
      const regular = weights.reduce(getFontWeightReducer(0), "");
      const italic = italicWeights.reduce(getFontWeightReducer(1), "");
      variants = `:ital,wght@${regular};${italic}`;
    }
    families += `&family=${fontName}${variants}`;
  });
  return [
    {
      rel: "preconnect",
      href: "https://fonts.googleapis.com"
    },
    {
      rel: "preconnect",
      href: "https://fonts.gstatic.com",
      crossOrigin: "anonymous"
    },
    {
      rel: "preload",
      as: "style",
      href: `https://fonts.googleapis.com/css2?display=auto${families}`
    },
    {
      rel: "stylesheet",
      href: `https://fonts.googleapis.com/css2?display=auto${families}`
    }
  ];
}
function getThemeFonts(fontFamilies = DEFAULT_FONTS) {
  const { body, button, heading, code } = fontFamilies;
  const bodyKey = body || DEFAULT_FONTS.body;
  const buttonKey = button || body || DEFAULT_FONTS.button;
  const headingKey = heading || DEFAULT_FONTS.heading;
  const codeKey = code || DEFAULT_FONTS.code;
  const buttonFontData = bodyFonts[buttonKey] || headingFonts[buttonKey];
  const bodyFallback = bodyFonts[bodyKey].fallbackKey || "systemSans";
  const buttonFallback = buttonFontData.fallbackKey || "systemSans";
  const headingFallback = headingFonts[headingKey].fallbackKey || "systemSerif";
  const codeFallback = codeFonts[codeKey].fallbackKey || "systemCode";
  return {
    fonts: {
      body: `$${bodyKey}, $${bodyFallback}`,
      button: `$${buttonKey}, $${buttonFallback}`,
      heading: `$${headingKey}, $${headingFallback}`,
      code: `$${codeKey}, $${codeFallback}`
    },
    links: getFontLinks(fontFamilies)
  };
}
function generateVariantSequence(entries, contentGetter, shift = 1) {
  const out = Array(entries).fill(0).reduce((output, x2, index) => {
    const key = index + shift;
    output[key < 0 ? `minus${Math.abs(key)}` : key] = contentGetter(key);
    return output;
  }, {});
  return out;
}
function getSignedContentGetter(prop) {
  return (n2) => {
    const val = Math.abs(n2);
    return { [prop]: n2 < 0 ? `calc($${val} * -1)` : `$${val}` };
  };
}
function getSemanticSizes(prop) {
  return enumKeys(SemanticSize).reduce((output, key) => {
    output[key] = { [prop]: `$${key}` };
    return output;
  }, {});
}
var heightVariants$1 = __spreadValues(__spreadValues({}, getSemanticSizes("h")), generateVariantSequence(30, (n2) => ({ h: `$${n2}` }), 0));
var widthVariants$1 = __spreadValues(__spreadValues({}, getSemanticSizes("w")), generateVariantSequence(30, (n2) => ({ w: `$${n2}` }), 0));
function generateSemanticRadii(setter) {
  return RADIUS_KEYS.reduce((output, key) => {
    output[key] = setter(key);
    return output;
  }, {});
}
var getBgColorReducer = (isFocusStyle = false) => (output, bg) => {
  const name = bg.toLowerCase();
  const isNeutral = name.includes("neutral");
  const isNeutralStatic = isNeutral && (name.includes("max") || name.includes("min"));
  const isStatus = !isNeutral && !!SemanticStaticColorName[bg];
  let style;
  if (isNeutralStatic || isStatus) {
    style = { bg: `$${bg}` };
    output[bg] = isFocusStyle ? { "&:focus, &:hover": style } : style;
  }
  if (!isStatus) {
    COLOR_KEYS.forEach((key) => {
      if (!isNeutralStatic) {
        style = { bg: `$${bg}${key}` };
        output[`${bg}${key}`] = isFocusStyle ? { "&:focus, &:hover": style } : style;
      }
      style = { bg: `$${bg}A${key}` };
      output[`${bg}A${key}`] = isFocusStyle ? { "&:focus, &:hover": style } : style;
    });
  }
  if (!output.transparent) {
    style = { bg: "transparent" };
    output.transparent = isFocusStyle ? { "&:focus, &:hover": style } : style;
  }
  return output;
};
var getBorderColorReducer = (isFocusStyle = false) => (output, borderColor) => {
  const name = borderColor.toLowerCase();
  const isNeutral = name.includes("neutral");
  const isNeutralStatic = isNeutral && (name.includes("max") || name.includes("min"));
  const isStatus = !isNeutral && !!SemanticStaticColorName[borderColor];
  let style;
  if (isNeutralStatic || isStatus) {
    style = { borderColor: `$${borderColor}` };
    output[borderColor] = isFocusStyle ? { "&:focus, &:hover": style } : style;
  }
  if (!isStatus) {
    COLOR_KEYS.forEach((key) => {
      if (!isNeutralStatic) {
        style = { borderColor: `$${borderColor}${key}` };
        output[`${borderColor}${key}`] = isFocusStyle ? { "&:focus, &:hover": style } : style;
      }
      style = { borderColor: `$${borderColor}A${key}` };
      output[`${borderColor}A${key}`] = isFocusStyle ? { "&:focus, &:hover": style } : style;
    });
  }
  if (!output.transparent) {
    style = { borderColor: "transparent" };
    output.transparent = isFocusStyle ? { "&:focus, &:hover": style } : style;
  }
  return output;
};
var getTextColorReducer = (isFocusStyle = false) => (output, color) => {
  const isStatus = FULL_STATUS_COLOR_KEYS.includes(color);
  let style;
  if (isStatus) {
    style = { color: `$${color}` };
    output[color] = isFocusStyle ? { "&:focus, &:hover": style } : style;
  } else {
    COLOR_KEYS.forEach((key) => {
      style = { color: `$${color}${key}` };
      output[`${color}${key}`] = isFocusStyle ? { "&:focus, &:hover": style } : style;
    });
  }
  if (!output.transparent) {
    style = { color: "transparent" };
    output.transparent = isFocusStyle ? { "&:focus, &:hover": style } : style;
  }
  return output;
};
var bgColorReducer = getBgColorReducer();
var textColorReducer = getTextColorReducer();
var borderColorReducer = getBorderColorReducer();
var focusBorderReducer = getBorderColorReducer(true);
var focusBgReducer = getBgColorReducer(true);
var focusColorReducer = getTextColorReducer(true);
var getHoverColorProps = (value) => ({
  "&:focus, &:hover": {
    bg: value,
    color: `$text${capitalizeFirstLetter(value.replace("$", ""))}`,
    outline: "none"
  }
});
var focusButtonReducer = (output, color) => {
  const name = color.toLowerCase();
  const isNeutral = name.includes("neutral");
  const isNeutralStatic = isNeutral && (name.includes("max") || name.includes("min"));
  const isStatus = !isNeutral && !!SemanticStaticColorName[color];
  if (isNeutralStatic || isStatus) {
    output[color] = getHoverColorProps(`$${color}`);
  }
  if (!isStatus) {
    COLOR_KEYS.forEach((key) => {
      if (!isNeutralStatic) {
        output[`${color}${key}`] = getHoverColorProps(`$${color}${key}`);
      }
      output[`${color}A${key}`] = getHoverColorProps(`$${color}A${key}`);
    });
  }
  if (!output.transparent) {
    output.transparent = {
      "&:focus, &:hover": {
        bg: "transparent",
        color: "transparent",
        outline: "none"
      }
    };
  }
  return output;
};
var COLOR_VARIANTS = {
  bg: __spreadProps(__spreadValues({}, BG_COLOR_KEYS.reduce(bgColorReducer, {})), {
    alphaPattern: { bg: "alphaPattern" }
  }),
  color: __spreadProps(__spreadValues({}, TEXT_COLOR_KEYS.reduce(textColorReducer, {})), {
    neutralMax: { color: "$neutralMax" },
    neutralMin: { color: "$neutralMin" }
  }),
  borderColor: BG_COLOR_KEYS.reduce(borderColorReducer, {}),
  focusBorder: BG_COLOR_KEYS.reduce(focusBorderReducer, {}),
  focusButton: BG_COLOR_KEYS.reduce(focusButtonReducer, {}),
  focusBg: BG_COLOR_KEYS.reduce(focusBgReducer, {}),
  focusColor: __spreadProps(__spreadValues({}, TEXT_COLOR_KEYS.reduce(focusColorReducer, {})), {
    neutralMax: { "&:focus, &:hover": { color: "$neutralMax" } },
    neutralMin: { "&:focus, &:hover": { color: "$neutralMin" } }
  })
};
var BASE_VARIANTS = {
  shadow: {
    none: { boxShadow: "$none" },
    low: { boxShadow: "$low" },
    medium: { boxShadow: "$medium" },
    high: { boxShadow: "$high" },
    highSoft: { boxShadow: "$highSoft" }
  },
  position: {
    absolute: { position: "absolute" },
    fixed: { position: "fixed" },
    relative: { position: "relative" },
    sticky: { position: "sticky" }
  },
  transparent: { true: { opacity: 0 } },
  overflow: {
    auto: { overflow: "auto" },
    hidden: { overflow: "hidden" },
    scroll: { overflow: "scroll" }
  },
  overflowX: {
    auto: { overflowX: "auto" },
    hidden: { overflowX: "hidden" },
    scroll: { overflowX: "scroll" }
  },
  overflowY: {
    auto: { overflowY: "auto" },
    hidden: { overflowY: "hidden" },
    scroll: { overflowY: "scroll" }
  },
  top: generateVariantSequence(30, getSignedContentGetter("top"), -12),
  right: generateVariantSequence(30, getSignedContentGetter("right"), -12),
  bottom: generateVariantSequence(30, getSignedContentGetter("bottom"), -12),
  left: generateVariantSequence(30, getSignedContentGetter("left"), -12),
  fixedBottom: {
    true: { position: "fixed", left: 0, bottom: 0, right: 0 }
  },
  fixedTop: {
    true: { position: "fixed", left: 0, top: 0, right: 0 }
  },
  stickyBottom: {
    true: { position: "sticky", left: 0, bottom: 0, right: 0 }
  },
  stickyTop: {
    true: { position: "sticky", left: 0, top: 0, right: 0 }
  },
  lineHeight: {
    min: { lineHeight: "$min" },
    base: { lineHeight: "$base" },
    heading: { lineHeight: "$heading" },
    body: { lineHeight: "$body" },
    spaced: { lineHeight: "$spaced" },
    listItem: { lineHeight: "$listItem" },
    tight: { lineHeight: "$tight" },
    field: { lineHeight: "$field" },
    2: { lineHeight: "$2" },
    3: { lineHeight: "$3" },
    4: { lineHeight: "$4" },
    5: { lineHeight: "$5" },
    6: { lineHeight: "$6" },
    7: { lineHeight: "$7" },
    8: { lineHeight: "$8" },
    9: { lineHeight: "$9" },
    10: { lineHeight: "$10" },
    11: { lineHeight: "$11" },
    12: { lineHeight: "$12" },
    13: { lineHeight: "$13" },
    14: { lineHeight: "$14" }
  },
  p: __spreadValues(__spreadValues({}, getSemanticSizes("p")), generateVariantSequence(30, (n2) => ({ p: `$${n2}` }), 0)),
  pt: __spreadValues(__spreadValues({}, getSemanticSizes("pt")), generateVariantSequence(30, (n2) => ({ pt: `$${n2}` }), 0)),
  pb: __spreadValues(__spreadValues({}, getSemanticSizes("pb")), generateVariantSequence(30, (n2) => ({ pb: `$${n2}` }), 0)),
  pr: __spreadValues(__spreadValues({}, getSemanticSizes("pr")), generateVariantSequence(30, (n2) => ({ pr: `$${n2}` }), 0)),
  pl: __spreadValues(__spreadValues({}, getSemanticSizes("pl")), generateVariantSequence(30, (n2) => ({ pl: `$${n2}` }), 0)),
  px: __spreadValues(__spreadValues({}, getSemanticSizes("px")), generateVariantSequence(30, (n2) => ({ px: `$${n2}` }), 0)),
  py: __spreadValues(__spreadValues({}, getSemanticSizes("py")), generateVariantSequence(30, (n2) => ({ py: `$${n2}` }), 0)),
  m: __spreadValues(__spreadValues({}, getSemanticSizes("m")), generateVariantSequence(49, getSignedContentGetter("m"), -29)),
  mt: __spreadValues(__spreadValues({}, getSemanticSizes("mt")), generateVariantSequence(49, getSignedContentGetter("mt"), -29)),
  mb: __spreadValues(__spreadValues({}, getSemanticSizes("mb")), generateVariantSequence(49, getSignedContentGetter("mb"), -29)),
  mr: __spreadValues(__spreadValues({}, getSemanticSizes("mr")), generateVariantSequence(49, getSignedContentGetter("mr"), -29)),
  ml: __spreadValues(__spreadValues({}, getSemanticSizes("ml")), generateVariantSequence(49, getSignedContentGetter("ml"), -29)),
  mx: __spreadValues(__spreadValues({}, getSemanticSizes("mx")), generateVariantSequence(49, getSignedContentGetter("mx"), -29)),
  my: __spreadValues(__spreadValues({}, getSemanticSizes("my")), generateVariantSequence(49, getSignedContentGetter("my"), -29)),
  z: __spreadValues({
    max: { z: "$max" },
    min: { z: "$min" }
  }, generateVariantSequence(12, (n2) => ({ z: `$${n2}` }))),
  h: heightVariants$1,
  height: heightVariants$1,
  w: widthVariants$1,
  width: widthVariants$1,
  maxHeight: __spreadValues(__spreadValues({}, getSemanticSizes("maxHeight")), generateVariantSequence(30, (n2) => ({ maxHeight: `$${n2}` }), 0)),
  maxWidth: __spreadValues(__spreadValues({}, getSemanticSizes("maxWidth")), generateVariantSequence(30, (n2) => ({ maxWidth: `$${n2}` }), 0)),
  minHeight: __spreadValues(__spreadValues({}, getSemanticSizes("minHeight")), generateVariantSequence(30, (n2) => ({ minHeight: `$${n2}` }), 0)),
  minWidth: __spreadValues(__spreadValues({}, getSemanticSizes("minWidth")), generateVariantSequence(30, (n2) => ({ minWidth: `$${n2}` }), 0)),
  size: __spreadValues(__spreadValues({}, getSemanticSizes("size")), generateVariantSequence(30, (n2) => ({ h: `$${n2}`, w: `$${n2}` }), 0)),
  radius: __spreadValues(__spreadValues({}, generateSemanticRadii((k2) => ({ radius: `$${k2}` }))), generateVariantSequence(11, (n2) => ({ radius: `$${n2}` }), 0)),
  radiusTop: __spreadValues(__spreadValues({}, generateSemanticRadii((k2) => ({ radiusTop: `$${k2}` }))), generateVariantSequence(11, (n2) => ({ radiusTop: `$${n2}` }), 0)),
  radiusBottom: __spreadValues(__spreadValues({}, generateSemanticRadii((k2) => ({ radiusBottom: `$${k2}` }))), generateVariantSequence(11, (n2) => ({ radiusBottom: `$${n2}` }), 0)),
  radiusLeft: __spreadValues(__spreadValues({}, generateSemanticRadii((k2) => ({ radiusLeft: `$${k2}` }))), generateVariantSequence(11, (n2) => ({ radiusLeft: `$${n2}` }), 0)),
  radiusRight: __spreadValues(__spreadValues({}, generateSemanticRadii((k2) => ({ radiusRight: `$${k2}` }))), generateVariantSequence(11, (n2) => ({ radiusRight: `$${n2}` }), 0)),
  borderWidth: __spreadValues({
    px: { borderStyle: "solid", borderColor: "$none", borderWidth: "$px" },
    rem: { borderStyle: "solid", borderColor: "$none", borderWidth: "$rem" },
    base: { borderStyle: "solid", borderColor: "$none", borderWidth: "$base" },
    none: { borderStyle: "solid", borderColor: "$none", borderWidth: "$none" }
  }, generateVariantSequence(10, (n2) => ({ borderStyle: "solid", borderColor: "$none", borderWidth: `$${n2}` }), 0))
};
var TYPOGRAPHY_VARIANTS = {
  fontSize: __spreadProps(__spreadValues({}, generateVariantSequence(12, (n2) => ({
    fontSize: `$${n2} !important`
  }))), {
    base: { fontSize: "$base !important" },
    quote: { fontSize: "$quote !important" },
    h1: { fontSize: "$h1 !important" },
    h2: { fontSize: "$h2 !important" },
    h3: { fontSize: "$h3 !important" },
    h4: { fontSize: "$h4 !important" },
    h5: { fontSize: "$h5 !important" },
    h6: { fontSize: "$h6 !important" },
    p: { fontSize: "$p !important" },
    field: { fontSize: "$field !important" },
    fieldTiny: { fontSize: "$fieldTiny !important" },
    fieldSmall: { fontSize: "$fieldSmall !important" },
    fieldLarge: { fontSize: "$fieldLarge !important" },
    button: { fontSize: "$button !important" },
    buttonTiny: { fontSize: "$buttonTiny !important" },
    buttonSmall: { fontSize: "$buttonSmall !important" },
    buttonLarge: { fontSize: "$buttonLarge !important" },
    smallest: { fontSize: "$smallest !important" },
    small: { fontSize: "$small !important" },
    medium: { fontSize: "$medium !important" },
    large: { fontSize: "$large !important" },
    largest: { fontSize: "$largest !important" }
  }),
  fontWeight: __spreadProps(__spreadValues({}, generateVariantSequence(10, (n2) => ({ fontWeight: `$${n2} !important` }), 0)), {
    h1: { fontWeight: "$h1 !important" },
    h2: { fontWeight: "$h2 !important" },
    h3: { fontWeight: "$h3 !important" },
    h4: { fontWeight: "$h4 !important" },
    h5: { fontWeight: "$h5 !important" },
    h6: { fontWeight: "$h6 !important" },
    p: { fontWeight: "$p !important" },
    code: { fontWeight: "$code !important" },
    hairline: { fontWeight: "$hairline !important" },
    thin: { fontWeight: "$thin !important" },
    light: { fontWeight: "$light !important" },
    regular: { fontWeight: "$regular !important" },
    bold: { fontWeight: "$bold !important" },
    heavy: { fontWeight: "$heavy !important" },
    black: { fontWeight: "$black !important" }
  }),
  fontFamily: __spreadValues({
    body: { fontFamily: "$body" },
    button: { fontFamily: "$button" },
    heading: { fontFamily: "$heading" },
    code: { fontFamily: "$code" },
    quote: { fontFamily: "$quote" },
    systemSans: { fontFamily: "$systemSans" },
    systemSerif: { fontFamily: "$systemSerif" },
    systemMono: { fontFamily: "$systemMono" }
  }, [
    ...enumKeys(BodyFontFamily),
    ...enumKeys(HeadingFontFamily),
    ...enumKeys(CodeFontFamily)
  ].reduce((output, key) => {
    output[key] = { fontFamily: `$${key}"` };
    return output;
  }, {}))
};
var StyledBox = styled("section", {
  boxSizing: "border-box",
  variants: __spreadValues(__spreadValues({}, BASE_VARIANTS), COLOR_VARIANTS)
}, "Box");
var Box = getSemanticLayoutPrimitive(StyledBox);
var FLEX_STYLES = {
  display: "flex",
  variants: {
    wrap: {
      true: { flexWrap: "wrap" }
    },
    noWrap: {
      true: { flexWrap: "nowrap" }
    },
    wrapReverse: {
      true: { flexWrap: "wrap-reverse" }
    },
    alignContent: {
      center: { alignContent: "center" },
      end: { alignContent: "flex-end" },
      spaceAround: { alignContent: "space-around" },
      spaceBetween: { alignContent: "space-between" },
      start: { alignContent: "flex-start" },
      stretch: { alignContent: "stretch" }
    },
    justifyContent: {
      left: { justifyContent: "left" },
      right: { justifyContent: "right" },
      center: { justifyContent: "center" },
      end: { justifyContent: "flex-end" },
      spaceAround: { justifyContent: "space-around" },
      spaceBetween: { justifyContent: "space-between" },
      spaceEvenly: { justifyContent: "space-evenly" },
      start: { justifyContent: "flex-start" },
      stretch: { justifyContent: "stretch" }
    },
    alignItems: {
      baseline: { alignItems: "basline" },
      center: { alignItems: "center" },
      end: { alignItems: "flex-end" },
      start: { alignItems: "flex-start" },
      stretch: { alignItems: "stretch" }
    },
    gap: __spreadProps(__spreadValues({}, generateVariantSequence(13, (n2) => ({ gap: `$${n2}` }), 0)), {
      px: { gap: "$px" },
      rem: { gap: "$rem" },
      quarter: { gap: "$quarter" },
      third: { gap: "$third" },
      half: { gap: "$half" }
    }),
    columnGap: __spreadProps(__spreadValues({}, generateVariantSequence(13, (n2) => ({ columnGap: `$${n2}` }), 0)), {
      px: { columnGap: "$px" },
      rem: { columnGap: "$rem" },
      quarter: { columnGap: "$quarter" },
      third: { columnGap: "$third" },
      half: { columnGap: "$half" }
    }),
    rowGap: __spreadProps(__spreadValues({}, generateVariantSequence(13, (n2) => ({ rowGap: `$${n2}` }), 0)), {
      px: { rowGap: "$px" },
      rem: { rowGap: "$rem" },
      quarter: { rowGap: "$quarter" },
      third: { rowGap: "$third" },
      half: { rowGap: "$half" }
    })
  }
};
var getFlexStyles = () => FLEX_STYLES;
var StyledFlex = styled(Box, getFlexStyles(), "Flex");
var Flex = getSemanticLayoutPrimitive(StyledFlex);
var StyledColumn = styled(Flex, {
  flexDirection: "column"
}, "Column");
var Column = getSemanticLayoutPrimitive(StyledColumn);
var FLEX_ITEM_STYLES = {
  variants: {
    align: {
      baseline: { alignSelf: "baseline" },
      center: { alignSelf: "center" },
      end: { alignSelf: "end" },
      start: { alignSelf: "start" },
      stretch: { alignSelf: "stretch" }
    },
    basis: __spreadProps(__spreadValues({
      fill: { flexBasis: "fill" },
      maxContent: { flexBasis: "max-content" },
      minContent: { flexBasis: "min-content" },
      fitContent: { flexBasis: "fit-content" },
      "0": { flexBasis: 0 }
    }, generateVariantSequence(21, (n2) => ({
      flexBasis: `$sizes$${n2}`
    }))), {
      quarter: { flexBasis: "$sizes$quarter" },
      third: { flexBasis: "$sizes$third" },
      half: { flexBasis: "$sizes$half" },
      twoThirds: { flexBasis: "$sizes$twoThirds" },
      threeQuarters: { flexBasis: "$sizes$threeQuarters" },
      full: { flexBasis: "$sizes$full" }
    }),
    grow: generateVariantSequence(8, (n2) => ({
      flexGrow: n2
    })),
    shrink: generateVariantSequence(8, (n2) => ({ flexShrink: n2 }))
  }
};
var getFlexItemStyles = () => FLEX_ITEM_STYLES;
var StyledFlexItem = styled(Box, getFlexItemStyles(), "FlexItem");
var FlexItem = getSemanticLayoutPrimitive(StyledFlexItem);
var HORIZONTAL_ASIDE_NUMBERS = [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
var VERTICAL_ASIDE_NUMBERS = [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];
function getHorizontalPanel() {
  return HORIZONTAL_ASIDE_NUMBERS.reduce((output, panel) => {
    output[`left-${panel}`] = { gridTemplateColumns: `$${panel} 1fr` };
    output[`right-${panel}`] = { gridTemplateColumns: `1fr $${panel}` };
    return output;
  }, {});
}
function getVerticalPanel() {
  return VERTICAL_ASIDE_NUMBERS.reduce((output, panel) => {
    output[`top-${panel}`] = { gridTemplateRows: `$${panel} auto` };
    output[`bottom-${panel}`] = { gridTemplateRows: `auto $${panel}` };
    return output;
  }, {});
}
function getHorizontalPanels() {
  return HORIZONTAL_ASIDE_NUMBERS.reduce((output, firstPanel) => {
    HORIZONTAL_ASIDE_NUMBERS.forEach((lastPanel) => {
      output[`${firstPanel}-${lastPanel}`] = {
        gridTemplateColumns: `minmax(min($${firstPanel}, $quarter), $${firstPanel})
          minmax(min(max($${firstPanel}, $${lastPanel}), $half), 1fr)
          minmax(min($${lastPanel}, $quarter), $${lastPanel})`
      };
    });
    return output;
  }, {});
}
function getVerticalPanels() {
  return VERTICAL_ASIDE_NUMBERS.reduce((output, firstPanel) => {
    VERTICAL_ASIDE_NUMBERS.forEach((lastPanel) => {
      output[`${firstPanel}-${lastPanel}`] = {
        gridTemplateRows: `$${firstPanel} auto $${lastPanel}`
      };
    });
    return output;
  }, {});
}
function getHorizontalSplit() {
  return HORIZONTAL_ASIDE_NUMBERS.reduce((output, firstPanel) => {
    HORIZONTAL_ASIDE_NUMBERS.forEach((lastPanel) => {
      output[`${firstPanel}-${lastPanel}`] = {
        gridTemplateColumns: `$${firstPanel} $${lastPanel}`
      };
    });
    return output;
  }, {});
}
function getVerticalSplit() {
  return VERTICAL_ASIDE_NUMBERS.reduce((output, firstPanel) => {
    VERTICAL_ASIDE_NUMBERS.forEach((lastPanel) => {
      output[`${firstPanel}-${lastPanel}`] = {
        gridTemplateRows: `$${firstPanel} $${lastPanel}`
      };
    });
    return output;
  }, {});
}
var StyledGrid = styled(Box, {
  display: "grid",
  variants: {
    justifyItems: {
      center: { justifyItems: "center" },
      end: { justifyItems: "end" },
      start: { justifyItems: "start" },
      stretch: { justifyItems: "stretch" }
    },
    alignItems: {
      center: { alignItems: "center" },
      end: { alignItems: "end" },
      start: { alignItems: "start" },
      stretch: { alignItems: "stretch" }
    },
    placeItems: {
      center: { placeItems: "center" },
      centerEnd: { placeItems: "center end" },
      centerStart: { placeItems: "center start" },
      centerStretch: { placeItems: "center stretch" },
      endCenter: { placeItems: "end center" },
      end: { placeItems: "end" },
      endStart: { placeItems: "end start" },
      endStretch: { placeItems: "end stretch" },
      startCenter: { placeItems: "start center" },
      startEnd: { placeItems: "start end" },
      start: { placeItems: "start" },
      startStretch: { placeItems: "start stretch" },
      stretchCenter: { placeItems: "stretch center" },
      stretchEnd: { placeItems: "stretch end" },
      stretchStart: { placeItems: "stretch start" },
      stretch: { placeItems: "stretch" }
    },
    justifyContent: {
      left: { justifyContent: "left" },
      right: { justifyContent: "right" },
      center: { justifyContent: "center" },
      end: { justifyContent: "end" },
      spaceAround: { justifyContent: "space-around" },
      spaceBetween: { justifyContent: "space-between" },
      spaceEvenly: { justifyContent: "space-evenly" },
      start: { justifyContent: "start" },
      stretch: { justifyContent: "stretch" }
    },
    alignContent: {
      center: { alignContent: "center" },
      end: { alignContent: "end" },
      spaceAround: { alignContent: "space-around" },
      spaceBetween: { alignContent: "space-between" },
      spaceEvenly: { alignContent: "space-evenly" },
      start: { alignContent: "start" },
      stretch: { alignContent: "stretch" }
    },
    placeContent: {
      center: { placeContent: "center" },
      end: { placeContent: "end" },
      spaceAround: { placeContent: "space-around" },
      spaceBetween: { placeContent: "space-between" },
      spaceEvenly: { placeContent: "space-evenly" },
      start: { placeContent: "start" },
      stretch: { placeContent: "stretch" }
    },
    flow: {
      column: { gridAutoFlow: "column" },
      dense: { gridAutoFlow: "dense" },
      row: { gridAutoFlow: "row" }
    },
    repeat: generateVariantSequence(11, (n2) => ({ gridTemplate: `repeat(${n2}, 1fr) / repeat(${n2}, 1fr)` }), 2),
    columnRepeat: generateVariantSequence(11, (n2) => ({ gridTemplateColumns: `repeat(${n2}, 1fr)` }), 2),
    rowRepeat: generateVariantSequence(11, (n2) => ({ gridTemplateRows: `repeat(${n2}, 1fr)` }), 2),
    columnFill: generateVariantSequence(15, (n2) => ({ gridTemplateColumns: `repeat(auto-fill, minmax($sizes$${n2}, 1fr))` }), 4),
    rowFill: generateVariantSequence(15, (n2) => ({ gridTemplateRows: `repeat(auto-fill, minmax($sizes$${n2}, 1fr))` }), 4),
    columnFit: generateVariantSequence(15, (n2) => ({ gridTemplateColumns: `repeat(auto-fit, minmax($sizes$${n2}, 1fr))` }), 4),
    rowFit: generateVariantSequence(15, (n2) => ({ gridTemplateRows: `repeat(auto-fit, minmax($sizes$${n2}, 1fr))` }), 4),
    rowAuto: generateVariantSequence(15, (n2) => ({ gridAutoRows: `$sizes$${n2}` }), 4),
    gap: __spreadProps(__spreadValues({}, generateVariantSequence(13, (n2) => ({ gap: `$${n2}` }), 0)), {
      px: { gap: "$px" },
      rem: { gap: "$rem" },
      quarter: { gap: "$quarter" },
      third: { gap: "$third" },
      half: { gap: "$half" }
    }),
    columnGap: __spreadProps(__spreadValues({}, generateVariantSequence(13, (n2) => ({ columnGap: `$${n2}` }), 0)), {
      px: { columnGap: "$px" },
      rem: { columnGap: "$rem" },
      quarter: { columnGap: "$quarter" },
      third: { columnGap: "$third" },
      half: { columnGap: "$half" }
    }),
    rowGap: __spreadProps(__spreadValues({}, generateVariantSequence(13, (n2) => ({ rowGap: `$${n2}` }), 0)), {
      px: { rowGap: "$px" },
      rem: { rowGap: "$rem" },
      quarter: { rowGap: "$quarter" },
      third: { rowGap: "$third" },
      half: { rowGap: "$half" }
    }),
    horizontalPanel: __spreadProps(__spreadValues({}, getHorizontalPanel()), { stacked: { gridTemplateColumns: "1fr" } }),
    verticalPanel: getVerticalPanel(),
    horizontalPanels: __spreadProps(__spreadValues({}, getHorizontalPanels()), { stacked: { gridTemplateColumns: "1fr" } }),
    verticalPanels: getVerticalPanels(),
    horizontalSplit: __spreadProps(__spreadValues({}, getHorizontalSplit()), {
      stacked: { gridTemplateColumns: "1fr" },
      "half-half": { gridTemplateColumns: "$half $half" },
      "quarter-threeQuarters": { gridTemplateColumns: "$quarter $threeQuarters" },
      "threeQuarters-quarter": { gridTemplateColumns: "$threeQuarters $quarter" },
      "third-twoThirds": { gridTemplateColumns: "$third $twoThirds" },
      "twoThirds-third": { gridTemplateColumns: "$twoThirds $third" }
    }),
    verticalSplit: __spreadProps(__spreadValues({}, getVerticalSplit()), {
      "half-half": { gridTemplateRows: "$half $half" },
      "quarter-threeQuarters": { gridTemplateRows: "$quarter $threeQuarters" },
      "threeQuarters-quarter": { gridTemplateRows: "$threeQuarters $quarter" },
      "third-twoThirds": { gridTemplateRows: "$third $twoThirds" },
      "twoThirds-third": { gridTemplateRows: "$twoThirds $third" }
    })
  }
}, "Grid");
var Grid = getSemanticLayoutPrimitive(StyledGrid);
var StyledGridItem = styled(Box, {
  variants: {
    colSpan: {
      2: { gridColumn: "span 2" },
      3: { gridColumn: "span 3" },
      4: { gridColumn: "span 4" },
      5: { gridColumn: "span 5" }
    },
    rowSpan: {
      2: { gridRow: "span 2" },
      3: { gridRow: "span 3" },
      4: { gridRow: "span 4" },
      5: { gridRow: "span 5" }
    },
    justifySelf: {
      center: {
        justifySelf: "center"
      },
      end: {
        justifySelf: "end"
      },
      start: {
        justifySelf: "start"
      }
    },
    alignSelf: {
      center: {
        alignSelf: "center"
      },
      end: {
        alignSelf: "end"
      },
      start: {
        alignSelf: "start"
      }
    }
  }
}, "GridItem");
var GridItem = getSemanticLayoutPrimitive(StyledGridItem);
var TEXT_VARIANTS = __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, BASE_VARIANTS), COLOR_VARIANTS), TYPOGRAPHY_VARIANTS), {
  align: {
    center: { textAlign: "center" },
    left: { textAlign: "left" },
    right: { textAlign: "right" }
  },
  truncate: {
    true: {
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis"
    }
  },
  flat: {
    true: { my: "$none" }
  },
  spaced: generateVariantSequence(13, (n2) => ({
    my: `$${n2}`
  }), 0),
  italic: {
    true: { fontStyle: "italic" }
  },
  oblique: {
    true: { fontStyle: "oblique" }
  },
  capitalize: {
    true: { textTransform: "capitalize" }
  },
  lowercase: {
    true: { textTransform: "lowercase" }
  },
  uppercase: {
    true: { textTransform: "uppercase" }
  }
});
var getTextVariants = () => TEXT_VARIANTS;
var TEXT_STYLES = {
  boxSizing: "border-box",
  fontSize: "$p",
  fontWeight: "$4",
  lineHeight: "$body",
  mb: "$6",
  mt: "$none",
  "blockquote&": {
    fontSize: "$quote"
  },
  "&:last-child": {
    mb: "0"
  },
  variants: getTextVariants()
};
var getTextStyles = () => TEXT_STYLES;
var StyledText = styled("p", getTextStyles(), "Text");
var Text = getSemanticTextPrimitive(StyledText);
var StyledHeading = styled("h1", {
  boxSizing: "border-box",
  color: "$defaultHeading",
  fontSize: "$h1",
  fontWeight: "$h1",
  lineHeight: "$heading",
  my: "$6",
  "&:first-child": {
    mt: "0"
  },
  "& + &": {
    mt: "0"
  },
  "&, & > *": {
    fontFamily: "$heading"
  },
  [`h1&`]: {
    "&, & > *": {
      fontSize: "$h1",
      fontWeight: "$h1"
    }
  },
  [`h2&`]: {
    "&, & > *": {
      fontSize: "$h2",
      fontWeight: "$h2"
    }
  },
  [`h3&`]: {
    "&, & > *": {
      fontSize: "$h3",
      fontWeight: "$h3"
    }
  },
  [`h4&`]: {
    "&, & > *": {
      fontSize: "$h4",
      fontWeight: "$h4"
    }
  },
  [`h5&`]: {
    "&, & > *": {
      fontSize: "$h5",
      fontWeight: "$h5"
    }
  },
  [`h6&`]: {
    "&, & > *": {
      fontSize: "$h6",
      fontWeight: "$h6"
    }
  },
  variants: __spreadProps(__spreadValues({}, getTextStyles().variants), {
    colorScheme: {
      primary: {
        color: "$primary10"
      },
      secondary: {
        color: "$secondary10"
      },
      neutral: {
        color: "$neutral10"
      }
    },
    contrast: {
      high: {
        color: "$secondary11"
      },
      max: {
        color: "$secondary12"
      }
    }
  }),
  compoundVariants: [
    {
      contrast: "high",
      colorScheme: "primary",
      css: {
        color: "$primary11"
      }
    },
    {
      contrast: "max",
      colorScheme: "primary",
      css: {
        color: "$primary12"
      }
    },
    {
      contrast: "high",
      colorScheme: "secondary",
      css: {
        color: "$secondary11"
      }
    },
    {
      contrast: "max",
      colorScheme: "secondary",
      css: {
        color: "$secondary12"
      }
    },
    {
      contrast: "high",
      colorScheme: "neutral",
      css: {
        color: "$neutral11"
      }
    },
    {
      contrast: "max",
      colorScheme: "neutral",
      css: {
        color: "$neutral12"
      }
    }
  ]
}, "Heading");
var Heading = getSemanticHeadingPrimitive(StyledHeading);
var Anchor = styled("a", {
  $$insetShadowSize: `-3${STYLE_UNIT}`,
  $$focusBgShadowSize: `1.25em`,
  boxSizing: "border-box",
  fontSize: "$p",
  fontWeight: "$6",
  radius: "$none",
  textDecoration: "none",
  transition: "box-shadow $faster, color $faster",
  "&:focus": {
    outline: "none"
  },
  "&:hover": {
    transition: "box-shadow $fast, color $fast"
  },
  variants: __spreadProps(__spreadValues({}, getTextVariants()), {
    colorScheme: {
      primary: {
        boxShadow: `inset 0 $$insetShadowSize 0 $colors$primary5`,
        color: "$primary9",
        "li > &, nav &, button &, h1 &, h2 &, h3 &, h4 &, h5 &, h6 &": {
          boxShadow: "$none"
        },
        "&:focus": {
          boxShadow: `inset 0 $$focusBgShadowSize 0 $colors$primary9`,
          "&, & code": { color: "$textPrimary9" }
        },
        "&:hover": {
          boxShadow: `inset 0 $$focusBgShadowSize 0 $colors$primary5`,
          color: "$primary12"
        }
      },
      secondary: {
        boxShadow: `inset 0 $$insetShadowSize 0 $colors$secondary5`,
        color: "$secondary9",
        "li > &, nav &, button &, h1 &, h2 &, h3 &, h4 &, h5 &, h6 &": {
          boxShadow: "$none"
        },
        "&:focus": {
          boxShadow: `inset 0 $$focusBgShadowSize 0 $colors$secondary9`,
          "&, & code": { color: "$textSecondary9" }
        },
        "&:hover": {
          boxShadow: `inset 0 $$focusBgShadowSize 0 $colors$secondary5`,
          color: "$secondary12"
        }
      }
    },
    contrast: {
      high: {
        color: "$secondary10"
      },
      max: {
        color: "$secondary11"
      }
    },
    basic: {
      true: {
        "&, &:focus, &:hover": {
          boxShadow: "$none"
        },
        "&:focus": {
          outline: "2rem solid $colors$secondary9"
        }
      }
    },
    reset: {
      true: {
        "&, &:focus, &:hover": {
          boxShadow: "$none",
          outline: "none"
        }
      }
    }
  }),
  compoundVariants: [
    {
      contrast: "high",
      colorScheme: "primary",
      css: {
        color: "$primary10"
      }
    },
    {
      contrast: "max",
      colorScheme: "primary",
      css: {
        color: "$primary11"
      }
    },
    {
      contrast: "high",
      colorScheme: "secondary",
      css: {
        color: "$secondary10"
      }
    },
    {
      contrast: "max",
      colorScheme: "secondary",
      css: {
        color: "$secondary11"
      }
    }
  ],
  defaultVariants: {
    colorScheme: "primary"
  }
}, "Anchor");
var FlexList = styled("ul", __spreadProps(__spreadValues({}, getFlexStyles()), {
  listStyle: "none",
  m: "$none",
  p: "$none"
}), "FlexList");
var FlexListItem = styled("li", getFlexItemStyles(), "FlexListItem");
var LIST_STYLES = {
  boxSizing: "border-box",
  mb: "$6",
  mt: "$none",
  "&:last-child": {
    mb: "$none"
  },
  variants: __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, BASE_VARIANTS), COLOR_VARIANTS), TYPOGRAPHY_VARIANTS), {
    align: {
      center: { textAlign: "center" },
      left: { textAlign: "left" },
      right: { textAlign: "right" }
    },
    reset: {
      true: {
        listStyle: "none",
        m: "$none",
        p: "$none"
      }
    },
    flat: {
      true: { my: "$none" }
    },
    gap: generateVariantSequence(13, (n2) => ({
      "& > li": {
        my: `$${n2}`
      },
      "& > li:first-child": {
        mt: `$none`
      },
      "& > li-last-child": {
        mb: `$none`
      }
    }), 0),
    italic: {
      true: { fontStyle: "italic" }
    },
    oblique: {
      true: { fontStyle: "oblique" }
    },
    capitalize: {
      true: { textTransform: "capitalize" }
    },
    lowercase: {
      true: { textTransform: "lowercase" }
    },
    uppercase: {
      true: { textTransform: "uppercase" }
    },
    type: {
      circle: { listStyleType: "circle" },
      disc: { listStyleType: "disc" },
      square: { listStyleType: "square" },
      armenian: { listStyleType: "armenian" },
      cjkIdeographic: { listStyleType: "cjk-ideographic" },
      decimal: { listStyleType: "decimal" },
      decimalLeadingZero: { listStyleType: "decimal-leading-zero" },
      georgian: { listStyleType: "georgian" },
      hebrew: { listStyleType: "hebrew" },
      hiragana: { listStyleType: "hiragana" },
      hiraganaIroha: { listStyleType: "hiragana-iroha" },
      katakana: { listStyleType: "katakana" },
      katakanaIroha: { listStyleType: "katakana-iroha" },
      lowerAlpha: { listStyleType: "lower-alpha" },
      lowerGreek: { listStyleType: "lower-greek" },
      lowerLatin: { listStyleType: "lower-latin" },
      lowerRoman: { listStyleType: "lower-roman" },
      upperAlpha: { listStyleType: "upper-alpha" },
      upperGreek: { listStyleType: "upper-greek" },
      upperLatin: { listStyleType: "upper-latin" },
      upperRoman: { listStyleType: "upper-roman" }
    },
    position: {
      inside: { listStylePosition: "inside" },
      outside: { listStylePosition: "outside" }
    }
  })
};
var getListStyles = () => LIST_STYLES;
var List = styled("ul", getListStyles(), "List");
var ListItem = styled("li", __spreadProps(__spreadValues({}, getTextStyles()), {
  lineHeight: "$listItem"
}), "ListItem");
var OList = styled("ol", getListStyles(), "OList");
var StyledRow = styled(Flex, {
  flexDirection: "row"
}, "Row");
var Row = getSemanticLayoutPrimitive(StyledRow);
var RowItem = FlexItem;
function useButton(props, variantProps, styleOverrides, defaultStyles, name = "Button", outerRef, options = {}) {
  var _b, _c, _d, _e, _f, _g;
  const _a22 = props, {
    active = false,
    disabled = false,
    loading = false,
    onPress = () => void 0,
    submit = false,
    type = "button",
    tooltip,
    longPressDescription,
    dangerouslyHideTooltipHint,
    dangerouslySkipDisabledInfo = false,
    excludeFromTabOrder = false
  } = _a22, outerProps = __objRest(_a22, [
    "active",
    "disabled",
    "loading",
    "onPress",
    "submit",
    "type",
    "tooltip",
    "longPressDescription",
    "dangerouslyHideTooltipHint",
    "dangerouslySkipDisabledInfo",
    "excludeFromTabOrder"
  ]);
  const isDisabled = !!props["aria-disabled"] || disabled || loading;
  const isLoading = loading && !props["aria-disabled"] && !disabled;
  const ariaLabel = props["aria-label"] || typeof tooltip === "string" && tooltip.length > 0 ? tooltip : void 0;
  const tooltipContent = isLoading || dangerouslySkipDisabledInfo ? null : tooltip || props["aria-label"];
  const hasTooltip = !!tooltipContent;
  const showOnTouch = isDisabled;
  const ref = React4.useRef(null);
  const { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
  const isLTR = direction === "ltr";
  const { activeTheme, darkTheme: darkTheme2 } = useTheme();
  const darkClass = darkTheme2 == null ? void 0 : darkTheme2.className;
  const { isDark } = useColors();
  const [isDarkTheme, setIsDarkTheme] = React4.useState(isDark || !!darkClass && !!((_c = (_b = ref.current) == null ? void 0 : _b.closest) == null ? void 0 : _c.call(_b, `.${darkClass}`)));
  React4.useEffect(() => {
    var _a3, _b2;
    setIsDarkTheme(isDark || !!darkClass && !!((_b2 = (_a3 = ref.current) == null ? void 0 : _a3.closest) == null ? void 0 : _b2.call(_a3, `.${darkClass}`)));
  }, [isDark, ref.current, darkClass]);
  const pressHandler = React4.useCallback((event) => {
    if (!isDisabled) {
      onPress(event);
    }
  }, [onPress, isDisabled]);
  const { isOpen, triggerProps, triggerRef, layerProps } = useTooltip({
    hasTooltip,
    showOnTouch,
    description: longPressDescription
  });
  const { colorScheme, variant, size, shape, propClass } = variantProps;
  const styles = styleOverrides != null ? styleOverrides : {};
  const buttonStyles2 = (styleOverrides == null ? void 0 : styleOverrides.Button) ? styleOverrides == null ? void 0 : styleOverrides.Button : styles;
  const isDefaultTactile = ((_d = buttonStyles2.defaultVariants) == null ? void 0 : _d["variant"]) === "tactile" || ((_e = defaultStyles == null ? void 0 : defaultStyles.defaultVariants) == null ? void 0 : _e["variant"]) === "tactile";
  const isDefaultSolid = ((_f = buttonStyles2.defaultVariants) == null ? void 0 : _f["variant"]) === "solid" || ((_g = defaultStyles == null ? void 0 : defaultStyles.defaultVariants) == null ? void 0 : _g["variant"]) === "solid";
  const isTactile = isDefaultTactile && !variant || variant === "tactile";
  const isSolid = isDefaultSolid && !variant || variant === "solid";
  const varShiftX = isTactile ? "2rem" : "0rem";
  const varShiftY = isTactile ? "4rem" : "0rem";
  const isActive = active || String(propClass).toLocaleLowerCase().includes("active");
  const isFilledBg = isTactile || isSolid;
  const baseHintOpacity = isDarkTheme ? 0.8 : 0.5;
  const pMod = isDarkTheme ? 0.065 : 0.08;
  const nMod = isDarkTheme ? -0.6 : -0.25;
  const activeMod = isFilledBg ? pMod * 5 : pMod * 3;
  const hintMod = {
    active: isActive ? activeMod : 0,
    disabled: isDisabled ? nMod : 0,
    solid: isFilledBg && !isDisabled ? nMod / 1.5 : 0
  };
  const hintColor = colorScheme === "secondary" ? `secondary9` : `primary9`;
  const variantColor = isFilledBg && !isActive ? `neutralMin` : hintColor;
  const tooltipHintBg = isDisabled ? `neutralMax` : variantColor;
  const tooltipHintOpacity = Math.min(1, baseHintOpacity + hintMod.active + hintMod.disabled + hintMod.solid);
  const baseRadius = getRootValueFromTheme(activeTheme, "radii", "base").replace("rem", "").replace("px", "");
  const buttonRadius = getRootValueFromTheme(activeTheme, "radii", "button").replace("rem", "").replace("px", "");
  const isRounded = parseInt(buttonRadius) > 10 || parseInt(baseRadius) > 10;
  const isHintCentered = options.tooltipHintX === "center" || shape === "pill" || isRounded;
  const shiftSmall = isHintCentered ? "1.5rem" : "2rem";
  const shiftMedium = isHintCentered ? "2rem" : "3rem";
  const shiftSide = size === "small" || size === "tiny" ? shiftSmall : shiftMedium;
  const hintShiftX = isHintCentered ? "calc(50% - ($$size / 2))" : shiftSide;
  const isTopHint = options.tooltipHintY === "top";
  const hintShiftY = shiftSide;
  const { isFocusVisible, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({});
  const { buttonProps } = $701a24aa0da5b062$export$ea18c227d4417cc3(__spreadProps(__spreadValues({}, props), {
    excludeFromTabOrder,
    onPress: pressHandler,
    "aria-label": ariaLabel,
    isDisabled: false
  }), ref);
  const activeClassName = active ? "active " : "";
  const disabledClassName = isDisabled ? "disabled " : "";
  const className = `${activeClassName}${disabledClassName}`;
  const darkVariant = isDefaultTactile && !variant ? "tactileDarkMode" : swapVariantValues(variant, "tactile", "tactileDarkMode");
  const safeVariant = isDarkTheme ? darkVariant : swapVariantValues(variant, "tactileDarkMode", "tactile");
  return {
    isDisabled,
    isLoading,
    isFocusVisible,
    buttonProps: $3ef42575df84b30b$export$9d1611c77c2fe928(outerProps, buttonProps, triggerProps, hoverProps, focusProps, { className, "aria-disabled": isDisabled, variant: safeVariant }, { className: name }, { className: isFocusVisible ? "focused" : "" }, { className: isHovered ? "hovered" : "" }),
    buttonRef: mergeRefs2([ref, outerRef, triggerRef]),
    buttonType: submit ? "submit" : type,
    longPressHint: /* @__PURE__ */ React4.createElement(Box, {
      className: "tooltip-hint-wrapper",
      position: "absolute",
      css: {
        left: "calc(($borderWidths$base / 2) * -1)",
        top: "calc(($borderWidths$base / 2) * -1)",
        h: "calc($full + $borderWidths$base)",
        w: "calc($full + $borderWidths$base)",
        opacity: 0.5,
        overflow: isHintCentered ? "hidden" : "visible",
        pointerEvents: "none"
      }
    }, /* @__PURE__ */ React4.createElement(Box, {
      as: "span",
      className: "tooltip-hint",
      bg: tooltipHintBg,
      radius: "round",
      position: "absolute",
      css: {
        $$size: "4px",
        $$shiftX: `calc(${hintShiftX} + ${varShiftX})`,
        $$shiftY: `calc(${hintShiftY} + ${varShiftY})`,
        display: "none",
        h: "$$size",
        w: "$$size",
        left: isLTR ? "$$shiftX" : "unset",
        opacity: tooltipHintOpacity,
        right: isLTR ? "unset" : "$$shiftX",
        bottom: isTopHint ? "unset" : "$$shiftY",
        top: isTopHint ? "$$shiftY" : "unset",
        "@touch": {
          display: hasTooltip && !dangerouslyHideTooltipHint ? "block" : "none"
        }
      }
    })),
    tooltip: /* @__PURE__ */ React4.createElement(Tooltip, {
      content: tooltipContent,
      isOpen,
      layerProps
    })
  };
}
var spin = keyframes({
  "0%": { transform: "rotate(0deg)" },
  "50%": { transform: "rotate(180deg)" },
  "100%": { transform: "rotate(360deg)" }
});
var heightVariants = generateVariantSequence(30, (n2) => ({
  h: `$${n2}`,
  "& > svg": { h: `$${n2}` }
}), 0);
var widthVariants = generateVariantSequence(30, (n2) => ({
  w: `$${n2}`,
  "& > svg": { w: `$${n2}` }
}), 0);
var iconStyles = {
  lineHeight: "$min",
  variants: __spreadProps(__spreadValues({}, BASE_VARIANTS), {
    h: heightVariants,
    height: heightVariants,
    w: widthVariants,
    width: widthVariants,
    inline: {
      true: { display: "inline-block" }
    },
    verticalAlign: {
      top: { verticalAlign: "top" },
      bottom: { verticalAlign: "bottom" },
      middle: { verticalAlign: "middle" },
      baseline: { verticalAlign: "baseline" },
      textBottom: { verticalAlign: "text-bottom" },
      textTop: { verticalAlign: "text-top" }
    },
    maxHeight: generateVariantSequence(30, (n2) => ({
      maxHeight: `$${n2}`,
      "& > svg": { maxHeight: `$${n2}` }
    }), 0),
    maxWidth: generateVariantSequence(30, (n2) => ({
      maxWidth: `$${n2}`,
      "& > svg": { maxWidth: `$${n2}` }
    }), 0),
    minHeight: generateVariantSequence(30, (n2) => ({
      minHeight: `$${n2}`,
      "& > svg": { minHeight: `$${n2}` }
    }), 0),
    minWidth: generateVariantSequence(30, (n2) => ({
      minWidth: `$${n2}`,
      "& > svg": { minWidth: `$${n2}` }
    }), 0),
    size: generateVariantSequence(30, (n2) => ({
      h: `$${n2}`,
      w: `$${n2}`,
      "& > svg": { size: `$${n2}` }
    }), 0),
    padded: {
      small: {
        mx: "$3",
        "&:first-child": { ml: "0" },
        "&:last-child": { mr: "0" }
      },
      medium: {
        mx: "$4",
        "&:first-child": { ml: "0" },
        "&:last-child": { mr: "0" }
      },
      large: {
        mx: "$6",
        "&:first-child": { ml: "0" },
        "&:last-child": { mr: "0" }
      }
    },
    spin: {
      faster: { animation: `${spin} $transitions$faster infinite linear` },
      fast: { animation: `${spin} $transitions$fast infinite linear` },
      slow: { animation: `${spin} $transitions$slow infinite linear` },
      slower: { animation: `${spin} $transitions$slower infinite linear` },
      slowest: { animation: `${spin} $transitions$slowest infinite linear` }
    },
    noPointerEvents: {
      true: { pointerEvents: "none" }
    },
    forbidden: {
      true: { cursor: "not-allowed" }
    },
    color: COLOR_VARIANTS.color
  })
};
var IconEl = loadable_esm_default(() => import("/build/_shared/index.esm-OXAXVIXX.js"), {
  resolveComponent: (comps, { iconName }) => {
    return getWrapper(comps[iconName], iconName);
  }
});
var getWrapper = (El, iconName) => {
  const Wrapper = () => /* @__PURE__ */ React4.createElement(El, null);
  Wrapper.displayName = `IconElement.${iconName}`;
  return Wrapper;
};
function getIcon(styleOverrides = {}, name = "Icon") {
  const StyledIcon = styled("span", iconStyles, styleOverrides, name);
  function Icon2(_a22) {
    var _b = _a22, {
      type,
      name: name2,
      element
    } = _b, iconProps = __objRest(_b, [
      "type",
      "name",
      "element"
    ]);
    const { direction } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    const icon = React4.useMemo(() => {
      if (name2) {
        const i18nName = typeof name2 === "string" ? name2 : name2[direction];
        if (!i18nName) {
          return null;
        }
        const iconName = type === IconType.line ? LineIcon[i18nName] : FillIcon[i18nName];
        return /* @__PURE__ */ React4.createElement(IconEl, {
          key: iconName,
          iconName
        });
      }
      return element;
    }, [type, name2, element]);
    return !icon ? null : /* @__PURE__ */ React4.createElement(StyledIcon, __spreadValues({}, iconProps), icon);
  }
  Icon2.displayName = "Icon";
  return Icon2;
}
var Icon = getIcon();
var cssGhostPrimary = {
  bg: "$none",
  borderColor: "$none",
  color: "$$primaryBgHover",
  "&.active": {
    bg: "$$primaryBgActive",
    borderColor: "$$primaryBgActive",
    color: "$$primaryTextActive"
  },
  "&.focused, &.hovered": {
    bg: "$$primaryBgHover",
    borderColor: "$$primaryBgHover",
    color: "$$primaryTextHover"
  },
  "&:active": {
    bg: "$$primaryBgPressed",
    borderColor: "$$primaryBgPressed",
    color: "$$primaryTextPressed"
  },
  "&.disabled": {
    bg: "$$disabledBg",
    borderColor: "$$disabledBg",
    color: "$$disabledText"
  }
};
var cssGhostSecondary = {
  bg: "$none",
  borderColor: "$none",
  color: "$$secondaryBgHover",
  "&.active": {
    bg: "$$secondaryBgActive",
    borderColor: "$$secondaryBgActive",
    color: "$$secondaryTextActive"
  },
  "&.focused, &.hovered": {
    bg: "$$secondaryBgHover",
    borderColor: "$$secondaryBgHover",
    color: "$$secondaryTextHover"
  },
  "&:active": {
    bg: "$$secondaryBgPressed",
    borderColor: "$$secondaryBgPressed",
    color: "$$secondaryTextPressed"
  },
  "&.disabled": {
    bg: "$$disabledBg",
    borderColor: "$$disabledBg",
    color: "$$disabledText"
  }
};
var cssSolidPrimary = {
  bg: "$$primaryBg",
  borderColor: "$$primaryBg",
  color: "$$primaryText",
  "&.active": {
    bg: "$$primaryBgActiveSolid",
    borderColor: "$$primaryBgActiveSolid",
    color: "$$primaryTextActiveSolid"
  },
  "&.focused, &.hovered": {
    bg: "$$primaryBgHover",
    borderColor: "$$primaryBgHover",
    color: "$$primaryTextHover"
  },
  "&:active": {
    bg: "$$primaryBgPressed",
    borderColor: "$$primaryBgPressed",
    color: "$$primaryTextPressed"
  },
  "&.disabled": {
    bg: "$$disabledBg",
    borderColor: "$$disabledBg",
    color: "$$disabledText"
  }
};
var cssSolidSecondary = {
  bg: "$$secondaryBg",
  borderColor: "$$secondaryBg",
  color: "$$secondaryText",
  "&.active": {
    bg: "$$secondaryBgActiveSolid",
    borderColor: "$$secondaryBgActiveSolid",
    color: "$$secondaryTextActiveSolid"
  },
  "&.focused, &.hovered": {
    bg: "$$secondaryBgHover",
    borderColor: "$$secondaryBgHover",
    color: "$$secondaryTextHover"
  },
  "&:active": {
    bg: "$$secondaryBgPressed",
    borderColor: "$$secondaryBgPressed",
    color: "$$secondaryTextPressed"
  },
  "&.disabled": {
    bg: "$$disabledBg",
    borderColor: "$$disabledBg",
    color: "$$disabledText"
  }
};
var cssOutlinePrimary = {
  bg: "$$outlineBg",
  borderColor: "$$primaryBg",
  color: "$$primaryTextOutline",
  "&.active": {
    bg: "$$primaryBgActive",
    borderColor: "$$primaryBg",
    color: "$$primaryTextActive"
  },
  "&.focused, &.hovered": {
    bg: "$$primaryBgHover",
    borderColor: "$$primaryBgHover",
    color: "$$primaryTextHover"
  },
  "&:active": {
    bg: "$$primaryBgPressed",
    borderColor: "$$primaryBgPressed",
    color: "$$primaryTextPressed"
  },
  "&.disabled": {
    bg: "$$disabledBg",
    borderColor: "$$disabledBorder",
    color: "$$disabledText"
  }
};
var cssOutlineSecondary = {
  bg: "$$outlineBg",
  borderColor: "$$secondaryBg",
  color: "$$secondaryTextOutline",
  "&.active": {
    bg: "$$secondaryBgActive",
    borderColor: "$$secondaryBg",
    color: "$$secondaryTextActive"
  },
  "&.focused, &.hovered": {
    bg: "$$secondaryBgHover",
    borderColor: "$$secondaryBgHover",
    color: "$$secondaryTextHover"
  },
  "&:active": {
    bg: "$$secondaryBgPressed",
    borderColor: "$$secondaryBgPressed",
    color: "$$secondaryTextPressed"
  },
  "&.disabled": {
    bg: "$$disabledBg",
    borderColor: "$$disabledBorder",
    color: "$$disabledText"
  }
};
var cssTactileDisabled = {
  borderColor: "$neutral5",
  borderTopColor: "$$disabledBg",
  boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$neutralA5,
    inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMinA9,
    inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMinA7`
};
var cssTactileDisabledDarkMode = {
  borderColor: "$neutralMinA7",
  borderTopColor: "$neutralMinA4",
  boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$neutralMinA7,
    inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutral5,
    inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutral4`
};
var buttonStyles$1 = {
  $$primaryBg: "$colors$primary9",
  $$primaryBgHover: "$colors$primary10",
  $$primaryBgPressed: "$colors$primary11",
  $$primaryBgActive: "$colors$primary6",
  $$primaryBgActiveSolid: "$colors$primary8",
  $$primaryText: "$colors$textPrimary9",
  $$primaryTextHover: "$colors$textPrimary10",
  $$primaryTextPressed: "$colors$textPrimary11",
  $$primaryTextActive: "$colors$textPrimary6",
  $$primaryTextActiveSolid: "$colors$textPrimary8",
  $$secondaryBg: "$colors$secondary9",
  $$secondaryBgHover: "$colors$secondary10",
  $$secondaryBgPressed: "$colors$secondary11",
  $$secondaryBgActive: "$colors$secondary6",
  $$secondaryBgActiveSolid: "$colors$secondary8",
  $$secondaryText: "$colors$textSecondary9",
  $$secondaryTextHover: "$colors$textSecondary10",
  $$secondaryTextPressed: "$colors$textSecondary11",
  $$secondaryTextActive: "$colors$textSecondary6",
  $$secondaryTextActiveSolid: "$colors$textSecondary8",
  $$subtleBg: "$colors$neutralMaxA2",
  $$outlineBg: "$colors$neutralMinA4",
  $$primaryTextOutline: "$$primaryBgHover",
  $$secondaryTextOutline: "$$secondaryBgHover",
  $$disabledBg: "$colors$neutral4",
  $$disabledBorder: "$colors$neutral6",
  $$disabledText: "$colors$neutral10",
  $$buttonTinyPy: "$sizes$buttonBasePy",
  $$buttonSmallPy: "calc($sizes$buttonBasePy + $sizes$1)",
  $$buttonMediumPy: "calc($sizes$buttonBasePy + $sizes$2)",
  $$buttonLargePy: "calc($sizes$buttonBasePy + $sizes$3)",
  alignItems: "center",
  borderStyle: "solid",
  borderWidth: "$borderWidths$2",
  boxSizing: "content-box",
  display: "flex",
  fontWeight: "$6",
  h: "$lineHeights$field",
  justifyContent: "center",
  lineHeight: "$button",
  minWidth: "$lineHeights$field",
  position: "relative",
  radius: "$button",
  textAlign: "center",
  "a&": {
    textDecoration: "none"
  },
  "&:focus": {
    outline: "none"
  },
  "&.disabled": {
    cursor: "not-allowed"
  },
  variants: {
    square: {
      true: { lineHeight: "$min" }
    },
    shape: {
      rounded: { radius: "$rounded" },
      rectangular: { radius: "$rectangular" },
      field: { radius: "$field" },
      pill: { radius: "$pill" }
    },
    size: {
      tiny: {
        fontSize: "$buttonTiny",
        px: "$buttonBasePx",
        py: "$$buttonTinyPy"
      },
      small: {
        fontSize: "$buttonSmall",
        letterSpacing: "$tight",
        px: "$buttonBasePx",
        py: "$$buttonSmallPy"
      },
      medium: {
        fontSize: "$button",
        letterSpacing: "$tight",
        px: "calc($buttonBasePx + $2)",
        py: "$$buttonMediumPy"
      },
      large: {
        fontSize: "$buttonLarge",
        letterSpacing: "$tight",
        px: "calc($buttonBasePx + $3)",
        py: "$$buttonLargePy"
      }
    },
    variant: {
      tactile: {},
      solid: cssSolidPrimary,
      ghost: cssGhostPrimary,
      subtle: __spreadProps(__spreadValues({}, cssGhostPrimary), {
        bg: "$$subtleBg",
        color: "$primary10"
      }),
      outline: cssOutlinePrimary
    },
    colorScheme: {
      primary: cssOutlinePrimary,
      secondary: cssOutlineSecondary
    },
    position: BASE_VARIANTS.position,
    top: BASE_VARIANTS.top,
    bottom: BASE_VARIANTS.bottom,
    left: BASE_VARIANTS.left,
    right: BASE_VARIANTS.right,
    h: BASE_VARIANTS.h,
    w: BASE_VARIANTS.w,
    maxHeight: BASE_VARIANTS.maxHeight,
    maxWidth: BASE_VARIANTS.maxWidth,
    minWidth: BASE_VARIANTS.minWidth,
    radius: BASE_VARIANTS.radius,
    radiusTop: BASE_VARIANTS.radiusTop,
    radiusBottom: BASE_VARIANTS.radiusBottom,
    radiusLeft: BASE_VARIANTS.radiusLeft,
    radiusRight: BASE_VARIANTS.radiusRight,
    p: BASE_VARIANTS.p,
    px: BASE_VARIANTS.px,
    py: BASE_VARIANTS.py,
    pt: BASE_VARIANTS.pt,
    pb: BASE_VARIANTS.pb,
    pl: BASE_VARIANTS.pl,
    pr: BASE_VARIANTS.pr,
    m: BASE_VARIANTS.m,
    mx: BASE_VARIANTS.mx,
    my: BASE_VARIANTS.my,
    mt: BASE_VARIANTS.mt,
    mb: BASE_VARIANTS.mb,
    ml: BASE_VARIANTS.ml,
    mr: BASE_VARIANTS.mr
  },
  compoundVariants: [
    {
      square: true,
      size: "tiny",
      css: { p: "$$buttonTinyPy" }
    },
    {
      square: true,
      size: "small",
      css: { p: "$$buttonSmallPy" }
    },
    {
      square: true,
      size: "medium",
      css: { p: "$$buttonMediumPy" }
    },
    {
      square: true,
      size: "large",
      css: { p: "$$buttonLargePy" }
    },
    {
      variant: "tactile",
      colorScheme: "primary",
      css: __spreadProps(__spreadValues({}, cssSolidPrimary), {
        borderColor: "$primary10",
        borderTopColor: "$primary9",
        boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$primary10,
          inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMinA5,
          inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMinA3`,
        "&.active": __spreadProps(__spreadValues({}, cssSolidPrimary["&.active"]), {
          borderColor: "$primaryA7",
          borderTopColor: "$primaryA4",
          borderBottomColor: "$primaryA8",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$primaryA8,
            inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMinA6,
            inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMinA3`
        }),
        "&.focused, &.hovered": __spreadProps(__spreadValues({}, cssSolidPrimary["&.focused, &.hovered"]), {
          borderColor: "$primaryA11",
          borderTopColor: "$primary10",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$primaryA11,
          inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMinA6,
          inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMinA3`
        }),
        "&:active": __spreadProps(__spreadValues({}, cssSolidPrimary["&:active"]), {
          borderColor: "$primaryA12",
          borderTopColor: "$primary11",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$primaryA12,
          inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMinA7,
          inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMinA4`
        }),
        "&, &.focused, &.hovered, &:active": {
          "&.disabled": __spreadValues(__spreadValues({}, cssSolidPrimary["&.disabled"]), cssTactileDisabled)
        }
      })
    },
    {
      variant: "tactile",
      colorScheme: "secondary",
      css: __spreadProps(__spreadValues({}, cssSolidSecondary), {
        borderColor: "$secondary10",
        borderTopColor: "$secondary9",
        boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$secondary10,
          inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMinA5,
          inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMinA3`,
        "&.active": __spreadProps(__spreadValues({}, cssSolidSecondary["&.active"]), {
          borderColor: "$secondaryA7",
          borderTopColor: "$secondaryA4",
          borderBottomColor: "$secondaryA8",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$secondaryA8,
            inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMinA6,
            inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMinA3`
        }),
        "&.focused, &.hovered": __spreadProps(__spreadValues({}, cssSolidSecondary["&.focused, &.hovered"]), {
          borderColor: "$secondaryA11",
          borderTopColor: "$secondary10",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$secondaryA11,
          inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMinA6,
          inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMinA3`
        }),
        "&:active": __spreadProps(__spreadValues({}, cssSolidSecondary["&:active"]), {
          borderColor: "$secondaryA12",
          borderTopColor: "$secondary11",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$secondaryA12,
          inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMinA7,
          inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMinA4`
        }),
        "&, &.focused, &.hovered, &:active": {
          "&.disabled": __spreadValues(__spreadValues({}, cssSolidSecondary["&.disabled"]), cssTactileDisabled)
        }
      })
    },
    {
      variant: "tactileDarkMode",
      colorScheme: "primary",
      css: __spreadProps(__spreadValues({}, cssSolidPrimary), {
        borderColor: "$neutralMinA7",
        borderTopColor: "$neutralMinA5",
        boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$neutralMinA7,
          inset 0 $sizes$buttonTactileHighlight 0 0 $colors$primaryA10,
          inset 0 0 0 $sizes$buttonTactileHighlight $colors$primaryA9`,
        "&.active, &.focused, &.hovered": {
          borderColor: "$neutralMinA7",
          borderTopColor: "$neutralMinA5",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$neutralMinA7,
            inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMaxA3,
            inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMaxA1`
        },
        "&:active": __spreadProps(__spreadValues({}, cssSolidPrimary["&:active"]), {
          borderColor: "$neutralMinA8",
          borderTopColor: "$neutralMinA6",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$neutralMinA8,
            inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMaxA4,
            inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMaxA2`
        }),
        "&, &.focused, &.hovered, &:active": {
          "&.disabled": __spreadValues(__spreadValues({}, cssSolidPrimary["&.disabled"]), cssTactileDisabledDarkMode)
        }
      })
    },
    {
      variant: "tactileDarkMode",
      colorScheme: "secondary",
      css: __spreadProps(__spreadValues({}, cssSolidSecondary), {
        borderColor: "$neutralMinA7",
        borderTopColor: "$neutralMinA5",
        boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$neutralMinA7,
          inset 0 $sizes$buttonTactileHighlight 0 0 $colors$secondaryA10,
          inset 0 0 0 $sizes$buttonTactileHighlight $colors$secondaryA9`,
        "&.active, &.focused, &.hovered": {
          borderColor: "$neutralMinA7",
          borderTopColor: "$neutralMinA5",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$neutralMinA7,
            inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMaxA3,
            inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMaxA1`
        },
        "&:active": __spreadProps(__spreadValues({}, cssSolidSecondary["&:active"]), {
          borderColor: "$neutralMinA8",
          borderTopColor: "$neutralMinA6",
          boxShadow: `inset 0 calc($sizes$buttonTactileShadow * -1 + $borderWidths$2) 0 0 $colors$neutralMinA8,
            inset 0 $sizes$buttonTactileHighlight 0 0 $colors$neutralMaxA4,
            inset 0 0 0 $sizes$buttonTactileHighlight $colors$neutralMaxA2`
        }),
        "&, &.focused, &.hovered, &:active": {
          "&.disabled": __spreadValues(__spreadValues({}, cssSolidSecondary["&.disabled"]), cssTactileDisabledDarkMode)
        }
      })
    },
    {
      variant: "solid",
      colorScheme: "primary",
      css: cssSolidPrimary
    },
    {
      variant: "solid",
      colorScheme: "secondary",
      css: cssSolidSecondary
    },
    {
      variant: "ghost",
      colorScheme: "primary",
      css: cssGhostPrimary
    },
    {
      variant: "ghost",
      colorScheme: "secondary",
      css: cssGhostSecondary
    },
    {
      variant: "subtle",
      colorScheme: "primary",
      css: __spreadProps(__spreadValues({}, cssGhostPrimary), {
        bg: "$$subtleBg",
        color: "$primary10"
      })
    },
    {
      variant: "subtle",
      colorScheme: "secondary",
      css: __spreadProps(__spreadValues({}, cssGhostSecondary), {
        bg: "$$subtleBg",
        color: "$secondary10"
      })
    }
  ],
  defaultVariants: {
    colorScheme: "primary",
    size: "medium",
    variant: "solid"
  }
};
var offsetStyles = { variants: {} };
var ringStyles = __spreadProps(__spreadValues({
  $$extraRadiusButton: "min($radii$button * 999, $borderWidths$8 / 4)",
  $$extraRadiusRounded: "min($radii$rounded * 999, $borderWidths$8 / 4)",
  $$extraRadiusRectangular: "min($radii$rectangular * 999, $borderWidths$8 / 4)",
  $$extraRadiusField: "min($radii$field * 999, $borderWidths$8 / 4)",
  $$extraRadiusPill: "min($radii$pill * 999, $borderWidths$8 / 4)",
  $$disabledBorder: "$colors$neutral9",
  $$extraSpace: "max($sizes$4, $borderWidths$8)"
}, animate({
  "0%": {
    opacity: "0"
  },
  "100%": {
    opacity: "1"
  }
})), {
  border: "$borderWidths$2 $borderStyles$focusRing $primary10",
  h: "calc($full + $$extraSpace)",
  left: "calc($$extraSpace / -2)",
  pointerEvents: "none",
  position: "absolute",
  radius: "calc($button + $$extraRadiusButton)",
  top: "calc($$extraSpace / -2)",
  w: "calc($full + $$extraSpace)",
  ".disabled &": {
    borderColor: "$$disabledBorder"
  },
  zIndex: "$3",
  variants: {
    shape: {
      rounded: { radius: "calc($rounded + $$extraRadiusRounded)" },
      rectangular: { radius: "calc($rectangular + $$extraRadiusRectangular)" },
      field: { radius: "calc($field + $$extraRadiusField)" },
      pill: { radius: "calc($pill + $$extraRadiusPill)" }
    },
    colorScheme: {
      primary: {
        borderColor: "$primary10",
        ".disabled &": {
          borderColor: "$$disabledBorder"
        }
      },
      secondary: {
        borderColor: "$secondary10",
        ".disabled &": {
          borderColor: "$$disabledBorder"
        }
      }
    }
  }
});
function getButton(styleOverrides, name = "Button", options = {}) {
  const styleKeys = styleOverrides ? Object.keys(styleOverrides) : [];
  const ovrKeys = ["Button", "FocusRing", "Pseudo"];
  const isCss = styleKeys.some((key) => !ovrKeys.includes(key));
  const ovr = isCss ? {
    Button: styleOverrides,
    FocusRing: {},
    Pseudo: {}
  } : {
    Button: (styleOverrides == null ? void 0 : styleOverrides.Button) || {},
    FocusRing: (styleOverrides == null ? void 0 : styleOverrides.FocusRing) || {},
    Pseudo: (styleOverrides == null ? void 0 : styleOverrides.Pseudo) || {}
  };
  const hasPseudoStyles = !!(styleOverrides == null ? void 0 : styleOverrides.Pseudo);
  const ringVariantsKeys = Object.keys(ringStyles.variants || {}).concat(Object.keys(ovr.FocusRing.variants || {}));
  const FocusRing = styled("div", ringStyles, ovr.FocusRing, `${name}_FocusRing`);
  const offsetVariantsKeys = Object.keys(offsetStyles.variants || {}).concat(Object.keys(ovr.Pseudo.variants || {}));
  const Pseudo = styled("div", offsetStyles, ovr.Pseudo, `${name}_Pseudo`);
  const StyledButton = styled("button", buttonStyles$1, ovr.Button, name);
  function Button22(props, outerRef) {
    const _a22 = props, {
      hideTextWhenLoading = false,
      prefixIconName,
      prefixIconType,
      suffixIconName,
      suffixIconType
    } = _a22, outerProps = __objRest(_a22, [
      "hideTextWhenLoading",
      "prefixIconName",
      "prefixIconType",
      "suffixIconName",
      "suffixIconType"
    ]);
    const { colorScheme, variant, size, shape, className: propClass } = outerProps;
    const {
      isLoading,
      isFocusVisible,
      buttonProps,
      buttonRef,
      buttonType,
      longPressHint,
      tooltip
    } = useButton(outerProps, {
      colorScheme,
      variant,
      size,
      shape,
      propClass
    }, styleOverrides, buttonStyles$1, name, outerRef, options);
    const ringVariants = Object.keys(props).reduce((output, key) => {
      if (ringVariantsKeys.includes(key)) {
        output[key] = props[key];
      }
      return output;
    }, {});
    const offsetVariants = !hasPseudoStyles ? {} : Object.keys(props).reduce((output, key) => {
      if (offsetVariantsKeys.includes(key)) {
        output[key] = props[key];
      }
      return output;
    }, {});
    const startIconName = isLoading ? LOADER_ICON_NAME : prefixIconName;
    const endIconName = isLoading ? LOADER_ICON_NAME : suffixIconName;
    const prefixIcon = !startIconName ? null : /* @__PURE__ */ React4.createElement(Icon, {
      name: startIconName,
      type: prefixIconType,
      "aria-hidden": true,
      spin: isLoading ? "slower" : void 0
    });
    const suffixIcon = !endIconName ? null : /* @__PURE__ */ React4.createElement(Icon, {
      name: endIconName,
      type: suffixIconType,
      "aria-hidden": true,
      spin: isLoading ? "slower" : void 0
    });
    const showLeftIcon = typeof prefixIconName === "object" || !suffixIcon && prefixIcon;
    const showRightIcon = typeof suffixIconName === "object" || !prefixIcon && suffixIcon;
    const showLoadingIcon = isLoading && !showLeftIcon && !showRightIcon;
    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(StyledButton, __spreadProps(__spreadValues({}, buttonProps), {
      ref: buttonRef,
      type: buttonType
    }), hasPseudoStyles && /* @__PURE__ */ React4.createElement(Pseudo, __spreadValues({}, offsetVariants)), isFocusVisible && /* @__PURE__ */ React4.createElement(FocusRing, __spreadValues({}, ringVariants)), showLeftIcon && prefixIcon, !(hideTextWhenLoading && showLoadingIcon) && /* @__PURE__ */ React4.createElement(Box, {
      as: "span",
      w: "full",
      mx: "3"
    }, props.children), showLoadingIcon && /* @__PURE__ */ React4.createElement(Icon, {
      name: LOADER_ICON_NAME,
      "aria-hidden": true,
      spin: "slower",
      mx: hideTextWhenLoading ? "half" : void 0,
      noPointerEvents: true
    }), showRightIcon && suffixIcon, longPressHint), tooltip);
  }
  Button22.displayName = "Button";
  return React4.forwardRef(Button22);
}
var Button = getButton();
function getIconButton(styleOverrides, name = "IconButton", options = {}) {
  const styleKeys = styleOverrides ? Object.keys(styleOverrides) : [];
  const ovrKeys = ["Button", "FocusRing", "Pseudo"];
  const isCss = styleKeys.some((key) => !ovrKeys.includes(key));
  const ovr = isCss ? {
    Button: styleOverrides,
    FocusRing: {},
    Pseudo: {}
  } : {
    Button: (styleOverrides == null ? void 0 : styleOverrides.Button) || {},
    FocusRing: (styleOverrides == null ? void 0 : styleOverrides.FocusRing) || {},
    Pseudo: (styleOverrides == null ? void 0 : styleOverrides.Pseudo) || {}
  };
  const hasPseudoStyles = !!(styleOverrides == null ? void 0 : styleOverrides.Pseudo);
  const ringVariantsKeys = Object.keys(ringStyles.variants || {}).concat(Object.keys(ovr.FocusRing.variants || {}));
  const FocusRing = styled("div", ringStyles, ovr.FocusRing, `${name}_FocusRing`);
  const offsetVariantsKeys = Object.keys(offsetStyles.variants || {}).concat(Object.keys(ovr.Pseudo.variants || {}));
  const Pseudo = styled("div", offsetStyles, ovr.Pseudo, `${name}_Pseudo`);
  const StyledIconButton = styled("button", buttonStyles$1, ovr.Button, name);
  function IconButton22(props, outerRef) {
    const _a22 = props, { iconName, iconType } = _a22, outerProps = __objRest(_a22, ["iconName", "iconType"]);
    const { colorScheme, variant, size, shape, className: propClass } = outerProps;
    const {
      isLoading,
      isFocusVisible,
      buttonProps,
      buttonRef,
      buttonType,
      longPressHint,
      tooltip
    } = useButton(outerProps, {
      colorScheme,
      variant,
      size,
      shape,
      propClass
    }, styleOverrides, buttonStyles$1, name, outerRef, options);
    const ringVariants = Object.keys(outerProps).reduce((output, key) => {
      if (ringVariantsKeys.includes(key)) {
        output[key] = outerProps[key];
      }
      return output;
    }, {});
    const offsetVariants = !hasPseudoStyles ? {} : Object.keys(outerProps).reduce((output, key) => {
      if (offsetVariantsKeys.includes(key)) {
        output[key] = outerProps[key];
      }
      return output;
    }, {});
    const finalIconName = isLoading ? LOADER_ICON_NAME : iconName;
    const icon = React4.useMemo(() => /* @__PURE__ */ React4.createElement(Icon, {
      name: finalIconName,
      type: iconType,
      spin: isLoading ? "slower" : void 0
    }), [finalIconName, iconType, isLoading]);
    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(StyledIconButton, __spreadProps(__spreadValues({}, buttonProps), {
      ref: buttonRef,
      type: buttonType
    }), hasPseudoStyles && /* @__PURE__ */ React4.createElement(Pseudo, __spreadValues({}, offsetVariants)), isFocusVisible && /* @__PURE__ */ React4.createElement(FocusRing, __spreadValues({}, ringVariants)), icon, longPressHint), tooltip);
  }
  IconButton22.displayName = "IconButton";
  return React4.forwardRef(IconButton22);
}
var IconButton = getIconButton();
var tooltipStyles = {
  bg: "$neutral11",
  radius: "$tooltip",
  boxShadow: "$medium",
  color: "$textNeutral11",
  fontSize: "$small",
  lineHeight: "$listItem",
  maxWidth: "$18",
  position: "$absolute",
  px: "calc($tooltipBaseP + $2)",
  py: "$tooltipBaseP",
  zIndex: "$max"
};
var tooltipArrowStyles = {
  pointerEvents: "none"
};
function getTooltip(styleOverrides = {}, name = "Tooltip", options) {
  const {
    backgroundColorKey = "neutral11",
    borderColorKey,
    borderWidthKey,
    arrowAngle = 50,
    arrowSize = 6,
    arrowRoundness = 1
  } = options || {};
  const StyledTooltip = styled(Text, tooltipStyles, {
    bg: `$${backgroundColorKey}`,
    color: `$text${capitalizeFirstLetter(backgroundColorKey)}`
  }, styleOverrides, name);
  const StyledArrow = styled(Arrow, tooltipArrowStyles, `${name}_Arrow`);
  const StyledAnimation = styled("div", __spreadValues({}, animate({
    "0%": {
      opacity: "0",
      transform: "translate3d(0, 100%, 0)"
    },
    "100%": {
      opacity: "1",
      transform: "translate3d(0, 0, 0)"
    }
  })));
  function Tooltip2({
    layerProps,
    content,
    isOpen = false
  }) {
    var _a22, _b, _c;
    const { activeTheme } = useTheme();
    const arrowBg = (_a22 = activeTheme.colors[backgroundColorKey]) == null ? void 0 : _a22.value;
    const arrowBorder = borderColorKey ? (_b = activeTheme.colors[borderColorKey]) == null ? void 0 : _b.value : void 0;
    const arrowBorderWidth = borderWidthKey ? (_c = activeTheme.borderWidths[String(borderWidthKey)]) == null ? void 0 : _c.value : void 0;
    const { layerProps: innerLayerProps, arrowProps, renderLayer } = layerProps;
    return isOpen && !!content ? renderLayer(/* @__PURE__ */ React4.createElement(StyledAnimation, null, /* @__PURE__ */ React4.createElement(StyledTooltip, __spreadValues({
      as: "span",
      borderWidth: borderColorKey ? "2" : "none",
      borderColor: borderColorKey
    }, innerLayerProps), content, /* @__PURE__ */ React4.createElement(StyledArrow, __spreadValues({
      backgroundColor: arrowBg,
      borderColor: arrowBorder,
      borderWidth: arrowBorderWidth,
      size: arrowSize,
      roundness: arrowRoundness,
      angle: arrowAngle
    }, arrowProps))))) : null;
  }
  Tooltip2.displayName = "Tooltip";
  return Tooltip2;
}
var Tooltip = getTooltip();
var textFieldStyles = {
  $$extraIconPadding: "$sizes$6",
  $$primaryColor: "$colors$primary9",
  $$secondaryColor: "$colors$secondary9",
  $$errorColor: "$colors$errorForeground",
  $$disabledBorder: "$colors$neutral4",
  $$disabledFocusBorder: "$colors$neutral9",
  $$disabledText: "$colors$neutralMaxA10",
  $$fieldTinyPy: "$sizes$buttonBasePy",
  $$fieldSmallPy: "calc($sizes$buttonBasePy + $sizes$1)",
  $$fieldMediumPy: "calc($sizes$buttonBasePy + $sizes$2)",
  $$fieldLargePy: "calc($sizes$buttonBasePy + $sizes$3)",
  borderColor: "$neutral7",
  borderStyle: "solid",
  borderWidth: "$2",
  boxSizing: "content-box",
  caretColor: "$neutralMax",
  color: "$neutralMaxA10",
  fontFamily: "$body",
  fontWeight: "$6",
  lineHeight: "$field",
  height: "$6",
  minWidth: "$16",
  outlineColor: "$none",
  radius: "$field",
  transition: "border-color $fast, outline-color $fast",
  "&::placeholder": {
    fontFamily: "$body",
    fontWeight: "$4"
  },
  "&:focus": {
    outline: "none"
  },
  ".focused > &": {
    outlineOffset: "$sizes$1",
    outlineStyle: "$borderStyles$focusRing",
    outlineWidth: "$borderWidths$focusRing"
  },
  ".focused > &, .hovered > &": {
    borderColor: "$$primaryColor"
  },
  ".disabled > &": {
    borderColor: "$$disabledBorder",
    caretColor: "$none",
    color: "$$disabledText",
    cursor: "not-allowed",
    fontWeight: "$4",
    "&::selection": { color: "$neutralMaxA10" }
  },
  ".focused:not(.disabled) > &": {
    color: "$neutralMaxA11"
  },
  ".focused.disabled > &": { outlineColor: "$$disabledFocusBorder" },
  variants: {
    contrast: {
      low: {
        bg: "$neutralMin",
        borderColor: "$neutral4",
        "&:-webkit-autofill": {
          "&, &:hover, &:focus, &:active": {
            WebkitBoxShadow: "0 0 0 $sizes$12 $colors$neutralMin inset !important",
            WebkitTextFillColor: "$colors$neutralMaxA10"
          }
        },
        color: "$neutralMaxA10",
        "&::placeholder": { color: "$neutralMaxA10" },
        ".disabled > &": {
          "&::selection": { bg: "$neutralMin", color: "$neutralMaxA10" }
        }
      },
      medium: {
        bg: "$neutral3",
        borderColor: "$neutral6",
        "&:-webkit-autofill": {
          "&, &:hover, &:focus, &:active": {
            WebkitBoxShadow: "0 0 0 $sizes$12 $colors$neutral3 inset !important",
            WebkitTextFillColor: "$colors$neutralMaxA10"
          }
        },
        "&::placeholder": { color: "$neutralMaxA10" },
        ".disabled > &": {
          "&::selection": { bg: "$neutral3" }
        }
      },
      high: {
        bg: "$neutral5",
        borderColor: "$neutral7",
        "&:-webkit-autofill": {
          "&, &:hover, &:focus, &:active": {
            WebkitBoxShadow: "0 0 0 $sizes$12 $colors$neutral5 inset !important",
            WebkitTextFillColor: "$colors$neutralMax"
          }
        },
        color: "$neutralMax",
        "&::placeholder": { color: "$neutralMax" },
        ".disabled > &": {
          "&::selection": { bg: "$neutral5", color: "$neutralMax" }
        }
      }
    },
    shape: {
      rounded: { radius: "$rounded" },
      rectangular: { radius: "$rectangular" },
      field: { radius: "$field" },
      pill: { radius: "$pill" }
    },
    size: {
      tiny: {
        fontSize: "$fieldTiny",
        lineHeight: "calc($field + $fontSizes$fieldTiny / $fontSizes$base)",
        px: "$buttonBasePx",
        py: "$$fieldTinyPy",
        ".hasIcon &": {
          pr: "calc($buttonBasePx + $$extraIconPadding)"
        }
      },
      small: {
        fontSize: "$fieldSmall",
        letterSpacing: "$tight",
        px: "$buttonBasePx",
        py: "$$fieldSmallPy",
        ".hasIcon &": {
          pr: "calc($buttonBasePx + $$extraIconPadding)"
        }
      },
      medium: {
        fontSize: "$field",
        lineHeight: "calc($field + $fontSizes$fieldSmall / $fontSizes$base)",
        letterSpacing: "$tight",
        px: "calc($buttonBasePx + $2)",
        py: "$$fieldMediumPy",
        ".hasIcon &": {
          pr: "calc($buttonBasePx + $2 + $$extraIconPadding)"
        }
      },
      large: {
        fontSize: "$fieldLarge",
        lineHeight: "calc($field + $fontSizes$fieldLarge / $fontSizes$base)",
        letterSpacing: "$tight",
        px: "calc($buttonBasePx + $3)",
        py: "$$fieldLargePy",
        ".hasIcon &": {
          pr: "calc($buttonBasePx + $3 + $$extraIconPadding)"
        }
      }
    },
    minWidth: BASE_VARIANTS.minWidth,
    variant: {
      nested: {
        mt: "$4",
        "&::placeholder": { color: "$none !important" },
        ".disabled > &": { fontWeight: "$5" }
      },
      stacked: {
        mt: "$1"
      }
    },
    borderless: {
      true: {
        ".focused > &, .hovered > &": { borderColor: "$$primaryColor" },
        ".disabled > &": { borderColor: "$neutral3" }
      }
    },
    colorScheme: {
      primary: {
        ".focused:not(.disabled) > &": { outlineColor: "$$primaryColor" },
        ".focused > &, .hovered > &": { borderColor: "$$primaryColor" },
        ".hovered:not(.disabled) > &": { color: "$$primaryColor" },
        "&::selection": { bg: "$$primaryColor", color: "$neutralMin" },
        "&:-webkit-autofill": {
          "&, &:hover, &:focus, &:active": {
            "&::selection": { WebkitTextFillColor: "$colors$neutralMin" }
          }
        },
        ".disabled > &": {
          borderColor: "$$disabledBorder",
          ".focused&, .hovered&": { borderColor: "$$disabledFocusBorder" }
        }
      },
      secondary: {
        ".focused:not(.disabled) > &": { outlineColor: "$$secondaryColor" },
        ".focused > &, .hovered > &": { borderColor: "$$secondaryColor" },
        ".hovered:not(.disabled) > &": { color: "$$secondaryColor" },
        "&::selection": { bg: "$$secondaryColor", color: "$neutralMin" },
        "&:-webkit-autofill": {
          "&, &:hover, &:focus, &:active": {
            "&::selection": { WebkitTextFillColor: "$colors$neutralMin" }
          }
        },
        ".disabled > &": {
          borderColor: "$$disabledBorder",
          ".focused&, .hovered&": { borderColor: "$$disabledFocusBorder" }
        }
      },
      error: {
        ".focused:not(.disabled) > &": { outlineColor: "$$errorColor" },
        ".focused > &, .hovered > &": { borderColor: "$$errorColor" },
        ".hovered:not(.disabled) > &": { color: "$$errorColor" },
        "&::selection": { bg: "$$errorColor", color: "$neutralMin" },
        "&:-webkit-autofill": {
          "&, &:hover, &:focus, &:active": {
            "&::selection": { WebkitTextFillColor: "$colors$neutralMin" }
          }
        },
        ".disabled > &": {
          borderColor: "$$disabledBorder",
          ".focused&, .hovered&": { borderColor: "$$disabledFocusBorder" }
        }
      }
    }
  },
  compoundVariants: [
    {
      borderless: true,
      colorScheme: "primary",
      css: {
        ".disabled > &": {
          borderColor: "$neutral3"
        }
      }
    },
    {
      borderless: true,
      colorScheme: "secondary",
      css: {
        ".disabled > &": {
          borderColor: "$neutral3"
        }
      }
    },
    {
      borderless: true,
      colorScheme: "error",
      css: {
        ".disabled > &": {
          borderColor: "$neutral3"
        }
      }
    },
    {
      borderless: true,
      contrast: "low",
      css: {
        borderColor: "$neutralMin",
        ".disabled > &": {
          borderColor: "$neutralMin"
        }
      }
    },
    {
      borderless: true,
      contrast: "medium",
      css: {
        borderColor: "$neutral3",
        ".disabled > &": {
          borderColor: "$neutral3"
        }
      }
    },
    {
      borderless: true,
      contrast: "high",
      css: {
        borderColor: "$neutral5",
        ".disabled > &": {
          borderColor: "$neutral5"
        }
      }
    },
    {
      colorScheme: "primary",
      contrast: "high",
      css: {
        ".focused:not(.disabled) > &, .hovered:not(.disabled) > &": {
          borderColor: "$primary10",
          color: "$primary10"
        },
        "&::selection": { bg: "$primary10", color: "$neutralMin" }
      }
    },
    {
      colorScheme: "secondary",
      contrast: "high",
      css: {
        ".focused:not(.disabled) > &, .hovered:not(.disabled) > &": {
          borderColor: "$secondary10",
          color: "$secondary10"
        },
        "&::selection": { bg: "$secondary10", color: "$neutralMin" }
      }
    },
    {
      colorScheme: "error",
      contrast: "high",
      css: {
        ".focused:not(.disabled) > &, .hovered:not(.disabled) > &": {
          borderColor: "$errorForegroundMax",
          color: "$errorForegroundMax"
        },
        "&::selection": { bg: "$errorForegroundMax", color: "$neutralMin" }
      }
    }
  ],
  defaultVariants: {
    colorScheme: "primary",
    size: "medium",
    variant: "nested",
    contrast: "medium"
  }
};
var wrapperStyles = {
  gap: "$1",
  mb: "$2",
  position: "relative",
  w: "$full",
  "& + .fieldWrapper": { mt: "$none" },
  variants: {
    variant: {
      nested: {
        "& + button, & + footer, & + section, & + div": { mt: "$4" }
      },
      stacked: {
        "& + button, & + footer, & + section, & + div": { mt: "$6" }
      }
    }
  },
  defaultVariants: {
    variant: "nested"
  }
};
var labelStyles = {
  $$nestedPx: "max($sizes$3, min($radii$field, calc($sizes$2 + $sizes$1)))",
  color: "$neutralMaxA10",
  fontSize: "$fieldSmall",
  fontWeight: "$5",
  lineHeight: "$label",
  overflow: "hidden",
  textOverflow: "ellipsis",
  transition: "border-color $fast",
  w: "$full",
  whiteSpace: "nowrap",
  ".disabled > &": {
    cursor: "not-allowed",
    fontWeight: "$4"
  },
  variants: {
    contrast: {
      low: {
        color: "$neutralMaxA10"
      },
      medium: {},
      high: {
        color: "$neutralMax"
      }
    },
    colorScheme: {
      primary: {
        ".focused:not(.disabled) > &, .hovered:not(.disabled) > &": {
          color: "$primary10"
        }
      },
      secondary: {
        ".focused:not(.disabled) > &, .hovered:not(.disabled) > &": {
          color: "$secondary10"
        }
      },
      error: {
        ".focused:not(.disabled) > &, .hovered:not(.disabled) > &": {
          color: "$errorForeground"
        }
      }
    },
    variant: {
      nested: {
        $$pt: "calc($sizes$2 - min($lineHeights$modifier, $sizes$rem))",
        $$ptShift: "calc($$pt / 2)",
        bg: "$neutral3",
        position: "absolute",
        pt: "$$pt",
        px: "calc($$nestedPx + $borderWidths$2)",
        radius: "min($field, $rounded * 2)",
        top: "calc((($sizes$full - $sizes$4) / 2) + $sizes$4 - $$ptShift)",
        transform: "translateY(-50%)",
        transition: "top $fast, transform $fast",
        w: "$auto",
        ".hasValue &, .focused:not(.disabled) &": {
          fontSize: "$fieldTiny",
          top: "calc($4 - $$pt)"
        }
      },
      stacked: {}
    },
    size: {
      tiny: { left: "calc($sizes$buttonBasePx - $$nestedPx)" },
      small: { left: "calc($sizes$buttonBasePx - $$nestedPx)" },
      medium: { left: "calc($sizes$buttonBasePx + $sizes$2 - $$nestedPx)" },
      large: { left: "calc($sizes$buttonBasePx + $sizes$3 - $$nestedPx)" }
    }
  },
  compoundVariants: [
    {
      variant: "nested",
      contrast: "low",
      css: {
        bg: "$neutralMin"
      }
    },
    {
      variant: "nested",
      contrast: "high",
      css: {
        bg: "$neutral5"
      }
    },
    {
      colorScheme: "primary",
      contrast: "high",
      css: {
        ".focused:not(.disabled) > &, .hovered:not(.disabled) > &": {
          borderColor: "$primary10",
          color: "$primary10"
        }
      }
    },
    {
      colorScheme: "secondary",
      contrast: "high",
      css: {
        ".focused:not(.disabled) > &, .hovered:not(.disabled) > &": {
          borderColor: "$secondary10",
          color: "$secondary10"
        }
      }
    },
    {
      colorScheme: "error",
      contrast: "high",
      css: {
        ".focused:not(.disabled) > &, .hovered:not(.disabled) > &": {
          borderColor: "$errorForegroundMax",
          color: "$errorForegroundMax"
        }
      }
    }
  ],
  defaultVariants: {
    colorScheme: "primary",
    variant: "nested",
    size: "medium",
    contrast: "medium"
  }
};
var errorStyles = {
  color: "$errorForeground",
  display: "inline-block",
  fontSize: "$fieldTiny",
  fontWeight: "$4",
  lineHeight: "$5",
  maxWidth: "$full",
  py: "$none",
  pr: "min($radii$field, $4)",
  variants: {
    size: {
      tiny: { px: "$buttonBasePx" },
      small: { px: "$buttonBasePx" },
      medium: { px: "calc($buttonBasePx + $2)" },
      large: { px: "calc($buttonBasePx + $3)" }
    }
  },
  defaultVariants: {
    size: "medium"
  }
};
var descriptionStyles = __spreadProps(__spreadValues({}, errorStyles), {
  color: "$neutralMaxA10",
  fontWeight: "$4"
});
function useField(props, fieldProps, ref) {
  const {
    label,
    description,
    error,
    errorOnEmpty,
    disabled = false,
    required = false,
    loading = false,
    tooltip,
    autoFocus,
    longPressDescription,
    defaultValue
  } = props;
  const {
    getFieldHookProps,
    innerRef,
    current,
    hasValue,
    iconRight = "4",
    isStacked = false
  } = fieldProps;
  const isDisabled = !!props["aria-disabled"] || disabled || loading;
  const showDisabledIcon = !!props["aria-disabled"] || disabled;
  const isLoading = loading && !props["aria-disabled"] && !disabled;
  const showLoadingIcon = isLoading;
  const ariaLabel = props["aria-label"] || typeof tooltip === "string" && tooltip.length > 0 ? tooltip : void 0;
  const tooltipContent = isLoading ? null : tooltip || props["aria-label"];
  const errorMessage = error || errorOnEmpty;
  const hasTooltip = !!tooltipContent;
  const { isFocused, focusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f({ isTextInput: true, autoFocus });
  const { hoverProps, isHovered } = $6179b936705e76d3$export$ae780daf29e6d456({});
  const { isOpen, isTouchDevice, triggerProps, triggerRef, layerProps } = useTooltip({
    isTargetActive: isFocused || isHovered,
    hasTooltip,
    showOnTouch: true,
    description: longPressDescription,
    direction: "bottom",
    alignment: "start"
  });
  const onBeforeInput = React4.useCallback((event) => {
    if (isDisabled) {
      event.preventDefault();
    }
  }, [isDisabled]);
  const onPress = React4.useCallback(({ pointerType }) => {
    const isMouse = pointerType === "mouse" || !isTouchDevice && pointerType === "virtual";
    if (isDisabled && isMouse) {
      setTimeout(() => current == null ? void 0 : current.blur());
    }
  }, [isDisabled, isTouchDevice]);
  const { pressProps } = $f6c31cce2adf654f$export$45712eceda6fad21({ onPress });
  const [isAutoFocused, setIsAutoFocused] = React4.useState(false);
  const fieldHookProps = __spreadProps(__spreadValues({}, getFieldHookProps()), {
    autoFocus,
    defaultValue,
    label,
    isRequired: required,
    errorMessage,
    "aria-label": ariaLabel,
    onBeforeInput,
    onBlur: () => setIsAutoFocused(false)
  });
  const hasFocus = isFocused || isAutoFocused;
  const hasError = !!errorMessage && !isDisabled;
  const hasDescription = !!description && !isDisabled && !hasError;
  const hasIcon = showDisabledIcon || showLoadingIcon;
  React4.useEffect(() => {
    const focused = !isSSR && document.activeElement;
    const hasFocus2 = current === focused;
    if (autoFocus && hasFocus2) {
      setIsAutoFocused(hasFocus2);
    }
  }, [current, autoFocus]);
  return {
    isDisabled,
    isTouchDevice,
    hasIcon,
    errorIcon: /* @__PURE__ */ React4.createElement(Icon, {
      name: IconName.alert,
      mr: "2",
      mt: "1",
      size: "4",
      lineHeight: "5",
      inline: true,
      verticalAlign: "top"
    }),
    fieldProps: $3ef42575df84b30b$export$9d1611c77c2fe928(pressProps, focusProps, triggerProps),
    fieldRef: mergeRefs2([ref, innerRef, triggerRef]),
    fieldIcon: /* @__PURE__ */ React4.createElement(React4.Fragment, null, showDisabledIcon && !showLoadingIcon && /* @__PURE__ */ React4.createElement(Icon, {
      name: DISABLED_ICON_NAME,
      type: IconType.line,
      forbidden: true,
      size: "5",
      position: "absolute",
      right: iconRight,
      css: {
        bottom: isStacked ? "calc((($sizes$full - $sizes$7) / 2) - $sizes$5 / 2)" : "calc((($sizes$full - $sizes$4) / 2) - $sizes$5 / 2)"
      }
    }), showLoadingIcon && /* @__PURE__ */ React4.createElement(Icon, {
      name: LOADER_ICON_NAME,
      forbidden: true,
      size: "5",
      position: "absolute",
      right: iconRight,
      spin: "slower",
      css: {
        bottom: isStacked ? "calc((($sizes$full - $sizes$7) / 2) - $sizes$5 / 2)" : "calc((($sizes$full - $sizes$4) / 2) - $sizes$5 / 2)"
      }
    })),
    tooltip: /* @__PURE__ */ React4.createElement(Tooltip, {
      content: tooltipContent,
      isOpen,
      layerProps
    }),
    wrapperProps: $3ef42575df84b30b$export$9d1611c77c2fe928(omitProps(triggerProps, ...["color"]), omitProps(hoverProps, ...["color"]), { className: hasFocus ? "focused" : isHovered ? "hovered" : "" }, { className: isDisabled ? "disabled" : "" }, { className: hasIcon ? "hasIcon" : "" }, { className: hasValue ? "hasValue" : "" }),
    fieldHookProps,
    hasError,
    errorMessage,
    hasDescription,
    messageWrapperProps: {
      alignItems: "end",
      justifyContent: "start",
      minHeight: "5"
    }
  };
}
function getTextField(styleOverrides, name = "TextField") {
  const styleKeys = styleOverrides ? Object.keys(styleOverrides) : [];
  const ovrKeys = ["Field", "Wrapper", "Label", "Description", "Error"];
  const isCss = styleKeys.some((key) => !ovrKeys.includes(key));
  const ovr = isCss ? {
    Field: styleOverrides,
    Wrapper: {},
    Label: {},
    Description: {},
    Error: {}
  } : {
    Field: (styleOverrides == null ? void 0 : styleOverrides.Field) || {},
    Wrapper: (styleOverrides == null ? void 0 : styleOverrides.Wrapper) || {},
    Label: (styleOverrides == null ? void 0 : styleOverrides.Label) || {},
    Description: (styleOverrides == null ? void 0 : styleOverrides.Description) || {},
    Error: (styleOverrides == null ? void 0 : styleOverrides.Error) || {}
  };
  const StyledTextField = styled("input", textFieldStyles, ovr.Field, name);
  const Wrapper = styled(Column, wrapperStyles, ovr.Wrapper, name);
  const Label = styled("label", labelStyles, ovr.Label, `${name}_Label`);
  const Description = styled(Text, descriptionStyles, ovr.Description, `${name}_Description`);
  const Error2 = styled(Text, errorStyles, ovr.Error, `${name}_Error`);
  const TextField2 = React4.forwardRef((props, ref) => {
    const _a22 = props, { label, description, defaultValue } = _a22, textFieldProps = __objRest(_a22, ["label", "description", "defaultValue"]);
    const innerFieldProps = omitProps(props, ...[
      "loading",
      "error",
      "errorOnEmpty",
      "disabled",
      "required",
      "autoFocus",
      "longPressDescription",
      "dangerouslySkipDisabledInfo"
    ]);
    const [hasValue, setHasValue] = React4.useState(!!defaultValue);
    const innerRef = React4.useRef(null);
    const onChange = React4.useCallback((event) => {
      const target = event.target;
      const value = String(target.value);
      setHasValue(value.length > 0);
    }, []);
    const getFieldHookProps = () => __spreadProps(__spreadValues({}, textFieldProps), {
      onInput: onChange
    });
    const {
      errorIcon,
      fieldProps,
      fieldRef,
      fieldIcon,
      tooltip,
      wrapperProps,
      fieldHookProps,
      hasError,
      errorMessage,
      hasDescription
    } = useField(props, {
      getFieldHookProps,
      hasValue,
      innerRef,
      current: innerRef.current,
      isStacked: props.variant === "stacked"
    }, ref);
    const { labelProps, inputProps, descriptionProps, errorMessageProps } = $2d73ec29415bd339$export$712718f7aec83d5(fieldHookProps, innerRef);
    const colorScheme = hasError ? "error" : props.colorScheme;
    const { variant, size, contrast } = props;
    React4.useEffect(() => {
      var _a3;
      const handleReset = () => setHasValue(false);
      (_a3 = innerRef.current) == null ? void 0 : _a3.addEventListener("reset", handleReset);
      return () => {
        var _a4;
        return (_a4 = innerRef.current) == null ? void 0 : _a4.removeEventListener("reset", handleReset);
      };
    }, [innerRef.current]);
    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(Wrapper, {
      className: "fieldWrapper",
      variant
    }, /* @__PURE__ */ React4.createElement(Column, __spreadValues({
      as: "div",
      position: "relative"
    }, wrapperProps), /* @__PURE__ */ React4.createElement(Label, __spreadValues({}, $3ef42575df84b30b$export$9d1611c77c2fe928(labelProps, { colorScheme, contrast, variant, size })), label), /* @__PURE__ */ React4.createElement(StyledTextField, __spreadProps(__spreadValues({}, $3ef42575df84b30b$export$9d1611c77c2fe928(innerFieldProps, inputProps, fieldProps, {
      colorScheme
    })), {
      ref: fieldRef
    })), fieldIcon), /* @__PURE__ */ React4.createElement(Column, {
      alignItems: "end",
      justifyContent: "start",
      minHeight: "5"
    }, hasError && /* @__PURE__ */ React4.createElement(Error2, __spreadValues({
      as: "strong",
      size
    }, omitProps(errorMessageProps, ...["color"])), errorIcon, /* @__PURE__ */ React4.createElement("span", null, errorMessage)), hasDescription && /* @__PURE__ */ React4.createElement(Description, __spreadValues({
      as: "em",
      size
    }, omitProps(descriptionProps, ...["color"])), description))), tooltip);
  });
  TextField2.displayName = "TextField";
  return TextField2;
}
var TextField = getTextField();
var numberFieldStyles = {
  $$numberFieldPr: "calc($sizes$8 + $sizes$buttonBasePx)",
  $$numberFieldIconPr: "calc($sizes$8 + $sizes$buttonBasePx + $$extraIconPadding)",
  variants: {
    size: {
      tiny: {
        pr: "$$numberFieldPr",
        ".hasIcon &": { pr: "$$numberFieldIconPr" }
      },
      small: {
        pr: "$$numberFieldPr",
        ".hasIcon &": { pr: "$$numberFieldIconPr" }
      },
      medium: {
        pr: "$$numberFieldPr",
        ".hasIcon &": { pr: "$$numberFieldIconPr" }
      },
      large: {
        pr: "$$numberFieldPr",
        ".hasIcon &": { pr: "$$numberFieldIconPr" }
      }
    }
  }
};
var buttonStyles = {
  $$sizeShift: "2rem",
  $$buttonTinyPy: "calc($sizes$buttonBasePy + $borderWidths$2 - $$sizeShift)",
  $$buttonSmallPy: "calc($sizes$buttonBasePy + $borderWidths$2 - $$sizeShift + $sizes$1)",
  $$buttonMediumPy: "calc($sizes$buttonBasePy + $borderWidths$2 - $$sizeShift + $sizes$2)",
  $$buttonLargePy: "calc($sizes$buttonBasePy + $borderWidths$2 - $$sizeShift + $sizes$3)",
  h: "calc($4 - $borderWidths$2 * 2)",
  px: "$none !important",
  position: "absolute",
  radius: "$field",
  radiusLeft: "$none",
  w: "$8",
  right: 0,
  "&:before, &:after": {
    content: "",
    display: "block",
    h: "$borderWidths$2",
    pointerEvents: "none",
    position: "absolute",
    w: "$borderWidths$2"
  },
  defaultVariants: {
    size: "medium"
  }
};
var incrementButtonStyles = __spreadProps(__spreadValues({}, buttonStyles), {
  pt: "$2",
  radiusBottom: "$none",
  "&:before": {
    bottom: "calc($borderWidths$2 * -1)",
    right: "calc($borderWidths$2 * -1)"
  },
  "&:after": {
    top: "calc($borderWidths$2 * -1)",
    left: "calc($borderWidths$2 * -1)"
  },
  "&.hasBorder": {
    h: "calc($4 - $borderWidths$2 * 3)",
    w: "calc($8 - $borderWidths$2)",
    right: "$borderWidths$2",
    borderTopRightRadius: "calc($field - $borderWidths$2)"
  },
  variants: {
    colorScheme: {
      primary: {
        ".focused > &.disabled:not(.hasBorder), .hovered > &.disabled:not(.hasBorder)": {
          borderTopColor: "$primary9",
          borderRightColor: "$primary9",
          "&:before, &:after": {
            bg: "$primary9"
          }
        }
      },
      secondary: {
        ".focused > &.disabled:not(.hasBorder), .hovered > &.disabled:not(.hasBorder)": {
          borderTopColor: "$secondary9",
          borderRightColor: "$secondary9",
          "&:before, &:after": {
            bg: "$secondary9"
          }
        }
      }
    },
    size: {
      tiny: {
        bottom: "calc($4 + $$buttonTinyPy)",
        pt: "calc($$buttonTinyPy / 2 + $1)",
        pb: "calc($$buttonTinyPy / 2 - $1)"
      },
      small: {
        bottom: "calc($4 + $$buttonSmallPy)",
        pt: "calc($$buttonSmallPy / 2 + $1)",
        pb: "calc($$buttonSmallPy / 2 - $1)"
      },
      medium: {
        bottom: "calc($4 + $$buttonMediumPy)",
        pt: "calc($$buttonMediumPy / 2 + $1)",
        pb: "calc($$buttonMediumPy / 2 - $1)"
      },
      large: {
        bottom: "calc($4 + $$buttonLargePy)",
        pt: "calc($$buttonLargePy / 2 + $1)",
        pb: "calc($$buttonLargePy / 2 - $1)"
      }
    }
  }
});
var decrementButtonStyles = __spreadProps(__spreadValues({}, buttonStyles), {
  bottom: "0",
  pb: "$2",
  radiusTop: "$none",
  "&:before": {
    top: "calc($borderWidths$2 * -1)",
    right: "calc($borderWidths$2 * -1)"
  },
  "&:after": {
    bottom: "calc($borderWidths$2 * -1)",
    left: "calc($borderWidths$2 * -1)"
  },
  "&.hasBorder": {
    bottom: "$borderWidths$2",
    h: "calc($4 - $borderWidths$2 * 3)",
    w: "calc($8 - $borderWidths$2)",
    borderBottomRightRadius: "calc($field - $borderWidths$2)",
    right: "$borderWidths$2"
  },
  variants: {
    colorScheme: {
      primary: {
        ".focused > &.disabled:not(.hasBorder), .hovered > &.disabled:not(.hasBorder)": {
          borderBottomColor: "$primary9",
          borderRightColor: "$primary9",
          "&:before, &:after": {
            bg: "$primary9"
          }
        }
      },
      secondary: {
        ".focused > &.disabled:not(.hasBorder), .hovered > &.disabled:not(.hasBorder)": {
          borderBottomColor: "$secondary9",
          borderRightColor: "$secondary9",
          "&:before, &:after": {
            bg: "$secondary9"
          }
        }
      }
    },
    size: {
      tiny: {
        pt: "calc($$buttonTinyPy / 2 - $1)",
        pb: "calc($$buttonTinyPy / 2 + $1)"
      },
      small: {
        pt: "calc($$buttonSmallPy / 2 - $1)",
        pb: "calc($$buttonSmallPy / 2 + $1)"
      },
      medium: {
        pt: "calc($$buttonMediumPy / 2 - $1)",
        pb: "calc($$buttonMediumPy / 2 + $1)"
      },
      large: {
        pt: "calc($$buttonLargePy / 2 - $1)",
        pb: "calc($$buttonLargePy / 2 + $1)"
      }
    }
  }
});
function getNumberField(styleOverrides, name = "NumberField") {
  const styleKeys = styleOverrides ? Object.keys(styleOverrides) : [];
  const ovrKeys = ["Field", "Wrapper", "Label", "Description", "Error"];
  const isCss = styleKeys.some((key) => !ovrKeys.includes(key));
  const ovr = isCss ? {
    Field: styleOverrides,
    Wrapper: {},
    Label: {},
    Description: {},
    Error: {}
  } : {
    Field: (styleOverrides == null ? void 0 : styleOverrides.Field) || {},
    Wrapper: (styleOverrides == null ? void 0 : styleOverrides.Wrapper) || {},
    Label: (styleOverrides == null ? void 0 : styleOverrides.Label) || {},
    Description: (styleOverrides == null ? void 0 : styleOverrides.Description) || {},
    Error: (styleOverrides == null ? void 0 : styleOverrides.Error) || {}
  };
  const StyledNumberField = styled("input", textFieldStyles, numberFieldStyles, ovr.Field, name);
  const Wrapper = styled(Column, wrapperStyles, ovr.Wrapper, name);
  const Label = styled("label", labelStyles, ovr.Label, `${name}_Label`);
  const Increment = getIconButton(incrementButtonStyles, `${name}_Increment`);
  const Decrement = getIconButton(decrementButtonStyles, `${name}_Decrement`);
  const Description = styled(Text, descriptionStyles, ovr.Description, `${name}_Description`);
  const Error2 = styled(Text, errorStyles, ovr.Error, `${name}_Error`);
  const NumberField2 = React4.forwardRef((props, ref) => {
    const _a22 = props, { label, description, formatOptions, minValue, maxValue, step } = _a22, numberFieldProps = __objRest(_a22, ["label", "description", "formatOptions", "minValue", "maxValue", "step"]);
    const innerFieldProps = omitProps(props, ...[
      "label",
      "description",
      "error",
      "errorOnEmpty",
      "disabled",
      "required",
      "loading",
      "tooltip",
      "autoFocus",
      "longPressDescription",
      "formatOptions",
      "defaultValue",
      "minValue",
      "maxValue",
      "step",
      "dangerouslySkipDisabledInfo"
    ]);
    const innerRef = React4.useRef(null);
    const getFieldHookProps = () => __spreadProps(__spreadValues({}, numberFieldProps), {
      formatOptions,
      minValue,
      maxValue,
      step,
      description
    });
    const {
      errorIcon,
      isDisabled,
      fieldProps,
      fieldRef,
      fieldIcon,
      tooltip,
      wrapperProps,
      fieldHookProps,
      hasError,
      errorMessage,
      hasDescription,
      messageWrapperProps
    } = useField(props, {
      getFieldHookProps,
      iconRight: "9",
      innerRef,
      current: innerRef.current,
      isStacked: props.variant === "stacked"
    }, ref);
    const { locale } = $18f2051aff69b9bf$export$43bb16f9c6d9e3f7();
    const state = $de67e98908f0c6ee$export$7f629e9dc1ecf37c(__spreadProps(__spreadValues({}, fieldHookProps), { locale }));
    const {
      labelProps,
      incrementButtonProps,
      decrementButtonProps,
      inputProps,
      descriptionProps,
      errorMessageProps
    } = $81397a9303501bda$export$23f548e970bdf099(fieldHookProps, state, innerRef);
    const {
      translations: { incrementNumberField, decrementNumberField, maximumReached, minimumReached }
    } = React4.useContext(UIContext);
    const incrementPrefix = incrementNumberField || "Increment";
    const decrementPrefix = decrementNumberField || "Decrement";
    const maximumMessage = maximumReached || "Maximum value reached";
    const minimumMessage = minimumReached || "Minimum value reached";
    const incrementTooltip = state.numberValue === state.maxValue ? maximumMessage : `${incrementPrefix} ${label}`;
    const decrementTooltip = state.numberValue === state.minValue ? minimumMessage : `${decrementPrefix} ${label}`;
    const colorScheme = hasError ? "error" : numberFieldProps.colorScheme;
    const buttonColor = colorScheme === "secondary" ? colorScheme : "primary";
    const { variant, size, contrast } = numberFieldProps;
    function getShifterProps(props2, tip) {
      return {
        disabled: !!props2.isDisabled || isDisabled,
        excludeFromTabOrder: true,
        onPress: (event) => {
          var _a3, _b, _c;
          (_a3 = props2.onPressStart) == null ? void 0 : _a3.call(props2, event);
          (_b = props2.onPressEnd) == null ? void 0 : _b.call(props2, event);
          (_c = props2.onPress) == null ? void 0 : _c.call(props2, event);
        },
        onBlur: props2.onBlur,
        onFocus: props2.onFocus,
        className: numberFieldProps.borderless ? "borderless" : "hasBorder",
        tooltip: tip,
        dangerouslySkipDisabledInfo: isDisabled
      };
    }
    const plusProps = getShifterProps(incrementButtonProps, incrementTooltip);
    const minusProps = getShifterProps(decrementButtonProps, decrementTooltip);
    const inputValue = String(state.inputValue);
    const hasValue = inputValue.length > 0;
    React4.useEffect(() => {
      var _a3;
      const handleReset = () => {
        state.setInputValue(String(props.minValue || 0));
        state.commit();
      };
      (_a3 = innerRef.current) == null ? void 0 : _a3.addEventListener("reset", handleReset);
      return () => {
        var _a4;
        return (_a4 = innerRef.current) == null ? void 0 : _a4.removeEventListener("reset", handleReset);
      };
    }, [innerRef.current, props.minValue, state.commit, state.setInputValue]);
    return /* @__PURE__ */ React4.createElement(React4.Fragment, null, /* @__PURE__ */ React4.createElement(Wrapper, {
      className: "fieldWrapper",
      variant
    }, /* @__PURE__ */ React4.createElement(Column, __spreadValues({
      as: "div",
      position: "relative"
    }, $3ef42575df84b30b$export$9d1611c77c2fe928(wrapperProps, { className: hasValue ? "hasValue" : "" })), /* @__PURE__ */ React4.createElement(Label, __spreadValues({}, $3ef42575df84b30b$export$9d1611c77c2fe928(labelProps, { colorScheme, contrast, variant, size })), label), /* @__PURE__ */ React4.createElement(StyledNumberField, __spreadProps(__spreadValues({}, $3ef42575df84b30b$export$9d1611c77c2fe928(innerFieldProps, inputProps, fieldProps, {
      colorScheme
    })), {
      ref: fieldRef
    })), fieldIcon, /* @__PURE__ */ React4.createElement(Increment, __spreadProps(__spreadValues({}, plusProps), {
      iconName: IconName.arrowUpS,
      size,
      variant: "ghost",
      colorScheme: buttonColor,
      iconType: IconType.line,
      dangerouslyHideTooltipHint: true
    })), /* @__PURE__ */ React4.createElement(Decrement, __spreadProps(__spreadValues({}, minusProps), {
      iconName: IconName.arrowDownS,
      size,
      variant: "ghost",
      colorScheme: buttonColor,
      iconType: IconType.line,
      dangerouslyHideTooltipHint: true
    }))), /* @__PURE__ */ React4.createElement(Column, __spreadValues({}, messageWrapperProps), hasError && /* @__PURE__ */ React4.createElement(Error2, __spreadValues({
      as: "strong",
      size
    }, omitProps(errorMessageProps, ...["color"])), errorIcon, /* @__PURE__ */ React4.createElement("span", null, errorMessage)), hasDescription && /* @__PURE__ */ React4.createElement(Description, __spreadValues({
      as: "em",
      size
    }, omitProps(descriptionProps, ...["color"])), description))), tooltip);
  });
  NumberField2.displayName = "NumberField";
  return NumberField2;
}
var NumberField = getNumberField();

// app/config/ui/index.ts
init_react();

// app/config/ui/gadget.theme.ts
init_react();
var { fonts, links } = getThemeFonts({
  body: "openSans",
  button: "inconsolata",
  heading: "inconsolata",
  code: "inconsolata"
});
var fontLinks = links;
var CUSTOM_STYLES = {
  fontSizes: {
    base: "16rem",
    h1: "$10",
    h2: "$8",
    h3: "$7",
    h4: "$6",
    h5: "$5",
    h6: "$4",
    button: "calc($3 * 1.075)",
    field: "$2"
  },
  fonts,
  sizes: {
    buttonBasePy: "$2",
    tooltipBaseP: "$3"
  },
  lineHeights: { modifier: "1rem" },
  radii: {}
};
var customPalette = {
  neutral: "hsl(60,6.67%,94.12%)",
  primary: "hsl(240,100%,54.31%)",
  secondary: "hsl(90.93,100%,44.12%)"
};
var customDarkPalette = {
  neutral: "hsl(60,6.67%,94.12%)",
  primary: "hsl(240,100%,54.31%)",
  secondary: "hsl(90.93,100%,44.12%)"
};
var customThemeValues = {
  ...CUSTOM_STYLES,
  colors: {
    ...generateThemeColors(customPalette, "light", true),
    defaultHeading: "$neutralMax"
  }
};
var customTheme = createTheme("custom-theme", customThemeValues);
var customDarkThemeValues = {
  ...CUSTOM_STYLES,
  colors: {
    ...generateThemeColors(customDarkPalette, "dark", true),
    defaultHeading: "$neutralMax"
  }
};
var customDarkTheme = createTheme("custom-dark-theme", customDarkThemeValues);
var customButtonStyles = {
  defaultVariants: { variant: "tactile" }
};
var customIconButtonStyles = customButtonStyles;

// app/config/ui/index.ts
var useDefaultTheme = false;
var simulateRTL = false;
var appTheme = useDefaultTheme ? theme : customTheme;
var appDarkTheme = useDefaultTheme ? darkTheme : customDarkTheme;
var appFontLinks = useDefaultTheme ? getThemeFonts().links : fontLinks;
var appGlobalStyles = globalCss({});
var Button2 = getButton(useDefaultTheme ? {} : customButtonStyles, "Button");
var IconButton2 = getIconButton(useDefaultTheme ? {} : customIconButtonStyles, "IconButton");

export {
  enumKeys,
  capitalizeFirstLetter,
  IconType,
  IconName,
  DEFAULT_HUE,
  DEFAULT_PALETTE,
  FlavorColorName,
  UITheme,
  UIProvider,
  useColor,
  useColors,
  useTheme,
  useBorderStyles,
  useColorStyles,
  useFontStyles,
  useTextStyles,
  useRadiusStyles,
  useSpacingStyles,
  Html,
  styled,
  createTheme,
  animate,
  globalStyles,
  Box,
  Column,
  Grid,
  GridItem,
  Text,
  Heading,
  Anchor,
  FlexList,
  FlexListItem,
  List,
  ListItem,
  Row,
  RowItem,
  Icon,
  TextField,
  NumberField,
  import_locale_enum2 as import_locale_enum,
  simulateRTL,
  appTheme,
  appDarkTheme,
  appFontLinks,
  appGlobalStyles,
  Button2 as Button,
  IconButton2 as IconButton
};
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */
/**
 * chroma.js - JavaScript library for color conversions
 *
 * Copyright (c) 2011-2019, Gregor Aisch
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. The name Gregor Aisch may not be used to endorse or promote products
 * derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL GREGOR AISCH OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -------------------------------------------------------
 *
 * chroma.js includes colors from colorbrewer2.org, which are released under
 * the following license:
 *
 * Copyright (c) 2002 Cynthia Brewer, Mark Harrower,
 * and The Pennsylvania State University.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific
 * language governing permissions and limitations under the License.
 *
 * ------------------------------------------------------
 *
 * Named colors are taken from X11 Color Names.
 * http://www.w3.org/TR/css3-color/#svg-color
 *
 * @preserve
 */
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=/build/_shared/chunk-VHWD4JCQ.js.map
